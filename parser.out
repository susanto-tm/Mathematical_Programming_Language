Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COLON
    COMMA
    CONTINUE
    DEFAULT
    DIVEQUALS
    FLOAT
    FROM
    INT
    INTEGRATE
    LBRACKET
    MINUSEQUALS
    MULEQUALS
    NOT
    PERIOD
    PLUSEQUALS
    RBRACKET
    RETURN
    STRING
    SWITCH
    TO
    TYPE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> commands
Rule 2     commands -> commands basic_block
Rule 3     commands -> empty
Rule 4     basic_block -> line_statement
Rule 5     basic_block -> basic_block line_statement
Rule 6     line_statement -> statement SEMICOLON
Rule 7     line_statement -> if_line
Rule 8     line_statement -> if_line else_line
Rule 9     line_statement -> for_line
Rule 10    statement -> PRINT LPAREN expr_list RPAREN
Rule 11    statement -> LET IDENTIFIER EQUALS expr
Rule 12    statement -> IDENTIFIER EQUALS expr
Rule 13    expr_list -> expr
Rule 14    expr_list -> cond_list
Rule 15    expr_list -> expr_list expr
Rule 16    expr -> expr PLUS expr
Rule 17    expr -> expr MINUS expr
Rule 18    expr -> expr MUL expr
Rule 19    expr -> expr DIV expr
Rule 20    expr -> expr MOD expr
Rule 21    expr -> expr POW expr
Rule 22    expr -> expr LE expr
Rule 23    expr -> expr GE expr
Rule 24    expr -> expr LT expr
Rule 25    expr -> expr GT expr
Rule 26    expr -> expr EQ expr
Rule 27    expr -> expr NE expr
Rule 28    expr -> expr PLUSPLUS
Rule 29    expr -> expr MINUSMINUS
Rule 30    expr -> IDENTIFIER
Rule 31    expr -> INTCONST
Rule 32    expr -> FLOATCONST
Rule 33    expr -> STRINGCONST
Rule 34    expr -> TRUE
Rule 35    expr -> FALSE
Rule 36    expr -> LPAREN expr RPAREN
Rule 37    cond_list -> expr
Rule 38    cond_list -> cond_list AND expr
Rule 39    cond_list -> cond_list OR expr
Rule 40    if_line -> IF cond_list LBRACE basic_block RBRACE
Rule 41    else_line -> ELSE LBRACE basic_block RBRACE
Rule 42    for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE
Rule 43    range -> LPAREN expr ELLIPSIS expr RPAREN
Rule 44    empty -> <empty>

Terminals, with rules where they appear

AND                  : 38
BREAK                : 
CASE                 : 
COLON                : 
COMMA                : 
CONTINUE             : 
DEFAULT              : 
DIV                  : 19
DIVEQUALS            : 
ELLIPSIS             : 43
ELSE                 : 41
EQ                   : 26
EQUALS               : 11 12
FALSE                : 35
FLOAT                : 
FLOATCONST           : 32
FOR                  : 42
FROM                 : 
GE                   : 23
GT                   : 25
IDENTIFIER           : 11 12 30 42
IF                   : 40
INT                  : 
INTCONST             : 31
INTEGRATE            : 
LBRACE               : 40 41 42
LBRACKET             : 
LE                   : 22
LET                  : 11
LPAREN               : 10 36 43
LT                   : 24
MINUS                : 17
MINUSEQUALS          : 
MINUSMINUS           : 29
MOD                  : 20
MUL                  : 18
MULEQUALS            : 
NE                   : 27
NOT                  : 
OR                   : 39
PERIOD               : 
PLUS                 : 16
PLUSEQUALS           : 
PLUSPLUS             : 28
POW                  : 21
PRINT                : 10
RBRACE               : 40 41 42
RBRACKET             : 
RETURN               : 
RPAREN               : 10 36 43
SEMICOLON            : 6
STRING               : 
STRINGCONST          : 33
SWITCH               : 
TO                   : 
TRUE                 : 34
TYPE                 : 
WALRUS               : 42
WHILE                : 
error                : 

Nonterminals, with rules where they appear

basic_block          : 2 5 40 41 42
commands             : 1 2
cond_list            : 14 38 39 40
else_line            : 8
empty                : 3
expr                 : 11 12 13 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 29 36 37 38 39 43 43
expr_list            : 10 15
for_line             : 9
if_line              : 7 8
line_statement       : 4 5
program              : 0
range                : 42
statement            : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commands
    (2) commands -> . commands basic_block
    (3) commands -> . empty
    (44) empty -> .

    PRINT           reduce using rule 44 (empty -> .)
    LET             reduce using rule 44 (empty -> .)
    IDENTIFIER      reduce using rule 44 (empty -> .)
    IF              reduce using rule 44 (empty -> .)
    FOR             reduce using rule 44 (empty -> .)
    $end            reduce using rule 44 (empty -> .)

    program                        shift and go to state 1
    commands                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> commands .
    (2) commands -> commands . basic_block
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    $end            reduce using rule 1 (program -> commands .)
    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    basic_block                    shift and go to state 4
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 3

    (3) commands -> empty .

    PRINT           reduce using rule 3 (commands -> empty .)
    LET             reduce using rule 3 (commands -> empty .)
    IDENTIFIER      reduce using rule 3 (commands -> empty .)
    IF              reduce using rule 3 (commands -> empty .)
    FOR             reduce using rule 3 (commands -> empty .)
    $end            reduce using rule 3 (commands -> empty .)


state 4

    (2) commands -> commands basic_block .
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    $end            reduce using rule 2 (commands -> commands basic_block .)
    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

  ! PRINT           [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! LET             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IDENTIFIER      [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IF              [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FOR             [ reduce using rule 2 (commands -> commands basic_block .) ]

    line_statement                 shift and go to state 14
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 5

    (4) basic_block -> line_statement .

    PRINT           reduce using rule 4 (basic_block -> line_statement .)
    LET             reduce using rule 4 (basic_block -> line_statement .)
    IDENTIFIER      reduce using rule 4 (basic_block -> line_statement .)
    IF              reduce using rule 4 (basic_block -> line_statement .)
    FOR             reduce using rule 4 (basic_block -> line_statement .)
    $end            reduce using rule 4 (basic_block -> line_statement .)
    RBRACE          reduce using rule 4 (basic_block -> line_statement .)


state 6

    (6) line_statement -> statement . SEMICOLON

    SEMICOLON       shift and go to state 15


state 7

    (7) line_statement -> if_line .
    (8) line_statement -> if_line . else_line
    (41) else_line -> . ELSE LBRACE basic_block RBRACE

    PRINT           reduce using rule 7 (line_statement -> if_line .)
    LET             reduce using rule 7 (line_statement -> if_line .)
    IDENTIFIER      reduce using rule 7 (line_statement -> if_line .)
    IF              reduce using rule 7 (line_statement -> if_line .)
    FOR             reduce using rule 7 (line_statement -> if_line .)
    $end            reduce using rule 7 (line_statement -> if_line .)
    RBRACE          reduce using rule 7 (line_statement -> if_line .)
    ELSE            shift and go to state 17

    else_line                      shift and go to state 16

state 8

    (9) line_statement -> for_line .

    PRINT           reduce using rule 9 (line_statement -> for_line .)
    LET             reduce using rule 9 (line_statement -> for_line .)
    IDENTIFIER      reduce using rule 9 (line_statement -> for_line .)
    IF              reduce using rule 9 (line_statement -> for_line .)
    FOR             reduce using rule 9 (line_statement -> for_line .)
    $end            reduce using rule 9 (line_statement -> for_line .)
    RBRACE          reduce using rule 9 (line_statement -> for_line .)


state 9

    (10) statement -> PRINT . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 18


state 10

    (11) statement -> LET . IDENTIFIER EQUALS expr

    IDENTIFIER      shift and go to state 19


state 11

    (12) statement -> IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 20


state 12

    (40) if_line -> IF . cond_list LBRACE basic_block RBRACE
    (37) cond_list -> . expr
    (38) cond_list -> . cond_list AND expr
    (39) cond_list -> . cond_list OR expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    cond_list                      shift and go to state 21
    expr                           shift and go to state 22

state 13

    (42) for_line -> FOR . IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    IDENTIFIER      shift and go to state 30


state 14

    (5) basic_block -> basic_block line_statement .

    PRINT           reduce using rule 5 (basic_block -> basic_block line_statement .)
    LET             reduce using rule 5 (basic_block -> basic_block line_statement .)
    IDENTIFIER      reduce using rule 5 (basic_block -> basic_block line_statement .)
    IF              reduce using rule 5 (basic_block -> basic_block line_statement .)
    FOR             reduce using rule 5 (basic_block -> basic_block line_statement .)
    $end            reduce using rule 5 (basic_block -> basic_block line_statement .)
    RBRACE          reduce using rule 5 (basic_block -> basic_block line_statement .)


state 15

    (6) line_statement -> statement SEMICOLON .

    PRINT           reduce using rule 6 (line_statement -> statement SEMICOLON .)
    LET             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IF              reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FOR             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    $end            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    RBRACE          reduce using rule 6 (line_statement -> statement SEMICOLON .)


state 16

    (8) line_statement -> if_line else_line .

    PRINT           reduce using rule 8 (line_statement -> if_line else_line .)
    LET             reduce using rule 8 (line_statement -> if_line else_line .)
    IDENTIFIER      reduce using rule 8 (line_statement -> if_line else_line .)
    IF              reduce using rule 8 (line_statement -> if_line else_line .)
    FOR             reduce using rule 8 (line_statement -> if_line else_line .)
    $end            reduce using rule 8 (line_statement -> if_line else_line .)
    RBRACE          reduce using rule 8 (line_statement -> if_line else_line .)


state 17

    (41) else_line -> ELSE . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 31


state 18

    (10) statement -> PRINT LPAREN . expr_list RPAREN
    (13) expr_list -> . expr
    (14) expr_list -> . cond_list
    (15) expr_list -> . expr_list expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN
    (37) cond_list -> . expr
    (38) cond_list -> . cond_list AND expr
    (39) cond_list -> . cond_list OR expr

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr_list                      shift and go to state 32
    expr                           shift and go to state 33
    cond_list                      shift and go to state 34

state 19

    (11) statement -> LET IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 35


state 20

    (12) statement -> IDENTIFIER EQUALS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 36

state 21

    (40) if_line -> IF cond_list . LBRACE basic_block RBRACE
    (38) cond_list -> cond_list . AND expr
    (39) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 37
    AND             shift and go to state 38
    OR              shift and go to state 39


state 22

    (37) cond_list -> expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    LBRACE          reduce using rule 37 (cond_list -> expr .)
    AND             reduce using rule 37 (cond_list -> expr .)
    OR              reduce using rule 37 (cond_list -> expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 23

    (30) expr -> IDENTIFIER .

    PLUS            reduce using rule 30 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 30 (expr -> IDENTIFIER .)
    MUL             reduce using rule 30 (expr -> IDENTIFIER .)
    DIV             reduce using rule 30 (expr -> IDENTIFIER .)
    MOD             reduce using rule 30 (expr -> IDENTIFIER .)
    POW             reduce using rule 30 (expr -> IDENTIFIER .)
    LE              reduce using rule 30 (expr -> IDENTIFIER .)
    GE              reduce using rule 30 (expr -> IDENTIFIER .)
    LT              reduce using rule 30 (expr -> IDENTIFIER .)
    GT              reduce using rule 30 (expr -> IDENTIFIER .)
    EQ              reduce using rule 30 (expr -> IDENTIFIER .)
    NE              reduce using rule 30 (expr -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 30 (expr -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 30 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 30 (expr -> IDENTIFIER .)
    AND             reduce using rule 30 (expr -> IDENTIFIER .)
    OR              reduce using rule 30 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 30 (expr -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 30 (expr -> IDENTIFIER .)
    INTCONST        reduce using rule 30 (expr -> IDENTIFIER .)
    FLOATCONST      reduce using rule 30 (expr -> IDENTIFIER .)
    STRINGCONST     reduce using rule 30 (expr -> IDENTIFIER .)
    TRUE            reduce using rule 30 (expr -> IDENTIFIER .)
    FALSE           reduce using rule 30 (expr -> IDENTIFIER .)
    LPAREN          reduce using rule 30 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 30 (expr -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 30 (expr -> IDENTIFIER .)


state 24

    (31) expr -> INTCONST .

    PLUS            reduce using rule 31 (expr -> INTCONST .)
    MINUS           reduce using rule 31 (expr -> INTCONST .)
    MUL             reduce using rule 31 (expr -> INTCONST .)
    DIV             reduce using rule 31 (expr -> INTCONST .)
    MOD             reduce using rule 31 (expr -> INTCONST .)
    POW             reduce using rule 31 (expr -> INTCONST .)
    LE              reduce using rule 31 (expr -> INTCONST .)
    GE              reduce using rule 31 (expr -> INTCONST .)
    LT              reduce using rule 31 (expr -> INTCONST .)
    GT              reduce using rule 31 (expr -> INTCONST .)
    EQ              reduce using rule 31 (expr -> INTCONST .)
    NE              reduce using rule 31 (expr -> INTCONST .)
    PLUSPLUS        reduce using rule 31 (expr -> INTCONST .)
    MINUSMINUS      reduce using rule 31 (expr -> INTCONST .)
    LBRACE          reduce using rule 31 (expr -> INTCONST .)
    AND             reduce using rule 31 (expr -> INTCONST .)
    OR              reduce using rule 31 (expr -> INTCONST .)
    RPAREN          reduce using rule 31 (expr -> INTCONST .)
    IDENTIFIER      reduce using rule 31 (expr -> INTCONST .)
    INTCONST        reduce using rule 31 (expr -> INTCONST .)
    FLOATCONST      reduce using rule 31 (expr -> INTCONST .)
    STRINGCONST     reduce using rule 31 (expr -> INTCONST .)
    TRUE            reduce using rule 31 (expr -> INTCONST .)
    FALSE           reduce using rule 31 (expr -> INTCONST .)
    LPAREN          reduce using rule 31 (expr -> INTCONST .)
    SEMICOLON       reduce using rule 31 (expr -> INTCONST .)
    ELLIPSIS        reduce using rule 31 (expr -> INTCONST .)


state 25

    (32) expr -> FLOATCONST .

    PLUS            reduce using rule 32 (expr -> FLOATCONST .)
    MINUS           reduce using rule 32 (expr -> FLOATCONST .)
    MUL             reduce using rule 32 (expr -> FLOATCONST .)
    DIV             reduce using rule 32 (expr -> FLOATCONST .)
    MOD             reduce using rule 32 (expr -> FLOATCONST .)
    POW             reduce using rule 32 (expr -> FLOATCONST .)
    LE              reduce using rule 32 (expr -> FLOATCONST .)
    GE              reduce using rule 32 (expr -> FLOATCONST .)
    LT              reduce using rule 32 (expr -> FLOATCONST .)
    GT              reduce using rule 32 (expr -> FLOATCONST .)
    EQ              reduce using rule 32 (expr -> FLOATCONST .)
    NE              reduce using rule 32 (expr -> FLOATCONST .)
    PLUSPLUS        reduce using rule 32 (expr -> FLOATCONST .)
    MINUSMINUS      reduce using rule 32 (expr -> FLOATCONST .)
    LBRACE          reduce using rule 32 (expr -> FLOATCONST .)
    AND             reduce using rule 32 (expr -> FLOATCONST .)
    OR              reduce using rule 32 (expr -> FLOATCONST .)
    RPAREN          reduce using rule 32 (expr -> FLOATCONST .)
    IDENTIFIER      reduce using rule 32 (expr -> FLOATCONST .)
    INTCONST        reduce using rule 32 (expr -> FLOATCONST .)
    FLOATCONST      reduce using rule 32 (expr -> FLOATCONST .)
    STRINGCONST     reduce using rule 32 (expr -> FLOATCONST .)
    TRUE            reduce using rule 32 (expr -> FLOATCONST .)
    FALSE           reduce using rule 32 (expr -> FLOATCONST .)
    LPAREN          reduce using rule 32 (expr -> FLOATCONST .)
    SEMICOLON       reduce using rule 32 (expr -> FLOATCONST .)
    ELLIPSIS        reduce using rule 32 (expr -> FLOATCONST .)


state 26

    (33) expr -> STRINGCONST .

    PLUS            reduce using rule 33 (expr -> STRINGCONST .)
    MINUS           reduce using rule 33 (expr -> STRINGCONST .)
    MUL             reduce using rule 33 (expr -> STRINGCONST .)
    DIV             reduce using rule 33 (expr -> STRINGCONST .)
    MOD             reduce using rule 33 (expr -> STRINGCONST .)
    POW             reduce using rule 33 (expr -> STRINGCONST .)
    LE              reduce using rule 33 (expr -> STRINGCONST .)
    GE              reduce using rule 33 (expr -> STRINGCONST .)
    LT              reduce using rule 33 (expr -> STRINGCONST .)
    GT              reduce using rule 33 (expr -> STRINGCONST .)
    EQ              reduce using rule 33 (expr -> STRINGCONST .)
    NE              reduce using rule 33 (expr -> STRINGCONST .)
    PLUSPLUS        reduce using rule 33 (expr -> STRINGCONST .)
    MINUSMINUS      reduce using rule 33 (expr -> STRINGCONST .)
    LBRACE          reduce using rule 33 (expr -> STRINGCONST .)
    AND             reduce using rule 33 (expr -> STRINGCONST .)
    OR              reduce using rule 33 (expr -> STRINGCONST .)
    RPAREN          reduce using rule 33 (expr -> STRINGCONST .)
    IDENTIFIER      reduce using rule 33 (expr -> STRINGCONST .)
    INTCONST        reduce using rule 33 (expr -> STRINGCONST .)
    FLOATCONST      reduce using rule 33 (expr -> STRINGCONST .)
    STRINGCONST     reduce using rule 33 (expr -> STRINGCONST .)
    TRUE            reduce using rule 33 (expr -> STRINGCONST .)
    FALSE           reduce using rule 33 (expr -> STRINGCONST .)
    LPAREN          reduce using rule 33 (expr -> STRINGCONST .)
    SEMICOLON       reduce using rule 33 (expr -> STRINGCONST .)
    ELLIPSIS        reduce using rule 33 (expr -> STRINGCONST .)


state 27

    (34) expr -> TRUE .

    PLUS            reduce using rule 34 (expr -> TRUE .)
    MINUS           reduce using rule 34 (expr -> TRUE .)
    MUL             reduce using rule 34 (expr -> TRUE .)
    DIV             reduce using rule 34 (expr -> TRUE .)
    MOD             reduce using rule 34 (expr -> TRUE .)
    POW             reduce using rule 34 (expr -> TRUE .)
    LE              reduce using rule 34 (expr -> TRUE .)
    GE              reduce using rule 34 (expr -> TRUE .)
    LT              reduce using rule 34 (expr -> TRUE .)
    GT              reduce using rule 34 (expr -> TRUE .)
    EQ              reduce using rule 34 (expr -> TRUE .)
    NE              reduce using rule 34 (expr -> TRUE .)
    PLUSPLUS        reduce using rule 34 (expr -> TRUE .)
    MINUSMINUS      reduce using rule 34 (expr -> TRUE .)
    LBRACE          reduce using rule 34 (expr -> TRUE .)
    AND             reduce using rule 34 (expr -> TRUE .)
    OR              reduce using rule 34 (expr -> TRUE .)
    RPAREN          reduce using rule 34 (expr -> TRUE .)
    IDENTIFIER      reduce using rule 34 (expr -> TRUE .)
    INTCONST        reduce using rule 34 (expr -> TRUE .)
    FLOATCONST      reduce using rule 34 (expr -> TRUE .)
    STRINGCONST     reduce using rule 34 (expr -> TRUE .)
    TRUE            reduce using rule 34 (expr -> TRUE .)
    FALSE           reduce using rule 34 (expr -> TRUE .)
    LPAREN          reduce using rule 34 (expr -> TRUE .)
    SEMICOLON       reduce using rule 34 (expr -> TRUE .)
    ELLIPSIS        reduce using rule 34 (expr -> TRUE .)


state 28

    (35) expr -> FALSE .

    PLUS            reduce using rule 35 (expr -> FALSE .)
    MINUS           reduce using rule 35 (expr -> FALSE .)
    MUL             reduce using rule 35 (expr -> FALSE .)
    DIV             reduce using rule 35 (expr -> FALSE .)
    MOD             reduce using rule 35 (expr -> FALSE .)
    POW             reduce using rule 35 (expr -> FALSE .)
    LE              reduce using rule 35 (expr -> FALSE .)
    GE              reduce using rule 35 (expr -> FALSE .)
    LT              reduce using rule 35 (expr -> FALSE .)
    GT              reduce using rule 35 (expr -> FALSE .)
    EQ              reduce using rule 35 (expr -> FALSE .)
    NE              reduce using rule 35 (expr -> FALSE .)
    PLUSPLUS        reduce using rule 35 (expr -> FALSE .)
    MINUSMINUS      reduce using rule 35 (expr -> FALSE .)
    LBRACE          reduce using rule 35 (expr -> FALSE .)
    AND             reduce using rule 35 (expr -> FALSE .)
    OR              reduce using rule 35 (expr -> FALSE .)
    RPAREN          reduce using rule 35 (expr -> FALSE .)
    IDENTIFIER      reduce using rule 35 (expr -> FALSE .)
    INTCONST        reduce using rule 35 (expr -> FALSE .)
    FLOATCONST      reduce using rule 35 (expr -> FALSE .)
    STRINGCONST     reduce using rule 35 (expr -> FALSE .)
    TRUE            reduce using rule 35 (expr -> FALSE .)
    FALSE           reduce using rule 35 (expr -> FALSE .)
    LPAREN          reduce using rule 35 (expr -> FALSE .)
    SEMICOLON       reduce using rule 35 (expr -> FALSE .)
    ELLIPSIS        reduce using rule 35 (expr -> FALSE .)


state 29

    (36) expr -> LPAREN . expr RPAREN
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 54

state 30

    (42) for_line -> FOR IDENTIFIER . WALRUS range LBRACE basic_block RBRACE

    WALRUS          shift and go to state 55


state 31

    (41) else_line -> ELSE LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    basic_block                    shift and go to state 56
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 32

    (10) statement -> PRINT LPAREN expr_list . RPAREN
    (15) expr_list -> expr_list . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    RPAREN          shift and go to state 57
    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 58

state 33

    (13) expr_list -> expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS
    (37) cond_list -> expr .

  ! reduce/reduce conflict for RPAREN resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for INTCONST resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for FLOATCONST resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for STRINGCONST resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for TRUE resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for FALSE resolved using rule 13 (expr_list -> expr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (expr_list -> expr .)
    RPAREN          reduce using rule 13 (expr_list -> expr .)
    IDENTIFIER      reduce using rule 13 (expr_list -> expr .)
    INTCONST        reduce using rule 13 (expr_list -> expr .)
    FLOATCONST      reduce using rule 13 (expr_list -> expr .)
    STRINGCONST     reduce using rule 13 (expr_list -> expr .)
    TRUE            reduce using rule 13 (expr_list -> expr .)
    FALSE           reduce using rule 13 (expr_list -> expr .)
    LPAREN          reduce using rule 13 (expr_list -> expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53
    AND             reduce using rule 37 (cond_list -> expr .)
    OR              reduce using rule 37 (cond_list -> expr .)

  ! RPAREN          [ reduce using rule 37 (cond_list -> expr .) ]
  ! IDENTIFIER      [ reduce using rule 37 (cond_list -> expr .) ]
  ! INTCONST        [ reduce using rule 37 (cond_list -> expr .) ]
  ! FLOATCONST      [ reduce using rule 37 (cond_list -> expr .) ]
  ! STRINGCONST     [ reduce using rule 37 (cond_list -> expr .) ]
  ! TRUE            [ reduce using rule 37 (cond_list -> expr .) ]
  ! FALSE           [ reduce using rule 37 (cond_list -> expr .) ]
  ! LPAREN          [ reduce using rule 37 (cond_list -> expr .) ]


state 34

    (14) expr_list -> cond_list .
    (38) cond_list -> cond_list . AND expr
    (39) cond_list -> cond_list . OR expr

    RPAREN          reduce using rule 14 (expr_list -> cond_list .)
    IDENTIFIER      reduce using rule 14 (expr_list -> cond_list .)
    INTCONST        reduce using rule 14 (expr_list -> cond_list .)
    FLOATCONST      reduce using rule 14 (expr_list -> cond_list .)
    STRINGCONST     reduce using rule 14 (expr_list -> cond_list .)
    TRUE            reduce using rule 14 (expr_list -> cond_list .)
    FALSE           reduce using rule 14 (expr_list -> cond_list .)
    LPAREN          reduce using rule 14 (expr_list -> cond_list .)
    AND             shift and go to state 38
    OR              shift and go to state 39


state 35

    (11) statement -> LET IDENTIFIER EQUALS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 59

state 36

    (12) statement -> IDENTIFIER EQUALS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    SEMICOLON       reduce using rule 12 (statement -> IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 37

    (40) if_line -> IF cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    basic_block                    shift and go to state 60
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 38

    (38) cond_list -> cond_list AND . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 61

state 39

    (39) cond_list -> cond_list OR . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 62

state 40

    (16) expr -> expr PLUS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 63

state 41

    (17) expr -> expr MINUS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 64

state 42

    (18) expr -> expr MUL . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 65

state 43

    (19) expr -> expr DIV . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 66

state 44

    (20) expr -> expr MOD . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 67

state 45

    (21) expr -> expr POW . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 68

state 46

    (22) expr -> expr LE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 69

state 47

    (23) expr -> expr GE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 70

state 48

    (24) expr -> expr LT . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 71

state 49

    (25) expr -> expr GT . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 72

state 50

    (26) expr -> expr EQ . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 73

state 51

    (27) expr -> expr NE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 74

state 52

    (28) expr -> expr PLUSPLUS .

    PLUS            reduce using rule 28 (expr -> expr PLUSPLUS .)
    MINUS           reduce using rule 28 (expr -> expr PLUSPLUS .)
    MUL             reduce using rule 28 (expr -> expr PLUSPLUS .)
    DIV             reduce using rule 28 (expr -> expr PLUSPLUS .)
    MOD             reduce using rule 28 (expr -> expr PLUSPLUS .)
    POW             reduce using rule 28 (expr -> expr PLUSPLUS .)
    LE              reduce using rule 28 (expr -> expr PLUSPLUS .)
    GE              reduce using rule 28 (expr -> expr PLUSPLUS .)
    LT              reduce using rule 28 (expr -> expr PLUSPLUS .)
    GT              reduce using rule 28 (expr -> expr PLUSPLUS .)
    EQ              reduce using rule 28 (expr -> expr PLUSPLUS .)
    NE              reduce using rule 28 (expr -> expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 28 (expr -> expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 28 (expr -> expr PLUSPLUS .)
    LBRACE          reduce using rule 28 (expr -> expr PLUSPLUS .)
    AND             reduce using rule 28 (expr -> expr PLUSPLUS .)
    OR              reduce using rule 28 (expr -> expr PLUSPLUS .)
    RPAREN          reduce using rule 28 (expr -> expr PLUSPLUS .)
    IDENTIFIER      reduce using rule 28 (expr -> expr PLUSPLUS .)
    INTCONST        reduce using rule 28 (expr -> expr PLUSPLUS .)
    FLOATCONST      reduce using rule 28 (expr -> expr PLUSPLUS .)
    STRINGCONST     reduce using rule 28 (expr -> expr PLUSPLUS .)
    TRUE            reduce using rule 28 (expr -> expr PLUSPLUS .)
    FALSE           reduce using rule 28 (expr -> expr PLUSPLUS .)
    LPAREN          reduce using rule 28 (expr -> expr PLUSPLUS .)
    SEMICOLON       reduce using rule 28 (expr -> expr PLUSPLUS .)
    ELLIPSIS        reduce using rule 28 (expr -> expr PLUSPLUS .)


state 53

    (29) expr -> expr MINUSMINUS .

    PLUS            reduce using rule 29 (expr -> expr MINUSMINUS .)
    MINUS           reduce using rule 29 (expr -> expr MINUSMINUS .)
    MUL             reduce using rule 29 (expr -> expr MINUSMINUS .)
    DIV             reduce using rule 29 (expr -> expr MINUSMINUS .)
    MOD             reduce using rule 29 (expr -> expr MINUSMINUS .)
    POW             reduce using rule 29 (expr -> expr MINUSMINUS .)
    LE              reduce using rule 29 (expr -> expr MINUSMINUS .)
    GE              reduce using rule 29 (expr -> expr MINUSMINUS .)
    LT              reduce using rule 29 (expr -> expr MINUSMINUS .)
    GT              reduce using rule 29 (expr -> expr MINUSMINUS .)
    EQ              reduce using rule 29 (expr -> expr MINUSMINUS .)
    NE              reduce using rule 29 (expr -> expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 29 (expr -> expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 29 (expr -> expr MINUSMINUS .)
    LBRACE          reduce using rule 29 (expr -> expr MINUSMINUS .)
    AND             reduce using rule 29 (expr -> expr MINUSMINUS .)
    OR              reduce using rule 29 (expr -> expr MINUSMINUS .)
    RPAREN          reduce using rule 29 (expr -> expr MINUSMINUS .)
    IDENTIFIER      reduce using rule 29 (expr -> expr MINUSMINUS .)
    INTCONST        reduce using rule 29 (expr -> expr MINUSMINUS .)
    FLOATCONST      reduce using rule 29 (expr -> expr MINUSMINUS .)
    STRINGCONST     reduce using rule 29 (expr -> expr MINUSMINUS .)
    TRUE            reduce using rule 29 (expr -> expr MINUSMINUS .)
    FALSE           reduce using rule 29 (expr -> expr MINUSMINUS .)
    LPAREN          reduce using rule 29 (expr -> expr MINUSMINUS .)
    SEMICOLON       reduce using rule 29 (expr -> expr MINUSMINUS .)
    ELLIPSIS        reduce using rule 29 (expr -> expr MINUSMINUS .)


state 54

    (36) expr -> LPAREN expr . RPAREN
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 55

    (42) for_line -> FOR IDENTIFIER WALRUS . range LBRACE basic_block RBRACE
    (43) range -> . LPAREN expr ELLIPSIS expr RPAREN

    LPAREN          shift and go to state 77

    range                          shift and go to state 76

state 56

    (41) else_line -> ELSE LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    RBRACE          shift and go to state 78
    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    line_statement                 shift and go to state 14
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 57

    (10) statement -> PRINT LPAREN expr_list RPAREN .

    SEMICOLON       reduce using rule 10 (statement -> PRINT LPAREN expr_list RPAREN .)


state 58

    (15) expr_list -> expr_list expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    RPAREN          reduce using rule 15 (expr_list -> expr_list expr .)
    IDENTIFIER      reduce using rule 15 (expr_list -> expr_list expr .)
    INTCONST        reduce using rule 15 (expr_list -> expr_list expr .)
    FLOATCONST      reduce using rule 15 (expr_list -> expr_list expr .)
    STRINGCONST     reduce using rule 15 (expr_list -> expr_list expr .)
    TRUE            reduce using rule 15 (expr_list -> expr_list expr .)
    FALSE           reduce using rule 15 (expr_list -> expr_list expr .)
    LPAREN          reduce using rule 15 (expr_list -> expr_list expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 59

    (11) statement -> LET IDENTIFIER EQUALS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    SEMICOLON       reduce using rule 11 (statement -> LET IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 60

    (40) if_line -> IF cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    RBRACE          shift and go to state 79
    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    line_statement                 shift and go to state 14
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 61

    (38) cond_list -> cond_list AND expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    LBRACE          reduce using rule 38 (cond_list -> cond_list AND expr .)
    AND             reduce using rule 38 (cond_list -> cond_list AND expr .)
    OR              reduce using rule 38 (cond_list -> cond_list AND expr .)
    RPAREN          reduce using rule 38 (cond_list -> cond_list AND expr .)
    IDENTIFIER      reduce using rule 38 (cond_list -> cond_list AND expr .)
    INTCONST        reduce using rule 38 (cond_list -> cond_list AND expr .)
    FLOATCONST      reduce using rule 38 (cond_list -> cond_list AND expr .)
    STRINGCONST     reduce using rule 38 (cond_list -> cond_list AND expr .)
    TRUE            reduce using rule 38 (cond_list -> cond_list AND expr .)
    FALSE           reduce using rule 38 (cond_list -> cond_list AND expr .)
    LPAREN          reduce using rule 38 (cond_list -> cond_list AND expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 62

    (39) cond_list -> cond_list OR expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    LBRACE          reduce using rule 39 (cond_list -> cond_list OR expr .)
    AND             reduce using rule 39 (cond_list -> cond_list OR expr .)
    OR              reduce using rule 39 (cond_list -> cond_list OR expr .)
    RPAREN          reduce using rule 39 (cond_list -> cond_list OR expr .)
    IDENTIFIER      reduce using rule 39 (cond_list -> cond_list OR expr .)
    INTCONST        reduce using rule 39 (cond_list -> cond_list OR expr .)
    FLOATCONST      reduce using rule 39 (cond_list -> cond_list OR expr .)
    STRINGCONST     reduce using rule 39 (cond_list -> cond_list OR expr .)
    TRUE            reduce using rule 39 (cond_list -> cond_list OR expr .)
    FALSE           reduce using rule 39 (cond_list -> cond_list OR expr .)
    LPAREN          reduce using rule 39 (cond_list -> cond_list OR expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 63

    (16) expr -> expr PLUS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 16 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 16 (expr -> expr PLUS expr .)
    LE              reduce using rule 16 (expr -> expr PLUS expr .)
    GE              reduce using rule 16 (expr -> expr PLUS expr .)
    LT              reduce using rule 16 (expr -> expr PLUS expr .)
    GT              reduce using rule 16 (expr -> expr PLUS expr .)
    EQ              reduce using rule 16 (expr -> expr PLUS expr .)
    NE              reduce using rule 16 (expr -> expr PLUS expr .)
    PLUSPLUS        reduce using rule 16 (expr -> expr PLUS expr .)
    MINUSMINUS      reduce using rule 16 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 16 (expr -> expr PLUS expr .)
    AND             reduce using rule 16 (expr -> expr PLUS expr .)
    OR              reduce using rule 16 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 16 (expr -> expr PLUS expr .)
    IDENTIFIER      reduce using rule 16 (expr -> expr PLUS expr .)
    INTCONST        reduce using rule 16 (expr -> expr PLUS expr .)
    FLOATCONST      reduce using rule 16 (expr -> expr PLUS expr .)
    STRINGCONST     reduce using rule 16 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 16 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 16 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 16 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 16 (expr -> expr PLUS expr .)
    ELLIPSIS        reduce using rule 16 (expr -> expr PLUS expr .)
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45

  ! MUL             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! LE              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! NE              [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 64

    (17) expr -> expr MINUS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 17 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 17 (expr -> expr MINUS expr .)
    LE              reduce using rule 17 (expr -> expr MINUS expr .)
    GE              reduce using rule 17 (expr -> expr MINUS expr .)
    LT              reduce using rule 17 (expr -> expr MINUS expr .)
    GT              reduce using rule 17 (expr -> expr MINUS expr .)
    EQ              reduce using rule 17 (expr -> expr MINUS expr .)
    NE              reduce using rule 17 (expr -> expr MINUS expr .)
    PLUSPLUS        reduce using rule 17 (expr -> expr MINUS expr .)
    MINUSMINUS      reduce using rule 17 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 17 (expr -> expr MINUS expr .)
    AND             reduce using rule 17 (expr -> expr MINUS expr .)
    OR              reduce using rule 17 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 17 (expr -> expr MINUS expr .)
    IDENTIFIER      reduce using rule 17 (expr -> expr MINUS expr .)
    INTCONST        reduce using rule 17 (expr -> expr MINUS expr .)
    FLOATCONST      reduce using rule 17 (expr -> expr MINUS expr .)
    STRINGCONST     reduce using rule 17 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 17 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 17 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 17 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 17 (expr -> expr MINUS expr .)
    ELLIPSIS        reduce using rule 17 (expr -> expr MINUS expr .)
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45

  ! MUL             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! LE              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! NE              [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 65

    (18) expr -> expr MUL expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 18 (expr -> expr MUL expr .)
    MINUS           reduce using rule 18 (expr -> expr MUL expr .)
    MUL             reduce using rule 18 (expr -> expr MUL expr .)
    DIV             reduce using rule 18 (expr -> expr MUL expr .)
    MOD             reduce using rule 18 (expr -> expr MUL expr .)
    LE              reduce using rule 18 (expr -> expr MUL expr .)
    GE              reduce using rule 18 (expr -> expr MUL expr .)
    LT              reduce using rule 18 (expr -> expr MUL expr .)
    GT              reduce using rule 18 (expr -> expr MUL expr .)
    EQ              reduce using rule 18 (expr -> expr MUL expr .)
    NE              reduce using rule 18 (expr -> expr MUL expr .)
    PLUSPLUS        reduce using rule 18 (expr -> expr MUL expr .)
    MINUSMINUS      reduce using rule 18 (expr -> expr MUL expr .)
    LBRACE          reduce using rule 18 (expr -> expr MUL expr .)
    AND             reduce using rule 18 (expr -> expr MUL expr .)
    OR              reduce using rule 18 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 18 (expr -> expr MUL expr .)
    IDENTIFIER      reduce using rule 18 (expr -> expr MUL expr .)
    INTCONST        reduce using rule 18 (expr -> expr MUL expr .)
    FLOATCONST      reduce using rule 18 (expr -> expr MUL expr .)
    STRINGCONST     reduce using rule 18 (expr -> expr MUL expr .)
    TRUE            reduce using rule 18 (expr -> expr MUL expr .)
    FALSE           reduce using rule 18 (expr -> expr MUL expr .)
    LPAREN          reduce using rule 18 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 18 (expr -> expr MUL expr .)
    ELLIPSIS        reduce using rule 18 (expr -> expr MUL expr .)
    POW             shift and go to state 45

  ! POW             [ reduce using rule 18 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! MUL             [ shift and go to state 42 ]
  ! DIV             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! LE              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! NE              [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 66

    (19) expr -> expr DIV expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 19 (expr -> expr DIV expr .)
    MINUS           reduce using rule 19 (expr -> expr DIV expr .)
    MUL             reduce using rule 19 (expr -> expr DIV expr .)
    DIV             reduce using rule 19 (expr -> expr DIV expr .)
    MOD             reduce using rule 19 (expr -> expr DIV expr .)
    LE              reduce using rule 19 (expr -> expr DIV expr .)
    GE              reduce using rule 19 (expr -> expr DIV expr .)
    LT              reduce using rule 19 (expr -> expr DIV expr .)
    GT              reduce using rule 19 (expr -> expr DIV expr .)
    EQ              reduce using rule 19 (expr -> expr DIV expr .)
    NE              reduce using rule 19 (expr -> expr DIV expr .)
    PLUSPLUS        reduce using rule 19 (expr -> expr DIV expr .)
    MINUSMINUS      reduce using rule 19 (expr -> expr DIV expr .)
    LBRACE          reduce using rule 19 (expr -> expr DIV expr .)
    AND             reduce using rule 19 (expr -> expr DIV expr .)
    OR              reduce using rule 19 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 19 (expr -> expr DIV expr .)
    IDENTIFIER      reduce using rule 19 (expr -> expr DIV expr .)
    INTCONST        reduce using rule 19 (expr -> expr DIV expr .)
    FLOATCONST      reduce using rule 19 (expr -> expr DIV expr .)
    STRINGCONST     reduce using rule 19 (expr -> expr DIV expr .)
    TRUE            reduce using rule 19 (expr -> expr DIV expr .)
    FALSE           reduce using rule 19 (expr -> expr DIV expr .)
    LPAREN          reduce using rule 19 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 19 (expr -> expr DIV expr .)
    ELLIPSIS        reduce using rule 19 (expr -> expr DIV expr .)
    POW             shift and go to state 45

  ! POW             [ reduce using rule 19 (expr -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! MUL             [ shift and go to state 42 ]
  ! DIV             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! LE              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! NE              [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 67

    (20) expr -> expr MOD expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 20 (expr -> expr MOD expr .)
    MINUS           reduce using rule 20 (expr -> expr MOD expr .)
    MUL             reduce using rule 20 (expr -> expr MOD expr .)
    DIV             reduce using rule 20 (expr -> expr MOD expr .)
    MOD             reduce using rule 20 (expr -> expr MOD expr .)
    LE              reduce using rule 20 (expr -> expr MOD expr .)
    GE              reduce using rule 20 (expr -> expr MOD expr .)
    LT              reduce using rule 20 (expr -> expr MOD expr .)
    GT              reduce using rule 20 (expr -> expr MOD expr .)
    EQ              reduce using rule 20 (expr -> expr MOD expr .)
    NE              reduce using rule 20 (expr -> expr MOD expr .)
    PLUSPLUS        reduce using rule 20 (expr -> expr MOD expr .)
    MINUSMINUS      reduce using rule 20 (expr -> expr MOD expr .)
    LBRACE          reduce using rule 20 (expr -> expr MOD expr .)
    AND             reduce using rule 20 (expr -> expr MOD expr .)
    OR              reduce using rule 20 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 20 (expr -> expr MOD expr .)
    IDENTIFIER      reduce using rule 20 (expr -> expr MOD expr .)
    INTCONST        reduce using rule 20 (expr -> expr MOD expr .)
    FLOATCONST      reduce using rule 20 (expr -> expr MOD expr .)
    STRINGCONST     reduce using rule 20 (expr -> expr MOD expr .)
    TRUE            reduce using rule 20 (expr -> expr MOD expr .)
    FALSE           reduce using rule 20 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 20 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 20 (expr -> expr MOD expr .)
    ELLIPSIS        reduce using rule 20 (expr -> expr MOD expr .)
    POW             shift and go to state 45

  ! POW             [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! MUL             [ shift and go to state 42 ]
  ! DIV             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! LE              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! NE              [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 68

    (21) expr -> expr POW expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 21 (expr -> expr POW expr .)
    MINUS           reduce using rule 21 (expr -> expr POW expr .)
    MUL             reduce using rule 21 (expr -> expr POW expr .)
    DIV             reduce using rule 21 (expr -> expr POW expr .)
    MOD             reduce using rule 21 (expr -> expr POW expr .)
    LE              reduce using rule 21 (expr -> expr POW expr .)
    GE              reduce using rule 21 (expr -> expr POW expr .)
    LT              reduce using rule 21 (expr -> expr POW expr .)
    GT              reduce using rule 21 (expr -> expr POW expr .)
    EQ              reduce using rule 21 (expr -> expr POW expr .)
    NE              reduce using rule 21 (expr -> expr POW expr .)
    PLUSPLUS        reduce using rule 21 (expr -> expr POW expr .)
    MINUSMINUS      reduce using rule 21 (expr -> expr POW expr .)
    LBRACE          reduce using rule 21 (expr -> expr POW expr .)
    AND             reduce using rule 21 (expr -> expr POW expr .)
    OR              reduce using rule 21 (expr -> expr POW expr .)
    RPAREN          reduce using rule 21 (expr -> expr POW expr .)
    IDENTIFIER      reduce using rule 21 (expr -> expr POW expr .)
    INTCONST        reduce using rule 21 (expr -> expr POW expr .)
    FLOATCONST      reduce using rule 21 (expr -> expr POW expr .)
    STRINGCONST     reduce using rule 21 (expr -> expr POW expr .)
    TRUE            reduce using rule 21 (expr -> expr POW expr .)
    FALSE           reduce using rule 21 (expr -> expr POW expr .)
    LPAREN          reduce using rule 21 (expr -> expr POW expr .)
    SEMICOLON       reduce using rule 21 (expr -> expr POW expr .)
    ELLIPSIS        reduce using rule 21 (expr -> expr POW expr .)
    POW             shift and go to state 45

  ! POW             [ reduce using rule 21 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! MUL             [ shift and go to state 42 ]
  ! DIV             [ shift and go to state 43 ]
  ! MOD             [ shift and go to state 44 ]
  ! LE              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]
  ! NE              [ shift and go to state 51 ]
  ! PLUSPLUS        [ shift and go to state 52 ]
  ! MINUSMINUS      [ shift and go to state 53 ]


state 69

    (22) expr -> expr LE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    LBRACE          reduce using rule 22 (expr -> expr LE expr .)
    AND             reduce using rule 22 (expr -> expr LE expr .)
    OR              reduce using rule 22 (expr -> expr LE expr .)
    RPAREN          reduce using rule 22 (expr -> expr LE expr .)
    IDENTIFIER      reduce using rule 22 (expr -> expr LE expr .)
    INTCONST        reduce using rule 22 (expr -> expr LE expr .)
    FLOATCONST      reduce using rule 22 (expr -> expr LE expr .)
    STRINGCONST     reduce using rule 22 (expr -> expr LE expr .)
    TRUE            reduce using rule 22 (expr -> expr LE expr .)
    FALSE           reduce using rule 22 (expr -> expr LE expr .)
    LPAREN          reduce using rule 22 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr LE expr .)
    ELLIPSIS        reduce using rule 22 (expr -> expr LE expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! PLUS            [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! PLUSPLUS        [ reduce using rule 22 (expr -> expr LE expr .) ]
  ! MINUSMINUS      [ reduce using rule 22 (expr -> expr LE expr .) ]


state 70

    (23) expr -> expr GE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    LBRACE          reduce using rule 23 (expr -> expr GE expr .)
    AND             reduce using rule 23 (expr -> expr GE expr .)
    OR              reduce using rule 23 (expr -> expr GE expr .)
    RPAREN          reduce using rule 23 (expr -> expr GE expr .)
    IDENTIFIER      reduce using rule 23 (expr -> expr GE expr .)
    INTCONST        reduce using rule 23 (expr -> expr GE expr .)
    FLOATCONST      reduce using rule 23 (expr -> expr GE expr .)
    STRINGCONST     reduce using rule 23 (expr -> expr GE expr .)
    TRUE            reduce using rule 23 (expr -> expr GE expr .)
    FALSE           reduce using rule 23 (expr -> expr GE expr .)
    LPAREN          reduce using rule 23 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr GE expr .)
    ELLIPSIS        reduce using rule 23 (expr -> expr GE expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! PLUS            [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! PLUSPLUS        [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MINUSMINUS      [ reduce using rule 23 (expr -> expr GE expr .) ]


state 71

    (24) expr -> expr LT expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    LBRACE          reduce using rule 24 (expr -> expr LT expr .)
    AND             reduce using rule 24 (expr -> expr LT expr .)
    OR              reduce using rule 24 (expr -> expr LT expr .)
    RPAREN          reduce using rule 24 (expr -> expr LT expr .)
    IDENTIFIER      reduce using rule 24 (expr -> expr LT expr .)
    INTCONST        reduce using rule 24 (expr -> expr LT expr .)
    FLOATCONST      reduce using rule 24 (expr -> expr LT expr .)
    STRINGCONST     reduce using rule 24 (expr -> expr LT expr .)
    TRUE            reduce using rule 24 (expr -> expr LT expr .)
    FALSE           reduce using rule 24 (expr -> expr LT expr .)
    LPAREN          reduce using rule 24 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr LT expr .)
    ELLIPSIS        reduce using rule 24 (expr -> expr LT expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! PLUS            [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! PLUSPLUS        [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! MINUSMINUS      [ reduce using rule 24 (expr -> expr LT expr .) ]


state 72

    (25) expr -> expr GT expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    LBRACE          reduce using rule 25 (expr -> expr GT expr .)
    AND             reduce using rule 25 (expr -> expr GT expr .)
    OR              reduce using rule 25 (expr -> expr GT expr .)
    RPAREN          reduce using rule 25 (expr -> expr GT expr .)
    IDENTIFIER      reduce using rule 25 (expr -> expr GT expr .)
    INTCONST        reduce using rule 25 (expr -> expr GT expr .)
    FLOATCONST      reduce using rule 25 (expr -> expr GT expr .)
    STRINGCONST     reduce using rule 25 (expr -> expr GT expr .)
    TRUE            reduce using rule 25 (expr -> expr GT expr .)
    FALSE           reduce using rule 25 (expr -> expr GT expr .)
    LPAREN          reduce using rule 25 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr GT expr .)
    ELLIPSIS        reduce using rule 25 (expr -> expr GT expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! PLUS            [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! PLUSPLUS        [ reduce using rule 25 (expr -> expr GT expr .) ]
  ! MINUSMINUS      [ reduce using rule 25 (expr -> expr GT expr .) ]


state 73

    (26) expr -> expr EQ expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    LBRACE          reduce using rule 26 (expr -> expr EQ expr .)
    AND             reduce using rule 26 (expr -> expr EQ expr .)
    OR              reduce using rule 26 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 26 (expr -> expr EQ expr .)
    IDENTIFIER      reduce using rule 26 (expr -> expr EQ expr .)
    INTCONST        reduce using rule 26 (expr -> expr EQ expr .)
    FLOATCONST      reduce using rule 26 (expr -> expr EQ expr .)
    STRINGCONST     reduce using rule 26 (expr -> expr EQ expr .)
    TRUE            reduce using rule 26 (expr -> expr EQ expr .)
    FALSE           reduce using rule 26 (expr -> expr EQ expr .)
    LPAREN          reduce using rule 26 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr EQ expr .)
    ELLIPSIS        reduce using rule 26 (expr -> expr EQ expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! PLUS            [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 26 (expr -> expr EQ expr .) ]


state 74

    (27) expr -> expr NE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    LBRACE          reduce using rule 27 (expr -> expr NE expr .)
    AND             reduce using rule 27 (expr -> expr NE expr .)
    OR              reduce using rule 27 (expr -> expr NE expr .)
    RPAREN          reduce using rule 27 (expr -> expr NE expr .)
    IDENTIFIER      reduce using rule 27 (expr -> expr NE expr .)
    INTCONST        reduce using rule 27 (expr -> expr NE expr .)
    FLOATCONST      reduce using rule 27 (expr -> expr NE expr .)
    STRINGCONST     reduce using rule 27 (expr -> expr NE expr .)
    TRUE            reduce using rule 27 (expr -> expr NE expr .)
    FALSE           reduce using rule 27 (expr -> expr NE expr .)
    LPAREN          reduce using rule 27 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr NE expr .)
    ELLIPSIS        reduce using rule 27 (expr -> expr NE expr .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53

  ! PLUS            [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! PLUSPLUS        [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! MINUSMINUS      [ reduce using rule 27 (expr -> expr NE expr .) ]


state 75

    (36) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    PLUSPLUS        reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    MINUSMINUS      reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    IDENTIFIER      reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    INTCONST        reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    FLOATCONST      reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    STRINGCONST     reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 36 (expr -> LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 36 (expr -> LPAREN expr RPAREN .)


state 76

    (42) for_line -> FOR IDENTIFIER WALRUS range . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 80


state 77

    (43) range -> LPAREN . expr ELLIPSIS expr RPAREN
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 81

state 78

    (41) else_line -> ELSE LBRACE basic_block RBRACE .

    PRINT           reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)
    LET             reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IF              reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FOR             reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)
    $end            reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 41 (else_line -> ELSE LBRACE basic_block RBRACE .)


state 79

    (40) if_line -> IF cond_list LBRACE basic_block RBRACE .

    ELSE            reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    PRINT           reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 40 (if_line -> IF cond_list LBRACE basic_block RBRACE .)


state 80

    (42) for_line -> FOR IDENTIFIER WALRUS range LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    basic_block                    shift and go to state 82
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 81

    (43) range -> LPAREN expr . ELLIPSIS expr RPAREN
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    ELLIPSIS        shift and go to state 83
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 82

    (42) for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) statement -> . PRINT LPAREN expr_list RPAREN
    (11) statement -> . LET IDENTIFIER EQUALS expr
    (12) statement -> . IDENTIFIER EQUALS expr
    (40) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (42) for_line -> . FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE

    RBRACE          shift and go to state 84
    PRINT           shift and go to state 9
    LET             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    FOR             shift and go to state 13

    line_statement                 shift and go to state 14
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8

state 83

    (43) range -> LPAREN expr ELLIPSIS . expr RPAREN
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr POW expr
    (22) expr -> . expr LE expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr PLUSPLUS
    (29) expr -> . expr MINUSMINUS
    (30) expr -> . IDENTIFIER
    (31) expr -> . INTCONST
    (32) expr -> . FLOATCONST
    (33) expr -> . STRINGCONST
    (34) expr -> . TRUE
    (35) expr -> . FALSE
    (36) expr -> . LPAREN expr RPAREN

    IDENTIFIER      shift and go to state 23
    INTCONST        shift and go to state 24
    FLOATCONST      shift and go to state 25
    STRINGCONST     shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    LPAREN          shift and go to state 29

    expr                           shift and go to state 85

state 84

    (42) for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .

    PRINT           reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)
    LET             reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)
    IF              reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)
    FOR             reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)
    $end            reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 42 (for_line -> FOR IDENTIFIER WALRUS range LBRACE basic_block RBRACE .)


state 85

    (43) range -> LPAREN expr ELLIPSIS expr . RPAREN
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . POW expr
    (22) expr -> expr . LE expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . PLUSPLUS
    (29) expr -> expr . MINUSMINUS

    RPAREN          shift and go to state 86
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    MUL             shift and go to state 42
    DIV             shift and go to state 43
    MOD             shift and go to state 44
    POW             shift and go to state 45
    LE              shift and go to state 46
    GE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    EQ              shift and go to state 50
    NE              shift and go to state 51
    PLUSPLUS        shift and go to state 52
    MINUSMINUS      shift and go to state 53


state 86

    (43) range -> LPAREN expr ELLIPSIS expr RPAREN .

    LBRACE          reduce using rule 43 (range -> LPAREN expr ELLIPSIS expr RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for LET in state 4 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MUL in state 69 resolved as shift
WARNING: shift/reduce conflict for DIV in state 69 resolved as shift
WARNING: shift/reduce conflict for MOD in state 69 resolved as shift
WARNING: shift/reduce conflict for POW in state 69 resolved as shift
WARNING: shift/reduce conflict for LE in state 69 resolved as shift
WARNING: shift/reduce conflict for GE in state 69 resolved as shift
WARNING: shift/reduce conflict for LT in state 69 resolved as shift
WARNING: shift/reduce conflict for GT in state 69 resolved as shift
WARNING: shift/reduce conflict for EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for NE in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MUL in state 70 resolved as shift
WARNING: shift/reduce conflict for DIV in state 70 resolved as shift
WARNING: shift/reduce conflict for MOD in state 70 resolved as shift
WARNING: shift/reduce conflict for POW in state 70 resolved as shift
WARNING: shift/reduce conflict for LE in state 70 resolved as shift
WARNING: shift/reduce conflict for GE in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for NE in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MUL in state 71 resolved as shift
WARNING: shift/reduce conflict for DIV in state 71 resolved as shift
WARNING: shift/reduce conflict for MOD in state 71 resolved as shift
WARNING: shift/reduce conflict for POW in state 71 resolved as shift
WARNING: shift/reduce conflict for LE in state 71 resolved as shift
WARNING: shift/reduce conflict for GE in state 71 resolved as shift
WARNING: shift/reduce conflict for LT in state 71 resolved as shift
WARNING: shift/reduce conflict for GT in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for NE in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for MOD in state 72 resolved as shift
WARNING: shift/reduce conflict for POW in state 72 resolved as shift
WARNING: shift/reduce conflict for LE in state 72 resolved as shift
WARNING: shift/reduce conflict for GE in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for NE in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MUL in state 73 resolved as shift
WARNING: shift/reduce conflict for DIV in state 73 resolved as shift
WARNING: shift/reduce conflict for MOD in state 73 resolved as shift
WARNING: shift/reduce conflict for POW in state 73 resolved as shift
WARNING: shift/reduce conflict for LE in state 73 resolved as shift
WARNING: shift/reduce conflict for GE in state 73 resolved as shift
WARNING: shift/reduce conflict for LT in state 73 resolved as shift
WARNING: shift/reduce conflict for GT in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for NE in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MUL in state 74 resolved as shift
WARNING: shift/reduce conflict for DIV in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
WARNING: shift/reduce conflict for POW in state 74 resolved as shift
WARNING: shift/reduce conflict for LE in state 74 resolved as shift
WARNING: shift/reduce conflict for GE in state 74 resolved as shift
WARNING: shift/reduce conflict for LT in state 74 resolved as shift
WARNING: shift/reduce conflict for GT in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for NE in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 74 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 33
