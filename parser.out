Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CONTINUE
    DEFAULT
    FLOAT
    FROM
    INT
    INTEGRATE
    NOT
    PERIOD
    STRING
    SWITCH
    TO
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> commands
Rule 2     commands -> commands basic_block
Rule 3     commands -> empty
Rule 4     basic_block -> line_statement
Rule 5     basic_block -> basic_block line_statement
Rule 6     line_statement -> statement SEMICOLON
Rule 7     line_statement -> if_line
Rule 8     line_statement -> if_line else_line
Rule 9     line_statement -> for_line
Rule 10    line_statement -> while_line
Rule 11    line_statement -> func_line
Rule 12    statement -> PRINT LPAREN expr_list RPAREN
Rule 13    statement -> LET IDENTIFIER EQUALS expr
Rule 14    statement -> LET IDENTIFIER
Rule 15    statement -> IDENTIFIER EQUALS expr
Rule 16    statement -> IDENTIFIER PLUSEQUALS expr
Rule 17    statement -> IDENTIFIER MINUSEQUALS expr
Rule 18    statement -> IDENTIFIER MULEQUALS expr
Rule 19    statement -> IDENTIFIER DIVEQUALS expr
Rule 20    statement -> IDENTIFIER MODEQUALS expr
Rule 21    statement -> IDENTIFIER POWEQUALS expr
Rule 22    statement -> incr_decr
Rule 23    statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
Rule 24    statement -> func_call
Rule 25    statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
Rule 26    statement -> RETURN expr_list
Rule 27    expr_list -> expr
Rule 28    expr_list -> cond_list
Rule 29    expr_list -> expr_list COMMA expr
Rule 30    expr_list -> empty
Rule 31    expr -> LET IDENTIFIER
Rule 32    expr -> expr PLUS expr
Rule 33    expr -> expr MINUS expr
Rule 34    expr -> expr MUL expr
Rule 35    expr -> expr DIV expr
Rule 36    expr -> expr MOD expr
Rule 37    expr -> expr POW expr
Rule 38    expr -> expr LE expr
Rule 39    expr -> expr GE expr
Rule 40    expr -> expr LT expr
Rule 41    expr -> expr GT expr
Rule 42    expr -> expr EQ expr
Rule 43    expr -> expr NE expr
Rule 44    expr -> MINUS expr
Rule 45    incr_decr -> IDENTIFIER PLUSPLUS
Rule 46    incr_decr -> IDENTIFIER MINUSMINUS
Rule 47    expr -> IDENTIFIER
Rule 48    expr -> INTCONST
Rule 49    expr -> FLOATCONST
Rule 50    expr -> STRINGCONST
Rule 51    expr -> LBRACKET expr_list RBRACKET
Rule 52    expr -> LBRACKET range RBRACKET
Rule 53    expr -> IDENTIFIER LBRACKET expr_list RBRACKET
Rule 54    expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET
Rule 55    expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
Rule 56    expr -> TRUE
Rule 57    expr -> FALSE
Rule 58    expr -> LPAREN expr RPAREN
Rule 59    expr -> incr_decr
Rule 60    expr -> func_call
Rule 61    expr -> LEN LPAREN expr RPAREN
Rule 62    cond_list -> expr
Rule 63    cond_list -> cond_list AND expr
Rule 64    cond_list -> cond_list OR expr
Rule 65    if_line -> IF cond_list LBRACE basic_block RBRACE
Rule 66    else_line -> ELSE LBRACE basic_block RBRACE
Rule 67    for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
Rule 68    for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
Rule 69    while_line -> FOR cond_list LBRACE basic_block RBRACE
Rule 70    range -> expr ELLIPSIS expr
Rule 71    range -> expr ELLIPSIS expr COMMA expr
Rule 72    func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
Rule 73    func_call -> IDENTIFIER LPAREN expr_list RPAREN
Rule 74    empty -> <empty>

Terminals, with rules where they appear

AND                  : 63
BREAK                : 
CASE                 : 
COLON                : 54 55 55
COMMA                : 29 71
CONTINUE             : 
DEFAULT              : 
DIV                  : 35
DIVEQUALS            : 19
ELLIPSIS             : 70 71
ELSE                 : 66
EQ                   : 42
EQUALS               : 13 15 23 25
FALSE                : 57
FLOAT                : 
FLOATCONST           : 49
FOR                  : 67 68 69
FROM                 : 
FUNC                 : 72
GE                   : 39
GT                   : 41
IDENTIFIER           : 13 14 15 16 17 18 19 20 21 23 25 31 45 46 47 53 54 55 67 68 72 73
IF                   : 65
INT                  : 
INTCONST             : 48
INTEGRATE            : 
LBRACE               : 65 66 67 68 69 72
LBRACKET             : 23 51 52 53 54 55
LE                   : 38
LEN                  : 61
LET                  : 13 14 31
LPAREN               : 12 25 58 61 72 73
LT                   : 40
MINUS                : 33 44
MINUSEQUALS          : 17
MINUSMINUS           : 46
MOD                  : 36
MODEQUALS            : 20
MUL                  : 34
MULEQUALS            : 18
NE                   : 43
NOT                  : 
OR                   : 64
PERIOD               : 
PLUS                 : 32
PLUSEQUALS           : 16
PLUSPLUS             : 45
POW                  : 37
POWEQUALS            : 21
PRINT                : 12
RANGE                : 67 68
RBRACE               : 65 66 67 68 69 72
RBRACKET             : 23 51 52 53 54 55
RETURN               : 26
RPAREN               : 12 25 58 61 72 73
SEMICOLON            : 6
STRING               : 
STRINGCONST          : 50
SWITCH               : 
TO                   : 
TRUE                 : 56
TYPE                 : 
WALRUS               : 67 68
error                : 

Nonterminals, with rules where they appear

basic_block          : 2 5 65 66 67 68 69 72
commands             : 1 2
cond_list            : 28 63 64 65 69
else_line            : 8
empty                : 3 30
expr                 : 13 15 16 17 18 19 20 21 23 25 27 29 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 54 54 55 55 55 58 61 62 63 64 68 70 70 71 71 71
expr_list            : 12 23 25 26 29 51 53 72 73
for_line             : 9
func_call            : 24 60
func_line            : 11
if_line              : 7 8
incr_decr            : 22 59
line_statement       : 4 5
program              : 0
range                : 52 67
statement            : 6
while_line           : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commands
    (2) commands -> . commands basic_block
    (3) commands -> . empty
    (74) empty -> .

    PRINT           reduce using rule 74 (empty -> .)
    LET             reduce using rule 74 (empty -> .)
    IDENTIFIER      reduce using rule 74 (empty -> .)
    RETURN          reduce using rule 74 (empty -> .)
    IF              reduce using rule 74 (empty -> .)
    FOR             reduce using rule 74 (empty -> .)
    FUNC            reduce using rule 74 (empty -> .)
    $end            reduce using rule 74 (empty -> .)

    program                        shift and go to state 1
    commands                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> commands .
    (2) commands -> commands . basic_block
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    $end            reduce using rule 1 (program -> commands .)
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 4
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 3

    (3) commands -> empty .

    PRINT           reduce using rule 3 (commands -> empty .)
    LET             reduce using rule 3 (commands -> empty .)
    IDENTIFIER      reduce using rule 3 (commands -> empty .)
    RETURN          reduce using rule 3 (commands -> empty .)
    IF              reduce using rule 3 (commands -> empty .)
    FOR             reduce using rule 3 (commands -> empty .)
    FUNC            reduce using rule 3 (commands -> empty .)
    $end            reduce using rule 3 (commands -> empty .)


state 4

    (2) commands -> commands basic_block .
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    $end            reduce using rule 2 (commands -> commands basic_block .)
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

  ! PRINT           [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! LET             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IDENTIFIER      [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! RETURN          [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IF              [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FOR             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FUNC            [ reduce using rule 2 (commands -> commands basic_block .) ]

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 5

    (4) basic_block -> line_statement .

    PRINT           reduce using rule 4 (basic_block -> line_statement .)
    LET             reduce using rule 4 (basic_block -> line_statement .)
    IDENTIFIER      reduce using rule 4 (basic_block -> line_statement .)
    RETURN          reduce using rule 4 (basic_block -> line_statement .)
    IF              reduce using rule 4 (basic_block -> line_statement .)
    FOR             reduce using rule 4 (basic_block -> line_statement .)
    FUNC            reduce using rule 4 (basic_block -> line_statement .)
    $end            reduce using rule 4 (basic_block -> line_statement .)
    RBRACE          reduce using rule 4 (basic_block -> line_statement .)


state 6

    (6) line_statement -> statement . SEMICOLON

    SEMICOLON       shift and go to state 21


state 7

    (7) line_statement -> if_line .
    (8) line_statement -> if_line . else_line
    (66) else_line -> . ELSE LBRACE basic_block RBRACE

    PRINT           reduce using rule 7 (line_statement -> if_line .)
    LET             reduce using rule 7 (line_statement -> if_line .)
    IDENTIFIER      reduce using rule 7 (line_statement -> if_line .)
    RETURN          reduce using rule 7 (line_statement -> if_line .)
    IF              reduce using rule 7 (line_statement -> if_line .)
    FOR             reduce using rule 7 (line_statement -> if_line .)
    FUNC            reduce using rule 7 (line_statement -> if_line .)
    $end            reduce using rule 7 (line_statement -> if_line .)
    RBRACE          reduce using rule 7 (line_statement -> if_line .)
    ELSE            shift and go to state 23

    else_line                      shift and go to state 22

state 8

    (9) line_statement -> for_line .

    PRINT           reduce using rule 9 (line_statement -> for_line .)
    LET             reduce using rule 9 (line_statement -> for_line .)
    IDENTIFIER      reduce using rule 9 (line_statement -> for_line .)
    RETURN          reduce using rule 9 (line_statement -> for_line .)
    IF              reduce using rule 9 (line_statement -> for_line .)
    FOR             reduce using rule 9 (line_statement -> for_line .)
    FUNC            reduce using rule 9 (line_statement -> for_line .)
    $end            reduce using rule 9 (line_statement -> for_line .)
    RBRACE          reduce using rule 9 (line_statement -> for_line .)


state 9

    (10) line_statement -> while_line .

    PRINT           reduce using rule 10 (line_statement -> while_line .)
    LET             reduce using rule 10 (line_statement -> while_line .)
    IDENTIFIER      reduce using rule 10 (line_statement -> while_line .)
    RETURN          reduce using rule 10 (line_statement -> while_line .)
    IF              reduce using rule 10 (line_statement -> while_line .)
    FOR             reduce using rule 10 (line_statement -> while_line .)
    FUNC            reduce using rule 10 (line_statement -> while_line .)
    $end            reduce using rule 10 (line_statement -> while_line .)
    RBRACE          reduce using rule 10 (line_statement -> while_line .)


state 10

    (11) line_statement -> func_line .

    PRINT           reduce using rule 11 (line_statement -> func_line .)
    LET             reduce using rule 11 (line_statement -> func_line .)
    IDENTIFIER      reduce using rule 11 (line_statement -> func_line .)
    RETURN          reduce using rule 11 (line_statement -> func_line .)
    IF              reduce using rule 11 (line_statement -> func_line .)
    FOR             reduce using rule 11 (line_statement -> func_line .)
    FUNC            reduce using rule 11 (line_statement -> func_line .)
    $end            reduce using rule 11 (line_statement -> func_line .)
    RBRACE          reduce using rule 11 (line_statement -> func_line .)


state 11

    (12) statement -> PRINT . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 24


state 12

    (13) statement -> LET . IDENTIFIER EQUALS expr
    (14) statement -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 25


state 13

    (15) statement -> IDENTIFIER . EQUALS expr
    (16) statement -> IDENTIFIER . PLUSEQUALS expr
    (17) statement -> IDENTIFIER . MINUSEQUALS expr
    (18) statement -> IDENTIFIER . MULEQUALS expr
    (19) statement -> IDENTIFIER . DIVEQUALS expr
    (20) statement -> IDENTIFIER . MODEQUALS expr
    (21) statement -> IDENTIFIER . POWEQUALS expr
    (23) statement -> IDENTIFIER . LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> IDENTIFIER . LPAREN expr_list RPAREN EQUALS expr
    (45) incr_decr -> IDENTIFIER . PLUSPLUS
    (46) incr_decr -> IDENTIFIER . MINUSMINUS
    (73) func_call -> IDENTIFIER . LPAREN expr_list RPAREN

    EQUALS          shift and go to state 26
    PLUSEQUALS      shift and go to state 27
    MINUSEQUALS     shift and go to state 28
    MULEQUALS       shift and go to state 29
    DIVEQUALS       shift and go to state 30
    MODEQUALS       shift and go to state 31
    POWEQUALS       shift and go to state 32
    LBRACKET        shift and go to state 33
    LPAREN          shift and go to state 34
    PLUSPLUS        shift and go to state 35
    MINUSMINUS      shift and go to state 36


state 14

    (22) statement -> incr_decr .

    SEMICOLON       reduce using rule 22 (statement -> incr_decr .)


state 15

    (24) statement -> func_call .

    SEMICOLON       reduce using rule 24 (statement -> func_call .)


state 16

    (26) statement -> RETURN . expr_list
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    COMMA           reduce using rule 74 (empty -> .)
    SEMICOLON       reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 37
    expr                           shift and go to state 38
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 17

    (65) if_line -> IF . cond_list LBRACE basic_block RBRACE
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    cond_list                      shift and go to state 54
    expr                           shift and go to state 55
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 18

    (67) for_line -> FOR . IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> FOR . IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> FOR . cond_list LBRACE basic_block RBRACE
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    IDENTIFIER      shift and go to state 56
    LET             shift and go to state 41
    MINUS           shift and go to state 43
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 55
    cond_list                      shift and go to state 57
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 19

    (72) func_line -> FUNC . IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE

    IDENTIFIER      shift and go to state 58


state 20

    (5) basic_block -> basic_block line_statement .

    PRINT           reduce using rule 5 (basic_block -> basic_block line_statement .)
    LET             reduce using rule 5 (basic_block -> basic_block line_statement .)
    IDENTIFIER      reduce using rule 5 (basic_block -> basic_block line_statement .)
    RETURN          reduce using rule 5 (basic_block -> basic_block line_statement .)
    IF              reduce using rule 5 (basic_block -> basic_block line_statement .)
    FOR             reduce using rule 5 (basic_block -> basic_block line_statement .)
    FUNC            reduce using rule 5 (basic_block -> basic_block line_statement .)
    $end            reduce using rule 5 (basic_block -> basic_block line_statement .)
    RBRACE          reduce using rule 5 (basic_block -> basic_block line_statement .)


state 21

    (6) line_statement -> statement SEMICOLON .

    PRINT           reduce using rule 6 (line_statement -> statement SEMICOLON .)
    LET             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (line_statement -> statement SEMICOLON .)
    RETURN          reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IF              reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FOR             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FUNC            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    $end            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    RBRACE          reduce using rule 6 (line_statement -> statement SEMICOLON .)


state 22

    (8) line_statement -> if_line else_line .

    PRINT           reduce using rule 8 (line_statement -> if_line else_line .)
    LET             reduce using rule 8 (line_statement -> if_line else_line .)
    IDENTIFIER      reduce using rule 8 (line_statement -> if_line else_line .)
    RETURN          reduce using rule 8 (line_statement -> if_line else_line .)
    IF              reduce using rule 8 (line_statement -> if_line else_line .)
    FOR             reduce using rule 8 (line_statement -> if_line else_line .)
    FUNC            reduce using rule 8 (line_statement -> if_line else_line .)
    $end            reduce using rule 8 (line_statement -> if_line else_line .)
    RBRACE          reduce using rule 8 (line_statement -> if_line else_line .)


state 23

    (66) else_line -> ELSE . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 59


state 24

    (12) statement -> PRINT LPAREN . expr_list RPAREN
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RPAREN          reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 60
    expr                           shift and go to state 38
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 25

    (13) statement -> LET IDENTIFIER . EQUALS expr
    (14) statement -> LET IDENTIFIER .

    EQUALS          shift and go to state 61
    SEMICOLON       reduce using rule 14 (statement -> LET IDENTIFIER .)


state 26

    (15) statement -> IDENTIFIER EQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 62
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 27

    (16) statement -> IDENTIFIER PLUSEQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 63
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 28

    (17) statement -> IDENTIFIER MINUSEQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 64
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 29

    (18) statement -> IDENTIFIER MULEQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 65
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 30

    (19) statement -> IDENTIFIER DIVEQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 66
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 31

    (20) statement -> IDENTIFIER MODEQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 67
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 32

    (21) statement -> IDENTIFIER POWEQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 68
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 33

    (23) statement -> IDENTIFIER LBRACKET . expr_list RBRACKET EQUALS expr
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RBRACKET        reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 69
    expr                           shift and go to state 38
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 34

    (25) statement -> IDENTIFIER LPAREN . expr_list RPAREN EQUALS expr
    (73) func_call -> IDENTIFIER LPAREN . expr_list RPAREN
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RPAREN          reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 70
    expr                           shift and go to state 38
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 35

    (45) incr_decr -> IDENTIFIER PLUSPLUS .

    SEMICOLON       reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    PLUS            reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MINUS           reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MUL             reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    DIV             reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MOD             reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    POW             reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LE              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    GE              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LT              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    GT              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    EQ              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    NE              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    COMMA           reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    AND             reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    OR              reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LBRACE          reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    RPAREN          reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    RBRACKET        reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    ELLIPSIS        reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)
    COLON           reduce using rule 45 (incr_decr -> IDENTIFIER PLUSPLUS .)


state 36

    (46) incr_decr -> IDENTIFIER MINUSMINUS .

    SEMICOLON       reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    PLUS            reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MINUS           reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MUL             reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    DIV             reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MOD             reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    POW             reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LE              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    GE              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LT              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    GT              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    EQ              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    NE              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    COMMA           reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    AND             reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    OR              reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LBRACE          reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    RPAREN          reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    RBRACKET        reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    ELLIPSIS        reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)
    COLON           reduce using rule 46 (incr_decr -> IDENTIFIER MINUSMINUS .)


state 37

    (26) statement -> RETURN expr_list .
    (29) expr_list -> expr_list . COMMA expr

    SEMICOLON       reduce using rule 26 (statement -> RETURN expr_list .)
    COMMA           shift and go to state 71


state 38

    (27) expr_list -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr
    (62) cond_list -> expr .

  ! reduce/reduce conflict for COMMA resolved using rule 27 (expr_list -> expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (expr_list -> expr .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (expr_list -> expr .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 27 (expr_list -> expr .)
    COMMA           reduce using rule 27 (expr_list -> expr .)
    SEMICOLON       reduce using rule 27 (expr_list -> expr .)
    RPAREN          reduce using rule 27 (expr_list -> expr .)
    RBRACKET        reduce using rule 27 (expr_list -> expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83
    AND             reduce using rule 62 (cond_list -> expr .)
    OR              reduce using rule 62 (cond_list -> expr .)

  ! COMMA           [ reduce using rule 62 (cond_list -> expr .) ]
  ! SEMICOLON       [ reduce using rule 62 (cond_list -> expr .) ]
  ! RPAREN          [ reduce using rule 62 (cond_list -> expr .) ]
  ! RBRACKET        [ reduce using rule 62 (cond_list -> expr .) ]


state 39

    (28) expr_list -> cond_list .
    (63) cond_list -> cond_list . AND expr
    (64) cond_list -> cond_list . OR expr

    COMMA           reduce using rule 28 (expr_list -> cond_list .)
    SEMICOLON       reduce using rule 28 (expr_list -> cond_list .)
    RPAREN          reduce using rule 28 (expr_list -> cond_list .)
    RBRACKET        reduce using rule 28 (expr_list -> cond_list .)
    AND             shift and go to state 84
    OR              shift and go to state 85


state 40

    (30) expr_list -> empty .

    COMMA           reduce using rule 30 (expr_list -> empty .)
    SEMICOLON       reduce using rule 30 (expr_list -> empty .)
    RPAREN          reduce using rule 30 (expr_list -> empty .)
    RBRACKET        reduce using rule 30 (expr_list -> empty .)


state 41

    (31) expr -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 86


state 42

    (47) expr -> IDENTIFIER .
    (53) expr -> IDENTIFIER . LBRACKET expr_list RBRACKET
    (54) expr -> IDENTIFIER . LBRACKET expr COLON expr RBRACKET
    (55) expr -> IDENTIFIER . LBRACKET expr COLON expr COLON expr RBRACKET
    (45) incr_decr -> IDENTIFIER . PLUSPLUS
    (46) incr_decr -> IDENTIFIER . MINUSMINUS
    (73) func_call -> IDENTIFIER . LPAREN expr_list RPAREN

    PLUS            reduce using rule 47 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 47 (expr -> IDENTIFIER .)
    MUL             reduce using rule 47 (expr -> IDENTIFIER .)
    DIV             reduce using rule 47 (expr -> IDENTIFIER .)
    MOD             reduce using rule 47 (expr -> IDENTIFIER .)
    POW             reduce using rule 47 (expr -> IDENTIFIER .)
    LE              reduce using rule 47 (expr -> IDENTIFIER .)
    GE              reduce using rule 47 (expr -> IDENTIFIER .)
    LT              reduce using rule 47 (expr -> IDENTIFIER .)
    GT              reduce using rule 47 (expr -> IDENTIFIER .)
    EQ              reduce using rule 47 (expr -> IDENTIFIER .)
    NE              reduce using rule 47 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 47 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 47 (expr -> IDENTIFIER .)
    AND             reduce using rule 47 (expr -> IDENTIFIER .)
    OR              reduce using rule 47 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 47 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 47 (expr -> IDENTIFIER .)
    RBRACKET        reduce using rule 47 (expr -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 47 (expr -> IDENTIFIER .)
    COLON           reduce using rule 47 (expr -> IDENTIFIER .)
    LBRACKET        shift and go to state 87
    PLUSPLUS        shift and go to state 35
    MINUSMINUS      shift and go to state 36
    LPAREN          shift and go to state 88


state 43

    (44) expr -> MINUS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 89
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 44

    (48) expr -> INTCONST .

    PLUS            reduce using rule 48 (expr -> INTCONST .)
    MINUS           reduce using rule 48 (expr -> INTCONST .)
    MUL             reduce using rule 48 (expr -> INTCONST .)
    DIV             reduce using rule 48 (expr -> INTCONST .)
    MOD             reduce using rule 48 (expr -> INTCONST .)
    POW             reduce using rule 48 (expr -> INTCONST .)
    LE              reduce using rule 48 (expr -> INTCONST .)
    GE              reduce using rule 48 (expr -> INTCONST .)
    LT              reduce using rule 48 (expr -> INTCONST .)
    GT              reduce using rule 48 (expr -> INTCONST .)
    EQ              reduce using rule 48 (expr -> INTCONST .)
    NE              reduce using rule 48 (expr -> INTCONST .)
    COMMA           reduce using rule 48 (expr -> INTCONST .)
    SEMICOLON       reduce using rule 48 (expr -> INTCONST .)
    AND             reduce using rule 48 (expr -> INTCONST .)
    OR              reduce using rule 48 (expr -> INTCONST .)
    LBRACE          reduce using rule 48 (expr -> INTCONST .)
    RPAREN          reduce using rule 48 (expr -> INTCONST .)
    RBRACKET        reduce using rule 48 (expr -> INTCONST .)
    ELLIPSIS        reduce using rule 48 (expr -> INTCONST .)
    COLON           reduce using rule 48 (expr -> INTCONST .)


state 45

    (49) expr -> FLOATCONST .

    PLUS            reduce using rule 49 (expr -> FLOATCONST .)
    MINUS           reduce using rule 49 (expr -> FLOATCONST .)
    MUL             reduce using rule 49 (expr -> FLOATCONST .)
    DIV             reduce using rule 49 (expr -> FLOATCONST .)
    MOD             reduce using rule 49 (expr -> FLOATCONST .)
    POW             reduce using rule 49 (expr -> FLOATCONST .)
    LE              reduce using rule 49 (expr -> FLOATCONST .)
    GE              reduce using rule 49 (expr -> FLOATCONST .)
    LT              reduce using rule 49 (expr -> FLOATCONST .)
    GT              reduce using rule 49 (expr -> FLOATCONST .)
    EQ              reduce using rule 49 (expr -> FLOATCONST .)
    NE              reduce using rule 49 (expr -> FLOATCONST .)
    COMMA           reduce using rule 49 (expr -> FLOATCONST .)
    SEMICOLON       reduce using rule 49 (expr -> FLOATCONST .)
    AND             reduce using rule 49 (expr -> FLOATCONST .)
    OR              reduce using rule 49 (expr -> FLOATCONST .)
    LBRACE          reduce using rule 49 (expr -> FLOATCONST .)
    RPAREN          reduce using rule 49 (expr -> FLOATCONST .)
    RBRACKET        reduce using rule 49 (expr -> FLOATCONST .)
    ELLIPSIS        reduce using rule 49 (expr -> FLOATCONST .)
    COLON           reduce using rule 49 (expr -> FLOATCONST .)


state 46

    (50) expr -> STRINGCONST .

    PLUS            reduce using rule 50 (expr -> STRINGCONST .)
    MINUS           reduce using rule 50 (expr -> STRINGCONST .)
    MUL             reduce using rule 50 (expr -> STRINGCONST .)
    DIV             reduce using rule 50 (expr -> STRINGCONST .)
    MOD             reduce using rule 50 (expr -> STRINGCONST .)
    POW             reduce using rule 50 (expr -> STRINGCONST .)
    LE              reduce using rule 50 (expr -> STRINGCONST .)
    GE              reduce using rule 50 (expr -> STRINGCONST .)
    LT              reduce using rule 50 (expr -> STRINGCONST .)
    GT              reduce using rule 50 (expr -> STRINGCONST .)
    EQ              reduce using rule 50 (expr -> STRINGCONST .)
    NE              reduce using rule 50 (expr -> STRINGCONST .)
    COMMA           reduce using rule 50 (expr -> STRINGCONST .)
    SEMICOLON       reduce using rule 50 (expr -> STRINGCONST .)
    AND             reduce using rule 50 (expr -> STRINGCONST .)
    OR              reduce using rule 50 (expr -> STRINGCONST .)
    LBRACE          reduce using rule 50 (expr -> STRINGCONST .)
    RPAREN          reduce using rule 50 (expr -> STRINGCONST .)
    RBRACKET        reduce using rule 50 (expr -> STRINGCONST .)
    ELLIPSIS        reduce using rule 50 (expr -> STRINGCONST .)
    COLON           reduce using rule 50 (expr -> STRINGCONST .)


state 47

    (51) expr -> LBRACKET . expr_list RBRACKET
    (52) expr -> LBRACKET . range RBRACKET
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (70) range -> . expr ELLIPSIS expr
    (71) range -> . expr ELLIPSIS expr COMMA expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RBRACKET        reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 90
    range                          shift and go to state 91
    expr                           shift and go to state 92
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 48

    (56) expr -> TRUE .

    PLUS            reduce using rule 56 (expr -> TRUE .)
    MINUS           reduce using rule 56 (expr -> TRUE .)
    MUL             reduce using rule 56 (expr -> TRUE .)
    DIV             reduce using rule 56 (expr -> TRUE .)
    MOD             reduce using rule 56 (expr -> TRUE .)
    POW             reduce using rule 56 (expr -> TRUE .)
    LE              reduce using rule 56 (expr -> TRUE .)
    GE              reduce using rule 56 (expr -> TRUE .)
    LT              reduce using rule 56 (expr -> TRUE .)
    GT              reduce using rule 56 (expr -> TRUE .)
    EQ              reduce using rule 56 (expr -> TRUE .)
    NE              reduce using rule 56 (expr -> TRUE .)
    COMMA           reduce using rule 56 (expr -> TRUE .)
    SEMICOLON       reduce using rule 56 (expr -> TRUE .)
    AND             reduce using rule 56 (expr -> TRUE .)
    OR              reduce using rule 56 (expr -> TRUE .)
    LBRACE          reduce using rule 56 (expr -> TRUE .)
    RPAREN          reduce using rule 56 (expr -> TRUE .)
    RBRACKET        reduce using rule 56 (expr -> TRUE .)
    ELLIPSIS        reduce using rule 56 (expr -> TRUE .)
    COLON           reduce using rule 56 (expr -> TRUE .)


state 49

    (57) expr -> FALSE .

    PLUS            reduce using rule 57 (expr -> FALSE .)
    MINUS           reduce using rule 57 (expr -> FALSE .)
    MUL             reduce using rule 57 (expr -> FALSE .)
    DIV             reduce using rule 57 (expr -> FALSE .)
    MOD             reduce using rule 57 (expr -> FALSE .)
    POW             reduce using rule 57 (expr -> FALSE .)
    LE              reduce using rule 57 (expr -> FALSE .)
    GE              reduce using rule 57 (expr -> FALSE .)
    LT              reduce using rule 57 (expr -> FALSE .)
    GT              reduce using rule 57 (expr -> FALSE .)
    EQ              reduce using rule 57 (expr -> FALSE .)
    NE              reduce using rule 57 (expr -> FALSE .)
    COMMA           reduce using rule 57 (expr -> FALSE .)
    SEMICOLON       reduce using rule 57 (expr -> FALSE .)
    AND             reduce using rule 57 (expr -> FALSE .)
    OR              reduce using rule 57 (expr -> FALSE .)
    LBRACE          reduce using rule 57 (expr -> FALSE .)
    RPAREN          reduce using rule 57 (expr -> FALSE .)
    RBRACKET        reduce using rule 57 (expr -> FALSE .)
    ELLIPSIS        reduce using rule 57 (expr -> FALSE .)
    COLON           reduce using rule 57 (expr -> FALSE .)


state 50

    (58) expr -> LPAREN . expr RPAREN
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 93
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 51

    (59) expr -> incr_decr .

    PLUS            reduce using rule 59 (expr -> incr_decr .)
    MINUS           reduce using rule 59 (expr -> incr_decr .)
    MUL             reduce using rule 59 (expr -> incr_decr .)
    DIV             reduce using rule 59 (expr -> incr_decr .)
    MOD             reduce using rule 59 (expr -> incr_decr .)
    POW             reduce using rule 59 (expr -> incr_decr .)
    LE              reduce using rule 59 (expr -> incr_decr .)
    GE              reduce using rule 59 (expr -> incr_decr .)
    LT              reduce using rule 59 (expr -> incr_decr .)
    GT              reduce using rule 59 (expr -> incr_decr .)
    EQ              reduce using rule 59 (expr -> incr_decr .)
    NE              reduce using rule 59 (expr -> incr_decr .)
    COMMA           reduce using rule 59 (expr -> incr_decr .)
    SEMICOLON       reduce using rule 59 (expr -> incr_decr .)
    AND             reduce using rule 59 (expr -> incr_decr .)
    OR              reduce using rule 59 (expr -> incr_decr .)
    LBRACE          reduce using rule 59 (expr -> incr_decr .)
    RPAREN          reduce using rule 59 (expr -> incr_decr .)
    RBRACKET        reduce using rule 59 (expr -> incr_decr .)
    ELLIPSIS        reduce using rule 59 (expr -> incr_decr .)
    COLON           reduce using rule 59 (expr -> incr_decr .)


state 52

    (60) expr -> func_call .

    PLUS            reduce using rule 60 (expr -> func_call .)
    MINUS           reduce using rule 60 (expr -> func_call .)
    MUL             reduce using rule 60 (expr -> func_call .)
    DIV             reduce using rule 60 (expr -> func_call .)
    MOD             reduce using rule 60 (expr -> func_call .)
    POW             reduce using rule 60 (expr -> func_call .)
    LE              reduce using rule 60 (expr -> func_call .)
    GE              reduce using rule 60 (expr -> func_call .)
    LT              reduce using rule 60 (expr -> func_call .)
    GT              reduce using rule 60 (expr -> func_call .)
    EQ              reduce using rule 60 (expr -> func_call .)
    NE              reduce using rule 60 (expr -> func_call .)
    COMMA           reduce using rule 60 (expr -> func_call .)
    SEMICOLON       reduce using rule 60 (expr -> func_call .)
    AND             reduce using rule 60 (expr -> func_call .)
    OR              reduce using rule 60 (expr -> func_call .)
    LBRACE          reduce using rule 60 (expr -> func_call .)
    RPAREN          reduce using rule 60 (expr -> func_call .)
    RBRACKET        reduce using rule 60 (expr -> func_call .)
    ELLIPSIS        reduce using rule 60 (expr -> func_call .)
    COLON           reduce using rule 60 (expr -> func_call .)


state 53

    (61) expr -> LEN . LPAREN expr RPAREN

    LPAREN          shift and go to state 94


state 54

    (65) if_line -> IF cond_list . LBRACE basic_block RBRACE
    (63) cond_list -> cond_list . AND expr
    (64) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 95
    AND             shift and go to state 84
    OR              shift and go to state 85


state 55

    (62) cond_list -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    LBRACE          reduce using rule 62 (cond_list -> expr .)
    AND             reduce using rule 62 (cond_list -> expr .)
    OR              reduce using rule 62 (cond_list -> expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 56

    (67) for_line -> FOR IDENTIFIER . WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> FOR IDENTIFIER . WALRUS RANGE expr LBRACE basic_block RBRACE
    (47) expr -> IDENTIFIER .
    (53) expr -> IDENTIFIER . LBRACKET expr_list RBRACKET
    (54) expr -> IDENTIFIER . LBRACKET expr COLON expr RBRACKET
    (55) expr -> IDENTIFIER . LBRACKET expr COLON expr COLON expr RBRACKET
    (45) incr_decr -> IDENTIFIER . PLUSPLUS
    (46) incr_decr -> IDENTIFIER . MINUSMINUS
    (73) func_call -> IDENTIFIER . LPAREN expr_list RPAREN

    WALRUS          shift and go to state 96
    PLUS            reduce using rule 47 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 47 (expr -> IDENTIFIER .)
    MUL             reduce using rule 47 (expr -> IDENTIFIER .)
    DIV             reduce using rule 47 (expr -> IDENTIFIER .)
    MOD             reduce using rule 47 (expr -> IDENTIFIER .)
    POW             reduce using rule 47 (expr -> IDENTIFIER .)
    LE              reduce using rule 47 (expr -> IDENTIFIER .)
    GE              reduce using rule 47 (expr -> IDENTIFIER .)
    LT              reduce using rule 47 (expr -> IDENTIFIER .)
    GT              reduce using rule 47 (expr -> IDENTIFIER .)
    EQ              reduce using rule 47 (expr -> IDENTIFIER .)
    NE              reduce using rule 47 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 47 (expr -> IDENTIFIER .)
    AND             reduce using rule 47 (expr -> IDENTIFIER .)
    OR              reduce using rule 47 (expr -> IDENTIFIER .)
    LBRACKET        shift and go to state 87
    PLUSPLUS        shift and go to state 35
    MINUSMINUS      shift and go to state 36
    LPAREN          shift and go to state 88


state 57

    (69) while_line -> FOR cond_list . LBRACE basic_block RBRACE
    (63) cond_list -> cond_list . AND expr
    (64) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 97
    AND             shift and go to state 84
    OR              shift and go to state 85


state 58

    (72) func_line -> FUNC IDENTIFIER . LPAREN expr_list RPAREN LBRACE basic_block RBRACE

    LPAREN          shift and go to state 98


state 59

    (66) else_line -> ELSE LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 99
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 60

    (12) statement -> PRINT LPAREN expr_list . RPAREN
    (29) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 71


state 61

    (13) statement -> LET IDENTIFIER EQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 101
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 62

    (15) statement -> IDENTIFIER EQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 15 (statement -> IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 63

    (16) statement -> IDENTIFIER PLUSEQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 16 (statement -> IDENTIFIER PLUSEQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 64

    (17) statement -> IDENTIFIER MINUSEQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 17 (statement -> IDENTIFIER MINUSEQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 65

    (18) statement -> IDENTIFIER MULEQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 18 (statement -> IDENTIFIER MULEQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 66

    (19) statement -> IDENTIFIER DIVEQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 19 (statement -> IDENTIFIER DIVEQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 67

    (20) statement -> IDENTIFIER MODEQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 20 (statement -> IDENTIFIER MODEQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 68

    (21) statement -> IDENTIFIER POWEQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 21 (statement -> IDENTIFIER POWEQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 69

    (23) statement -> IDENTIFIER LBRACKET expr_list . RBRACKET EQUALS expr
    (29) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 102
    COMMA           shift and go to state 71


state 70

    (25) statement -> IDENTIFIER LPAREN expr_list . RPAREN EQUALS expr
    (73) func_call -> IDENTIFIER LPAREN expr_list . RPAREN
    (29) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 71


state 71

    (29) expr_list -> expr_list COMMA . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 104
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 72

    (32) expr -> expr PLUS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 105
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 73

    (33) expr -> expr MINUS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 106
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 74

    (34) expr -> expr MUL . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 107
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 75

    (35) expr -> expr DIV . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 108
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 76

    (36) expr -> expr MOD . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 109
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 77

    (37) expr -> expr POW . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 110
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 78

    (38) expr -> expr LE . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 111
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 79

    (39) expr -> expr GE . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 112
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 80

    (40) expr -> expr LT . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 113
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 81

    (41) expr -> expr GT . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 114
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 82

    (42) expr -> expr EQ . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 115
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 83

    (43) expr -> expr NE . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 116
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 84

    (63) cond_list -> cond_list AND . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 117
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 85

    (64) cond_list -> cond_list OR . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 118
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 86

    (31) expr -> LET IDENTIFIER .

    PLUS            reduce using rule 31 (expr -> LET IDENTIFIER .)
    MINUS           reduce using rule 31 (expr -> LET IDENTIFIER .)
    MUL             reduce using rule 31 (expr -> LET IDENTIFIER .)
    DIV             reduce using rule 31 (expr -> LET IDENTIFIER .)
    MOD             reduce using rule 31 (expr -> LET IDENTIFIER .)
    POW             reduce using rule 31 (expr -> LET IDENTIFIER .)
    LE              reduce using rule 31 (expr -> LET IDENTIFIER .)
    GE              reduce using rule 31 (expr -> LET IDENTIFIER .)
    LT              reduce using rule 31 (expr -> LET IDENTIFIER .)
    GT              reduce using rule 31 (expr -> LET IDENTIFIER .)
    EQ              reduce using rule 31 (expr -> LET IDENTIFIER .)
    NE              reduce using rule 31 (expr -> LET IDENTIFIER .)
    COMMA           reduce using rule 31 (expr -> LET IDENTIFIER .)
    SEMICOLON       reduce using rule 31 (expr -> LET IDENTIFIER .)
    AND             reduce using rule 31 (expr -> LET IDENTIFIER .)
    OR              reduce using rule 31 (expr -> LET IDENTIFIER .)
    LBRACE          reduce using rule 31 (expr -> LET IDENTIFIER .)
    RPAREN          reduce using rule 31 (expr -> LET IDENTIFIER .)
    RBRACKET        reduce using rule 31 (expr -> LET IDENTIFIER .)
    ELLIPSIS        reduce using rule 31 (expr -> LET IDENTIFIER .)
    COLON           reduce using rule 31 (expr -> LET IDENTIFIER .)


state 87

    (53) expr -> IDENTIFIER LBRACKET . expr_list RBRACKET
    (54) expr -> IDENTIFIER LBRACKET . expr COLON expr RBRACKET
    (55) expr -> IDENTIFIER LBRACKET . expr COLON expr COLON expr RBRACKET
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RBRACKET        reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 119
    expr                           shift and go to state 120
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 88

    (73) func_call -> IDENTIFIER LPAREN . expr_list RPAREN
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RPAREN          reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 121
    expr                           shift and go to state 38
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 89

    (44) expr -> MINUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 44 (expr -> MINUS expr .)
    MINUS           reduce using rule 44 (expr -> MINUS expr .)
    MUL             reduce using rule 44 (expr -> MINUS expr .)
    DIV             reduce using rule 44 (expr -> MINUS expr .)
    MOD             reduce using rule 44 (expr -> MINUS expr .)
    POW             reduce using rule 44 (expr -> MINUS expr .)
    LE              reduce using rule 44 (expr -> MINUS expr .)
    GE              reduce using rule 44 (expr -> MINUS expr .)
    LT              reduce using rule 44 (expr -> MINUS expr .)
    GT              reduce using rule 44 (expr -> MINUS expr .)
    EQ              reduce using rule 44 (expr -> MINUS expr .)
    NE              reduce using rule 44 (expr -> MINUS expr .)
    COMMA           reduce using rule 44 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 44 (expr -> MINUS expr .)
    AND             reduce using rule 44 (expr -> MINUS expr .)
    OR              reduce using rule 44 (expr -> MINUS expr .)
    LBRACE          reduce using rule 44 (expr -> MINUS expr .)
    RPAREN          reduce using rule 44 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 44 (expr -> MINUS expr .)
    ELLIPSIS        reduce using rule 44 (expr -> MINUS expr .)
    COLON           reduce using rule 44 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POW             [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 90

    (51) expr -> LBRACKET expr_list . RBRACKET
    (29) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 122
    COMMA           shift and go to state 71


state 91

    (52) expr -> LBRACKET range . RBRACKET

    RBRACKET        shift and go to state 123


state 92

    (27) expr_list -> expr .
    (70) range -> expr . ELLIPSIS expr
    (71) range -> expr . ELLIPSIS expr COMMA expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr
    (62) cond_list -> expr .

  ! reduce/reduce conflict for RBRACKET resolved using rule 27 (expr_list -> expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 27 (expr_list -> expr .)
    RBRACKET        reduce using rule 27 (expr_list -> expr .)
    COMMA           reduce using rule 27 (expr_list -> expr .)
    ELLIPSIS        shift and go to state 124
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83
    AND             reduce using rule 62 (cond_list -> expr .)
    OR              reduce using rule 62 (cond_list -> expr .)

  ! RBRACKET        [ reduce using rule 62 (cond_list -> expr .) ]
  ! COMMA           [ reduce using rule 62 (cond_list -> expr .) ]


state 93

    (58) expr -> LPAREN expr . RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 94

    (61) expr -> LEN LPAREN . expr RPAREN
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 126
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 95

    (65) if_line -> IF cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 127
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 96

    (67) for_line -> FOR IDENTIFIER WALRUS . RANGE range LBRACE basic_block RBRACE
    (68) for_line -> FOR IDENTIFIER WALRUS . RANGE expr LBRACE basic_block RBRACE

    RANGE           shift and go to state 128


state 97

    (69) while_line -> FOR cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 129
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 98

    (72) func_line -> FUNC IDENTIFIER LPAREN . expr_list RPAREN LBRACE basic_block RBRACE
    (27) expr_list -> . expr
    (28) expr_list -> . cond_list
    (29) expr_list -> . expr_list COMMA expr
    (30) expr_list -> . empty
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (62) cond_list -> . expr
    (63) cond_list -> . cond_list AND expr
    (64) cond_list -> . cond_list OR expr
    (74) empty -> .
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53
    RPAREN          reduce using rule 74 (empty -> .)
    COMMA           reduce using rule 74 (empty -> .)

    expr_list                      shift and go to state 130
    expr                           shift and go to state 38
    cond_list                      shift and go to state 39
    empty                          shift and go to state 40
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 99

    (66) else_line -> ELSE LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 131
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 100

    (12) statement -> PRINT LPAREN expr_list RPAREN .

    SEMICOLON       reduce using rule 12 (statement -> PRINT LPAREN expr_list RPAREN .)


state 101

    (13) statement -> LET IDENTIFIER EQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 13 (statement -> LET IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 102

    (23) statement -> IDENTIFIER LBRACKET expr_list RBRACKET . EQUALS expr

    EQUALS          shift and go to state 132


state 103

    (25) statement -> IDENTIFIER LPAREN expr_list RPAREN . EQUALS expr
    (73) func_call -> IDENTIFIER LPAREN expr_list RPAREN .

    EQUALS          shift and go to state 133
    SEMICOLON       reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)


state 104

    (29) expr_list -> expr_list COMMA expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    COMMA           reduce using rule 29 (expr_list -> expr_list COMMA expr .)
    SEMICOLON       reduce using rule 29 (expr_list -> expr_list COMMA expr .)
    RPAREN          reduce using rule 29 (expr_list -> expr_list COMMA expr .)
    RBRACKET        reduce using rule 29 (expr_list -> expr_list COMMA expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 105

    (32) expr -> expr PLUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 32 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 32 (expr -> expr PLUS expr .)
    LE              reduce using rule 32 (expr -> expr PLUS expr .)
    GE              reduce using rule 32 (expr -> expr PLUS expr .)
    LT              reduce using rule 32 (expr -> expr PLUS expr .)
    GT              reduce using rule 32 (expr -> expr PLUS expr .)
    EQ              reduce using rule 32 (expr -> expr PLUS expr .)
    NE              reduce using rule 32 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 32 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 32 (expr -> expr PLUS expr .)
    AND             reduce using rule 32 (expr -> expr PLUS expr .)
    OR              reduce using rule 32 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 32 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 32 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 32 (expr -> expr PLUS expr .)
    ELLIPSIS        reduce using rule 32 (expr -> expr PLUS expr .)
    COLON           reduce using rule 32 (expr -> expr PLUS expr .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77

  ! MUL             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 106

    (33) expr -> expr MINUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 33 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 33 (expr -> expr MINUS expr .)
    LE              reduce using rule 33 (expr -> expr MINUS expr .)
    GE              reduce using rule 33 (expr -> expr MINUS expr .)
    LT              reduce using rule 33 (expr -> expr MINUS expr .)
    GT              reduce using rule 33 (expr -> expr MINUS expr .)
    EQ              reduce using rule 33 (expr -> expr MINUS expr .)
    NE              reduce using rule 33 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 33 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 33 (expr -> expr MINUS expr .)
    AND             reduce using rule 33 (expr -> expr MINUS expr .)
    OR              reduce using rule 33 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 33 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 33 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 33 (expr -> expr MINUS expr .)
    ELLIPSIS        reduce using rule 33 (expr -> expr MINUS expr .)
    COLON           reduce using rule 33 (expr -> expr MINUS expr .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77

  ! MUL             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 107

    (34) expr -> expr MUL expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 34 (expr -> expr MUL expr .)
    MINUS           reduce using rule 34 (expr -> expr MUL expr .)
    MUL             reduce using rule 34 (expr -> expr MUL expr .)
    DIV             reduce using rule 34 (expr -> expr MUL expr .)
    MOD             reduce using rule 34 (expr -> expr MUL expr .)
    LE              reduce using rule 34 (expr -> expr MUL expr .)
    GE              reduce using rule 34 (expr -> expr MUL expr .)
    LT              reduce using rule 34 (expr -> expr MUL expr .)
    GT              reduce using rule 34 (expr -> expr MUL expr .)
    EQ              reduce using rule 34 (expr -> expr MUL expr .)
    NE              reduce using rule 34 (expr -> expr MUL expr .)
    COMMA           reduce using rule 34 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr MUL expr .)
    AND             reduce using rule 34 (expr -> expr MUL expr .)
    OR              reduce using rule 34 (expr -> expr MUL expr .)
    LBRACE          reduce using rule 34 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 34 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 34 (expr -> expr MUL expr .)
    ELLIPSIS        reduce using rule 34 (expr -> expr MUL expr .)
    COLON           reduce using rule 34 (expr -> expr MUL expr .)
    POW             shift and go to state 77

  ! POW             [ reduce using rule 34 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 108

    (35) expr -> expr DIV expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 35 (expr -> expr DIV expr .)
    MINUS           reduce using rule 35 (expr -> expr DIV expr .)
    MUL             reduce using rule 35 (expr -> expr DIV expr .)
    DIV             reduce using rule 35 (expr -> expr DIV expr .)
    MOD             reduce using rule 35 (expr -> expr DIV expr .)
    LE              reduce using rule 35 (expr -> expr DIV expr .)
    GE              reduce using rule 35 (expr -> expr DIV expr .)
    LT              reduce using rule 35 (expr -> expr DIV expr .)
    GT              reduce using rule 35 (expr -> expr DIV expr .)
    EQ              reduce using rule 35 (expr -> expr DIV expr .)
    NE              reduce using rule 35 (expr -> expr DIV expr .)
    COMMA           reduce using rule 35 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr DIV expr .)
    AND             reduce using rule 35 (expr -> expr DIV expr .)
    OR              reduce using rule 35 (expr -> expr DIV expr .)
    LBRACE          reduce using rule 35 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 35 (expr -> expr DIV expr .)
    RBRACKET        reduce using rule 35 (expr -> expr DIV expr .)
    ELLIPSIS        reduce using rule 35 (expr -> expr DIV expr .)
    COLON           reduce using rule 35 (expr -> expr DIV expr .)
    POW             shift and go to state 77

  ! POW             [ reduce using rule 35 (expr -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 109

    (36) expr -> expr MOD expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 36 (expr -> expr MOD expr .)
    MINUS           reduce using rule 36 (expr -> expr MOD expr .)
    MUL             reduce using rule 36 (expr -> expr MOD expr .)
    DIV             reduce using rule 36 (expr -> expr MOD expr .)
    MOD             reduce using rule 36 (expr -> expr MOD expr .)
    LE              reduce using rule 36 (expr -> expr MOD expr .)
    GE              reduce using rule 36 (expr -> expr MOD expr .)
    LT              reduce using rule 36 (expr -> expr MOD expr .)
    GT              reduce using rule 36 (expr -> expr MOD expr .)
    EQ              reduce using rule 36 (expr -> expr MOD expr .)
    NE              reduce using rule 36 (expr -> expr MOD expr .)
    COMMA           reduce using rule 36 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr MOD expr .)
    AND             reduce using rule 36 (expr -> expr MOD expr .)
    OR              reduce using rule 36 (expr -> expr MOD expr .)
    LBRACE          reduce using rule 36 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 36 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 36 (expr -> expr MOD expr .)
    ELLIPSIS        reduce using rule 36 (expr -> expr MOD expr .)
    COLON           reduce using rule 36 (expr -> expr MOD expr .)
    POW             shift and go to state 77

  ! POW             [ reduce using rule 36 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 110

    (37) expr -> expr POW expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    PLUS            reduce using rule 37 (expr -> expr POW expr .)
    MINUS           reduce using rule 37 (expr -> expr POW expr .)
    MUL             reduce using rule 37 (expr -> expr POW expr .)
    DIV             reduce using rule 37 (expr -> expr POW expr .)
    MOD             reduce using rule 37 (expr -> expr POW expr .)
    LE              reduce using rule 37 (expr -> expr POW expr .)
    GE              reduce using rule 37 (expr -> expr POW expr .)
    LT              reduce using rule 37 (expr -> expr POW expr .)
    GT              reduce using rule 37 (expr -> expr POW expr .)
    EQ              reduce using rule 37 (expr -> expr POW expr .)
    NE              reduce using rule 37 (expr -> expr POW expr .)
    COMMA           reduce using rule 37 (expr -> expr POW expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr POW expr .)
    AND             reduce using rule 37 (expr -> expr POW expr .)
    OR              reduce using rule 37 (expr -> expr POW expr .)
    LBRACE          reduce using rule 37 (expr -> expr POW expr .)
    RPAREN          reduce using rule 37 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 37 (expr -> expr POW expr .)
    ELLIPSIS        reduce using rule 37 (expr -> expr POW expr .)
    COLON           reduce using rule 37 (expr -> expr POW expr .)
    POW             shift and go to state 77

  ! POW             [ reduce using rule 37 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! LE              [ shift and go to state 78 ]
  ! GE              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NE              [ shift and go to state 83 ]


state 111

    (38) expr -> expr LE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 38 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr LE expr .)
    AND             reduce using rule 38 (expr -> expr LE expr .)
    OR              reduce using rule 38 (expr -> expr LE expr .)
    LBRACE          reduce using rule 38 (expr -> expr LE expr .)
    RPAREN          reduce using rule 38 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 38 (expr -> expr LE expr .)
    ELLIPSIS        reduce using rule 38 (expr -> expr LE expr .)
    COLON           reduce using rule 38 (expr -> expr LE expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 38 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 38 (expr -> expr LE expr .) ]


state 112

    (39) expr -> expr GE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 39 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr GE expr .)
    AND             reduce using rule 39 (expr -> expr GE expr .)
    OR              reduce using rule 39 (expr -> expr GE expr .)
    LBRACE          reduce using rule 39 (expr -> expr GE expr .)
    RPAREN          reduce using rule 39 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 39 (expr -> expr GE expr .)
    ELLIPSIS        reduce using rule 39 (expr -> expr GE expr .)
    COLON           reduce using rule 39 (expr -> expr GE expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 39 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 39 (expr -> expr GE expr .) ]


state 113

    (40) expr -> expr LT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 40 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr LT expr .)
    AND             reduce using rule 40 (expr -> expr LT expr .)
    OR              reduce using rule 40 (expr -> expr LT expr .)
    LBRACE          reduce using rule 40 (expr -> expr LT expr .)
    RPAREN          reduce using rule 40 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 40 (expr -> expr LT expr .)
    ELLIPSIS        reduce using rule 40 (expr -> expr LT expr .)
    COLON           reduce using rule 40 (expr -> expr LT expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 40 (expr -> expr LT expr .) ]


state 114

    (41) expr -> expr GT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 41 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr GT expr .)
    AND             reduce using rule 41 (expr -> expr GT expr .)
    OR              reduce using rule 41 (expr -> expr GT expr .)
    LBRACE          reduce using rule 41 (expr -> expr GT expr .)
    RPAREN          reduce using rule 41 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 41 (expr -> expr GT expr .)
    ELLIPSIS        reduce using rule 41 (expr -> expr GT expr .)
    COLON           reduce using rule 41 (expr -> expr GT expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 41 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 41 (expr -> expr GT expr .) ]


state 115

    (42) expr -> expr EQ expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 42 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr EQ expr .)
    AND             reduce using rule 42 (expr -> expr EQ expr .)
    OR              reduce using rule 42 (expr -> expr EQ expr .)
    LBRACE          reduce using rule 42 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 42 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 42 (expr -> expr EQ expr .)
    ELLIPSIS        reduce using rule 42 (expr -> expr EQ expr .)
    COLON           reduce using rule 42 (expr -> expr EQ expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 42 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 42 (expr -> expr EQ expr .) ]


state 116

    (43) expr -> expr NE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 43 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 43 (expr -> expr NE expr .)
    AND             reduce using rule 43 (expr -> expr NE expr .)
    OR              reduce using rule 43 (expr -> expr NE expr .)
    LBRACE          reduce using rule 43 (expr -> expr NE expr .)
    RPAREN          reduce using rule 43 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 43 (expr -> expr NE expr .)
    ELLIPSIS        reduce using rule 43 (expr -> expr NE expr .)
    COLON           reduce using rule 43 (expr -> expr NE expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 43 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 43 (expr -> expr NE expr .) ]


state 117

    (63) cond_list -> cond_list AND expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    AND             reduce using rule 63 (cond_list -> cond_list AND expr .)
    OR              reduce using rule 63 (cond_list -> cond_list AND expr .)
    COMMA           reduce using rule 63 (cond_list -> cond_list AND expr .)
    SEMICOLON       reduce using rule 63 (cond_list -> cond_list AND expr .)
    LBRACE          reduce using rule 63 (cond_list -> cond_list AND expr .)
    RPAREN          reduce using rule 63 (cond_list -> cond_list AND expr .)
    RBRACKET        reduce using rule 63 (cond_list -> cond_list AND expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 118

    (64) cond_list -> cond_list OR expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    AND             reduce using rule 64 (cond_list -> cond_list OR expr .)
    OR              reduce using rule 64 (cond_list -> cond_list OR expr .)
    COMMA           reduce using rule 64 (cond_list -> cond_list OR expr .)
    SEMICOLON       reduce using rule 64 (cond_list -> cond_list OR expr .)
    LBRACE          reduce using rule 64 (cond_list -> cond_list OR expr .)
    RPAREN          reduce using rule 64 (cond_list -> cond_list OR expr .)
    RBRACKET        reduce using rule 64 (cond_list -> cond_list OR expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 119

    (53) expr -> IDENTIFIER LBRACKET expr_list . RBRACKET
    (29) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 134
    COMMA           shift and go to state 71


state 120

    (54) expr -> IDENTIFIER LBRACKET expr . COLON expr RBRACKET
    (55) expr -> IDENTIFIER LBRACKET expr . COLON expr COLON expr RBRACKET
    (27) expr_list -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr
    (62) cond_list -> expr .

  ! reduce/reduce conflict for RBRACKET resolved using rule 27 (expr_list -> expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 27 (expr_list -> expr .)
    COLON           shift and go to state 135
    RBRACKET        reduce using rule 27 (expr_list -> expr .)
    COMMA           reduce using rule 27 (expr_list -> expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83
    AND             reduce using rule 62 (cond_list -> expr .)
    OR              reduce using rule 62 (cond_list -> expr .)

  ! RBRACKET        [ reduce using rule 62 (cond_list -> expr .) ]
  ! COMMA           [ reduce using rule 62 (cond_list -> expr .) ]


state 121

    (73) func_call -> IDENTIFIER LPAREN expr_list . RPAREN
    (29) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 71


state 122

    (51) expr -> LBRACKET expr_list RBRACKET .

    PLUS            reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    SEMICOLON       reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    ELLIPSIS        reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 51 (expr -> LBRACKET expr_list RBRACKET .)


state 123

    (52) expr -> LBRACKET range RBRACKET .

    PLUS            reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    MINUS           reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    MUL             reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    DIV             reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    MOD             reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    POW             reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    LE              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    GE              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    LT              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    GT              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    EQ              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    NE              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    COMMA           reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    SEMICOLON       reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    AND             reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    OR              reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    LBRACE          reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    RPAREN          reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    RBRACKET        reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    ELLIPSIS        reduce using rule 52 (expr -> LBRACKET range RBRACKET .)
    COLON           reduce using rule 52 (expr -> LBRACKET range RBRACKET .)


state 124

    (70) range -> expr ELLIPSIS . expr
    (71) range -> expr ELLIPSIS . expr COMMA expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 137
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 125

    (58) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 58 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 58 (expr -> LPAREN expr RPAREN .)


state 126

    (61) expr -> LEN LPAREN expr . RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    RPAREN          shift and go to state 138
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 127

    (65) if_line -> IF cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 139
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 128

    (67) for_line -> FOR IDENTIFIER WALRUS RANGE . range LBRACE basic_block RBRACE
    (68) for_line -> FOR IDENTIFIER WALRUS RANGE . expr LBRACE basic_block RBRACE
    (70) range -> . expr ELLIPSIS expr
    (71) range -> . expr ELLIPSIS expr COMMA expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    range                          shift and go to state 140
    expr                           shift and go to state 141
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 129

    (69) while_line -> FOR cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 142
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 130

    (72) func_line -> FUNC IDENTIFIER LPAREN expr_list . RPAREN LBRACE basic_block RBRACE
    (29) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 143
    COMMA           shift and go to state 71


state 131

    (66) else_line -> ELSE LBRACE basic_block RBRACE .

    PRINT           reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    LET             reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IF              reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FOR             reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    $end            reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 66 (else_line -> ELSE LBRACE basic_block RBRACE .)


state 132

    (23) statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 144
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 133

    (25) statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 145
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 134

    (53) expr -> IDENTIFIER LBRACKET expr_list RBRACKET .

    PLUS            reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    SEMICOLON       reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    ELLIPSIS        reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 53 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)


state 135

    (54) expr -> IDENTIFIER LBRACKET expr COLON . expr RBRACKET
    (55) expr -> IDENTIFIER LBRACKET expr COLON . expr COLON expr RBRACKET
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 146
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 136

    (73) func_call -> IDENTIFIER LPAREN expr_list RPAREN .

    PLUS            reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    MUL             reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    DIV             reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    MOD             reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    POW             reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    LE              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    GE              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    LT              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    GT              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    EQ              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    NE              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    AND             reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    OR              reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    COLON           reduce using rule 73 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)


state 137

    (70) range -> expr ELLIPSIS expr .
    (71) range -> expr ELLIPSIS expr . COMMA expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    RBRACKET        reduce using rule 70 (range -> expr ELLIPSIS expr .)
    LBRACE          reduce using rule 70 (range -> expr ELLIPSIS expr .)
    COMMA           shift and go to state 147
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 138

    (61) expr -> LEN LPAREN expr RPAREN .

    PLUS            reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    MINUS           reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    MUL             reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    DIV             reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    MOD             reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    POW             reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    LE              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    GE              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    LT              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    GT              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    EQ              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    NE              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    COMMA           reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    AND             reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    OR              reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    LBRACE          reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    RPAREN          reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)
    COLON           reduce using rule 61 (expr -> LEN LPAREN expr RPAREN .)


state 139

    (65) if_line -> IF cond_list LBRACE basic_block RBRACE .

    ELSE            reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    PRINT           reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 65 (if_line -> IF cond_list LBRACE basic_block RBRACE .)


state 140

    (67) for_line -> FOR IDENTIFIER WALRUS RANGE range . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 148


state 141

    (68) for_line -> FOR IDENTIFIER WALRUS RANGE expr . LBRACE basic_block RBRACE
    (70) range -> expr . ELLIPSIS expr
    (71) range -> expr . ELLIPSIS expr COMMA expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    LBRACE          shift and go to state 149
    ELLIPSIS        shift and go to state 124
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 142

    (69) while_line -> FOR cond_list LBRACE basic_block RBRACE .

    PRINT           reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 69 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)


state 143

    (72) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 150


state 144

    (23) statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 23 (statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 145

    (25) statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    SEMICOLON       reduce using rule 25 (statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 146

    (54) expr -> IDENTIFIER LBRACKET expr COLON expr . RBRACKET
    (55) expr -> IDENTIFIER LBRACKET expr COLON expr . COLON expr RBRACKET
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    RBRACKET        shift and go to state 152
    COLON           shift and go to state 151
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 147

    (71) range -> expr ELLIPSIS expr COMMA . expr
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 153
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 148

    (67) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 154
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 149

    (68) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 155
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 150

    (72) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    basic_block                    shift and go to state 156
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 151

    (55) expr -> IDENTIFIER LBRACKET expr COLON expr COLON . expr RBRACKET
    (31) expr -> . LET IDENTIFIER
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr MUL expr
    (35) expr -> . expr DIV expr
    (36) expr -> . expr MOD expr
    (37) expr -> . expr POW expr
    (38) expr -> . expr LE expr
    (39) expr -> . expr GE expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr GT expr
    (42) expr -> . expr EQ expr
    (43) expr -> . expr NE expr
    (44) expr -> . MINUS expr
    (47) expr -> . IDENTIFIER
    (48) expr -> . INTCONST
    (49) expr -> . FLOATCONST
    (50) expr -> . STRINGCONST
    (51) expr -> . LBRACKET expr_list RBRACKET
    (52) expr -> . LBRACKET range RBRACKET
    (53) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (54) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (56) expr -> . TRUE
    (57) expr -> . FALSE
    (58) expr -> . LPAREN expr RPAREN
    (59) expr -> . incr_decr
    (60) expr -> . func_call
    (61) expr -> . LEN LPAREN expr RPAREN
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 41
    MINUS           shift and go to state 43
    IDENTIFIER      shift and go to state 42
    INTCONST        shift and go to state 44
    FLOATCONST      shift and go to state 45
    STRINGCONST     shift and go to state 46
    LBRACKET        shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    LPAREN          shift and go to state 50
    LEN             shift and go to state 53

    expr                           shift and go to state 157
    incr_decr                      shift and go to state 51
    func_call                      shift and go to state 52

state 152

    (54) expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .

    PLUS            reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    MINUS           reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    MUL             reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    DIV             reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    MOD             reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    POW             reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    LE              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    GE              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    LT              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    GT              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    EQ              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    NE              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    COMMA           reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    SEMICOLON       reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    AND             reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    OR              reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    LBRACE          reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    RPAREN          reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    RBRACKET        reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    ELLIPSIS        reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    COLON           reduce using rule 54 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)


state 153

    (71) range -> expr ELLIPSIS expr COMMA expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    RBRACKET        reduce using rule 71 (range -> expr ELLIPSIS expr COMMA expr .)
    LBRACE          reduce using rule 71 (range -> expr ELLIPSIS expr COMMA expr .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 154

    (67) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 158
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 155

    (68) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 159
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 156

    (72) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . func_call
    (25) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (26) statement -> . RETURN expr_list
    (65) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (67) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (68) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (69) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (72) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (45) incr_decr -> . IDENTIFIER PLUSPLUS
    (46) incr_decr -> . IDENTIFIER MINUSMINUS
    (73) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 160
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    FUNC            shift and go to state 19

    line_statement                 shift and go to state 20
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14
    func_call                      shift and go to state 15

state 157

    (55) expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr . RBRACKET
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . MUL expr
    (35) expr -> expr . DIV expr
    (36) expr -> expr . MOD expr
    (37) expr -> expr . POW expr
    (38) expr -> expr . LE expr
    (39) expr -> expr . GE expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . GT expr
    (42) expr -> expr . EQ expr
    (43) expr -> expr . NE expr

    RBRACKET        shift and go to state 161
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    POW             shift and go to state 77
    LE              shift and go to state 78
    GE              shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82
    NE              shift and go to state 83


state 158

    (67) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .

    PRINT           reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    LET             reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    IF              reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    FOR             reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    $end            reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 67 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)


state 159

    (68) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .

    PRINT           reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    LET             reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    IF              reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    FOR             reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    $end            reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 68 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)


state 160

    (72) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .

    PRINT           reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    LET             reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    IF              reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    FOR             reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    $end            reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 72 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)


state 161

    (55) expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .

    PLUS            reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    MINUS           reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    MUL             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    DIV             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    MOD             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    POW             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    LE              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    GE              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    LT              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    GT              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    EQ              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    NE              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    COMMA           reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    SEMICOLON       reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    AND             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    OR              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    LBRACE          reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    RPAREN          reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    RBRACKET        reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    ELLIPSIS        reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    COLON           reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for LET in state 4 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MUL in state 111 resolved as shift
WARNING: shift/reduce conflict for DIV in state 111 resolved as shift
WARNING: shift/reduce conflict for MOD in state 111 resolved as shift
WARNING: shift/reduce conflict for POW in state 111 resolved as shift
WARNING: shift/reduce conflict for LE in state 111 resolved as shift
WARNING: shift/reduce conflict for GE in state 111 resolved as shift
WARNING: shift/reduce conflict for LT in state 111 resolved as shift
WARNING: shift/reduce conflict for GT in state 111 resolved as shift
WARNING: shift/reduce conflict for EQ in state 111 resolved as shift
WARNING: shift/reduce conflict for NE in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MUL in state 112 resolved as shift
WARNING: shift/reduce conflict for DIV in state 112 resolved as shift
WARNING: shift/reduce conflict for MOD in state 112 resolved as shift
WARNING: shift/reduce conflict for POW in state 112 resolved as shift
WARNING: shift/reduce conflict for LE in state 112 resolved as shift
WARNING: shift/reduce conflict for GE in state 112 resolved as shift
WARNING: shift/reduce conflict for LT in state 112 resolved as shift
WARNING: shift/reduce conflict for GT in state 112 resolved as shift
WARNING: shift/reduce conflict for EQ in state 112 resolved as shift
WARNING: shift/reduce conflict for NE in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MUL in state 113 resolved as shift
WARNING: shift/reduce conflict for DIV in state 113 resolved as shift
WARNING: shift/reduce conflict for MOD in state 113 resolved as shift
WARNING: shift/reduce conflict for POW in state 113 resolved as shift
WARNING: shift/reduce conflict for LE in state 113 resolved as shift
WARNING: shift/reduce conflict for GE in state 113 resolved as shift
WARNING: shift/reduce conflict for LT in state 113 resolved as shift
WARNING: shift/reduce conflict for GT in state 113 resolved as shift
WARNING: shift/reduce conflict for EQ in state 113 resolved as shift
WARNING: shift/reduce conflict for NE in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MUL in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for MOD in state 114 resolved as shift
WARNING: shift/reduce conflict for POW in state 114 resolved as shift
WARNING: shift/reduce conflict for LE in state 114 resolved as shift
WARNING: shift/reduce conflict for GE in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for NE in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MUL in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV in state 115 resolved as shift
WARNING: shift/reduce conflict for MOD in state 115 resolved as shift
WARNING: shift/reduce conflict for POW in state 115 resolved as shift
WARNING: shift/reduce conflict for LE in state 115 resolved as shift
WARNING: shift/reduce conflict for GE in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for NE in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MUL in state 116 resolved as shift
WARNING: shift/reduce conflict for DIV in state 116 resolved as shift
WARNING: shift/reduce conflict for MOD in state 116 resolved as shift
WARNING: shift/reduce conflict for POW in state 116 resolved as shift
WARNING: shift/reduce conflict for LE in state 116 resolved as shift
WARNING: shift/reduce conflict for GE in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for NE in state 116 resolved as shift
WARNING: reduce/reduce conflict in state 38 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 38
WARNING: reduce/reduce conflict in state 92 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 92
WARNING: reduce/reduce conflict in state 120 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 120
