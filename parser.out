Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COLON
    COMMA
    CONTINUE
    DEFAULT
    DIVEQUALS
    ELLIPSIS
    ELSE
    FLOAT
    FOR
    FROM
    IF
    INT
    INTEGRATE
    LBRACE
    LBRACKET
    MINUSEQUALS
    MULEQUALS
    NOT
    PERIOD
    PLUSEQUALS
    RBRACE
    RBRACKET
    RETURN
    STRING
    SWITCH
    TO
    TYPE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> commands
Rule 2     commands -> commands basic_block
Rule 3     commands -> empty
Rule 4     basic_block -> line_statement
Rule 5     basic_block -> basic_block line_statement
Rule 6     line_statement -> statement SEMICOLON
Rule 7     statement -> PRINT LPAREN expr_list RPAREN
Rule 8     statement -> LET IDENTIFIER EQUALS expr
Rule 9     statement -> IDENTIFIER EQUALS expr
Rule 10    expr_list -> expr
Rule 11    expr_list -> cond_list
Rule 12    expr_list -> expr_list expr
Rule 13    expr -> expr PLUS expr
Rule 14    expr -> expr MINUS expr
Rule 15    expr -> expr MUL expr
Rule 16    expr -> expr DIV expr
Rule 17    expr -> expr MOD expr
Rule 18    expr -> expr POW expr
Rule 19    expr -> expr LE expr
Rule 20    expr -> expr GE expr
Rule 21    expr -> expr LT expr
Rule 22    expr -> expr GT expr
Rule 23    expr -> expr EQ expr
Rule 24    expr -> expr NE expr
Rule 25    expr -> expr PLUSPLUS
Rule 26    expr -> expr MINUSMINUS
Rule 27    expr -> IDENTIFIER
Rule 28    expr -> INTCONST
Rule 29    expr -> FLOATCONST
Rule 30    expr -> STRINGCONST
Rule 31    expr -> TRUE
Rule 32    expr -> FALSE
Rule 33    cond_list -> expr
Rule 34    cond_list -> cond_list AND expr
Rule 35    cond_list -> cond_list OR expr
Rule 36    empty -> <empty>

Terminals, with rules where they appear

AND                  : 34
BREAK                : 
CASE                 : 
COLON                : 
COMMA                : 
CONTINUE             : 
DEFAULT              : 
DIV                  : 16
DIVEQUALS            : 
ELLIPSIS             : 
ELSE                 : 
EQ                   : 23
EQUALS               : 8 9
FALSE                : 32
FLOAT                : 
FLOATCONST           : 29
FOR                  : 
FROM                 : 
GE                   : 20
GT                   : 22
IDENTIFIER           : 8 9 27
IF                   : 
INT                  : 
INTCONST             : 28
INTEGRATE            : 
LBRACE               : 
LBRACKET             : 
LE                   : 19
LET                  : 8
LPAREN               : 7
LT                   : 21
MINUS                : 14
MINUSEQUALS          : 
MINUSMINUS           : 26
MOD                  : 17
MUL                  : 15
MULEQUALS            : 
NE                   : 24
NOT                  : 
OR                   : 35
PERIOD               : 
PLUS                 : 13
PLUSEQUALS           : 
PLUSPLUS             : 25
POW                  : 18
PRINT                : 7
RBRACE               : 
RBRACKET             : 
RETURN               : 
RPAREN               : 7
SEMICOLON            : 6
STRING               : 
STRINGCONST          : 30
SWITCH               : 
TO                   : 
TRUE                 : 31
TYPE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

basic_block          : 2 5
commands             : 1 2
cond_list            : 11 34 35
empty                : 3
expr                 : 8 9 10 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 26 33 34 35
expr_list            : 7 12
line_statement       : 4 5
program              : 0
statement            : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commands
    (2) commands -> . commands basic_block
    (3) commands -> . empty
    (36) empty -> .

    PRINT           reduce using rule 36 (empty -> .)
    LET             reduce using rule 36 (empty -> .)
    IDENTIFIER      reduce using rule 36 (empty -> .)
    $end            reduce using rule 36 (empty -> .)

    program                        shift and go to state 1
    commands                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> commands .
    (2) commands -> commands . basic_block
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) statement -> . PRINT LPAREN expr_list RPAREN
    (8) statement -> . LET IDENTIFIER EQUALS expr
    (9) statement -> . IDENTIFIER EQUALS expr

    $end            reduce using rule 1 (program -> commands .)
    PRINT           shift and go to state 7
    LET             shift and go to state 8
    IDENTIFIER      shift and go to state 9

    basic_block                    shift and go to state 4
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6

state 3

    (3) commands -> empty .

    PRINT           reduce using rule 3 (commands -> empty .)
    LET             reduce using rule 3 (commands -> empty .)
    IDENTIFIER      reduce using rule 3 (commands -> empty .)
    $end            reduce using rule 3 (commands -> empty .)


state 4

    (2) commands -> commands basic_block .
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) statement -> . PRINT LPAREN expr_list RPAREN
    (8) statement -> . LET IDENTIFIER EQUALS expr
    (9) statement -> . IDENTIFIER EQUALS expr

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    $end            reduce using rule 2 (commands -> commands basic_block .)
    PRINT           shift and go to state 7
    LET             shift and go to state 8
    IDENTIFIER      shift and go to state 9

  ! PRINT           [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! LET             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IDENTIFIER      [ reduce using rule 2 (commands -> commands basic_block .) ]

    line_statement                 shift and go to state 10
    statement                      shift and go to state 6

state 5

    (4) basic_block -> line_statement .

    PRINT           reduce using rule 4 (basic_block -> line_statement .)
    LET             reduce using rule 4 (basic_block -> line_statement .)
    IDENTIFIER      reduce using rule 4 (basic_block -> line_statement .)
    $end            reduce using rule 4 (basic_block -> line_statement .)


state 6

    (6) line_statement -> statement . SEMICOLON

    SEMICOLON       shift and go to state 11


state 7

    (7) statement -> PRINT . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 12


state 8

    (8) statement -> LET . IDENTIFIER EQUALS expr

    IDENTIFIER      shift and go to state 13


state 9

    (9) statement -> IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 14


state 10

    (5) basic_block -> basic_block line_statement .

    PRINT           reduce using rule 5 (basic_block -> basic_block line_statement .)
    LET             reduce using rule 5 (basic_block -> basic_block line_statement .)
    IDENTIFIER      reduce using rule 5 (basic_block -> basic_block line_statement .)
    $end            reduce using rule 5 (basic_block -> basic_block line_statement .)


state 11

    (6) line_statement -> statement SEMICOLON .

    PRINT           reduce using rule 6 (line_statement -> statement SEMICOLON .)
    LET             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (line_statement -> statement SEMICOLON .)
    $end            reduce using rule 6 (line_statement -> statement SEMICOLON .)


state 12

    (7) statement -> PRINT LPAREN . expr_list RPAREN
    (10) expr_list -> . expr
    (11) expr_list -> . cond_list
    (12) expr_list -> . expr_list expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE
    (33) cond_list -> . expr
    (34) cond_list -> . cond_list AND expr
    (35) cond_list -> . cond_list OR expr

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr_list                      shift and go to state 15
    expr                           shift and go to state 16
    cond_list                      shift and go to state 17

state 13

    (8) statement -> LET IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 24


state 14

    (9) statement -> IDENTIFIER EQUALS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 25

state 15

    (7) statement -> PRINT LPAREN expr_list . RPAREN
    (12) expr_list -> expr_list . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    RPAREN          shift and go to state 26
    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 27

state 16

    (10) expr_list -> expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS
    (33) cond_list -> expr .

  ! reduce/reduce conflict for RPAREN resolved using rule 10 (expr_list -> expr .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (expr_list -> expr .)
  ! reduce/reduce conflict for INTCONST resolved using rule 10 (expr_list -> expr .)
  ! reduce/reduce conflict for FLOATCONST resolved using rule 10 (expr_list -> expr .)
  ! reduce/reduce conflict for STRINGCONST resolved using rule 10 (expr_list -> expr .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (expr_list -> expr .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (expr_list -> expr .)
    RPAREN          reduce using rule 10 (expr_list -> expr .)
    IDENTIFIER      reduce using rule 10 (expr_list -> expr .)
    INTCONST        reduce using rule 10 (expr_list -> expr .)
    FLOATCONST      reduce using rule 10 (expr_list -> expr .)
    STRINGCONST     reduce using rule 10 (expr_list -> expr .)
    TRUE            reduce using rule 10 (expr_list -> expr .)
    FALSE           reduce using rule 10 (expr_list -> expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41
    AND             reduce using rule 33 (cond_list -> expr .)
    OR              reduce using rule 33 (cond_list -> expr .)

  ! RPAREN          [ reduce using rule 33 (cond_list -> expr .) ]
  ! IDENTIFIER      [ reduce using rule 33 (cond_list -> expr .) ]
  ! INTCONST        [ reduce using rule 33 (cond_list -> expr .) ]
  ! FLOATCONST      [ reduce using rule 33 (cond_list -> expr .) ]
  ! STRINGCONST     [ reduce using rule 33 (cond_list -> expr .) ]
  ! TRUE            [ reduce using rule 33 (cond_list -> expr .) ]
  ! FALSE           [ reduce using rule 33 (cond_list -> expr .) ]


state 17

    (11) expr_list -> cond_list .
    (34) cond_list -> cond_list . AND expr
    (35) cond_list -> cond_list . OR expr

    RPAREN          reduce using rule 11 (expr_list -> cond_list .)
    IDENTIFIER      reduce using rule 11 (expr_list -> cond_list .)
    INTCONST        reduce using rule 11 (expr_list -> cond_list .)
    FLOATCONST      reduce using rule 11 (expr_list -> cond_list .)
    STRINGCONST     reduce using rule 11 (expr_list -> cond_list .)
    TRUE            reduce using rule 11 (expr_list -> cond_list .)
    FALSE           reduce using rule 11 (expr_list -> cond_list .)
    AND             shift and go to state 42
    OR              shift and go to state 43


state 18

    (27) expr -> IDENTIFIER .

    PLUS            reduce using rule 27 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 27 (expr -> IDENTIFIER .)
    MUL             reduce using rule 27 (expr -> IDENTIFIER .)
    DIV             reduce using rule 27 (expr -> IDENTIFIER .)
    MOD             reduce using rule 27 (expr -> IDENTIFIER .)
    POW             reduce using rule 27 (expr -> IDENTIFIER .)
    LE              reduce using rule 27 (expr -> IDENTIFIER .)
    GE              reduce using rule 27 (expr -> IDENTIFIER .)
    LT              reduce using rule 27 (expr -> IDENTIFIER .)
    GT              reduce using rule 27 (expr -> IDENTIFIER .)
    EQ              reduce using rule 27 (expr -> IDENTIFIER .)
    NE              reduce using rule 27 (expr -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 27 (expr -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 27 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (expr -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 27 (expr -> IDENTIFIER .)
    INTCONST        reduce using rule 27 (expr -> IDENTIFIER .)
    FLOATCONST      reduce using rule 27 (expr -> IDENTIFIER .)
    STRINGCONST     reduce using rule 27 (expr -> IDENTIFIER .)
    TRUE            reduce using rule 27 (expr -> IDENTIFIER .)
    FALSE           reduce using rule 27 (expr -> IDENTIFIER .)
    AND             reduce using rule 27 (expr -> IDENTIFIER .)
    OR              reduce using rule 27 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 27 (expr -> IDENTIFIER .)


state 19

    (28) expr -> INTCONST .

    PLUS            reduce using rule 28 (expr -> INTCONST .)
    MINUS           reduce using rule 28 (expr -> INTCONST .)
    MUL             reduce using rule 28 (expr -> INTCONST .)
    DIV             reduce using rule 28 (expr -> INTCONST .)
    MOD             reduce using rule 28 (expr -> INTCONST .)
    POW             reduce using rule 28 (expr -> INTCONST .)
    LE              reduce using rule 28 (expr -> INTCONST .)
    GE              reduce using rule 28 (expr -> INTCONST .)
    LT              reduce using rule 28 (expr -> INTCONST .)
    GT              reduce using rule 28 (expr -> INTCONST .)
    EQ              reduce using rule 28 (expr -> INTCONST .)
    NE              reduce using rule 28 (expr -> INTCONST .)
    PLUSPLUS        reduce using rule 28 (expr -> INTCONST .)
    MINUSMINUS      reduce using rule 28 (expr -> INTCONST .)
    RPAREN          reduce using rule 28 (expr -> INTCONST .)
    IDENTIFIER      reduce using rule 28 (expr -> INTCONST .)
    INTCONST        reduce using rule 28 (expr -> INTCONST .)
    FLOATCONST      reduce using rule 28 (expr -> INTCONST .)
    STRINGCONST     reduce using rule 28 (expr -> INTCONST .)
    TRUE            reduce using rule 28 (expr -> INTCONST .)
    FALSE           reduce using rule 28 (expr -> INTCONST .)
    AND             reduce using rule 28 (expr -> INTCONST .)
    OR              reduce using rule 28 (expr -> INTCONST .)
    SEMICOLON       reduce using rule 28 (expr -> INTCONST .)


state 20

    (29) expr -> FLOATCONST .

    PLUS            reduce using rule 29 (expr -> FLOATCONST .)
    MINUS           reduce using rule 29 (expr -> FLOATCONST .)
    MUL             reduce using rule 29 (expr -> FLOATCONST .)
    DIV             reduce using rule 29 (expr -> FLOATCONST .)
    MOD             reduce using rule 29 (expr -> FLOATCONST .)
    POW             reduce using rule 29 (expr -> FLOATCONST .)
    LE              reduce using rule 29 (expr -> FLOATCONST .)
    GE              reduce using rule 29 (expr -> FLOATCONST .)
    LT              reduce using rule 29 (expr -> FLOATCONST .)
    GT              reduce using rule 29 (expr -> FLOATCONST .)
    EQ              reduce using rule 29 (expr -> FLOATCONST .)
    NE              reduce using rule 29 (expr -> FLOATCONST .)
    PLUSPLUS        reduce using rule 29 (expr -> FLOATCONST .)
    MINUSMINUS      reduce using rule 29 (expr -> FLOATCONST .)
    RPAREN          reduce using rule 29 (expr -> FLOATCONST .)
    IDENTIFIER      reduce using rule 29 (expr -> FLOATCONST .)
    INTCONST        reduce using rule 29 (expr -> FLOATCONST .)
    FLOATCONST      reduce using rule 29 (expr -> FLOATCONST .)
    STRINGCONST     reduce using rule 29 (expr -> FLOATCONST .)
    TRUE            reduce using rule 29 (expr -> FLOATCONST .)
    FALSE           reduce using rule 29 (expr -> FLOATCONST .)
    AND             reduce using rule 29 (expr -> FLOATCONST .)
    OR              reduce using rule 29 (expr -> FLOATCONST .)
    SEMICOLON       reduce using rule 29 (expr -> FLOATCONST .)


state 21

    (30) expr -> STRINGCONST .

    PLUS            reduce using rule 30 (expr -> STRINGCONST .)
    MINUS           reduce using rule 30 (expr -> STRINGCONST .)
    MUL             reduce using rule 30 (expr -> STRINGCONST .)
    DIV             reduce using rule 30 (expr -> STRINGCONST .)
    MOD             reduce using rule 30 (expr -> STRINGCONST .)
    POW             reduce using rule 30 (expr -> STRINGCONST .)
    LE              reduce using rule 30 (expr -> STRINGCONST .)
    GE              reduce using rule 30 (expr -> STRINGCONST .)
    LT              reduce using rule 30 (expr -> STRINGCONST .)
    GT              reduce using rule 30 (expr -> STRINGCONST .)
    EQ              reduce using rule 30 (expr -> STRINGCONST .)
    NE              reduce using rule 30 (expr -> STRINGCONST .)
    PLUSPLUS        reduce using rule 30 (expr -> STRINGCONST .)
    MINUSMINUS      reduce using rule 30 (expr -> STRINGCONST .)
    RPAREN          reduce using rule 30 (expr -> STRINGCONST .)
    IDENTIFIER      reduce using rule 30 (expr -> STRINGCONST .)
    INTCONST        reduce using rule 30 (expr -> STRINGCONST .)
    FLOATCONST      reduce using rule 30 (expr -> STRINGCONST .)
    STRINGCONST     reduce using rule 30 (expr -> STRINGCONST .)
    TRUE            reduce using rule 30 (expr -> STRINGCONST .)
    FALSE           reduce using rule 30 (expr -> STRINGCONST .)
    AND             reduce using rule 30 (expr -> STRINGCONST .)
    OR              reduce using rule 30 (expr -> STRINGCONST .)
    SEMICOLON       reduce using rule 30 (expr -> STRINGCONST .)


state 22

    (31) expr -> TRUE .

    PLUS            reduce using rule 31 (expr -> TRUE .)
    MINUS           reduce using rule 31 (expr -> TRUE .)
    MUL             reduce using rule 31 (expr -> TRUE .)
    DIV             reduce using rule 31 (expr -> TRUE .)
    MOD             reduce using rule 31 (expr -> TRUE .)
    POW             reduce using rule 31 (expr -> TRUE .)
    LE              reduce using rule 31 (expr -> TRUE .)
    GE              reduce using rule 31 (expr -> TRUE .)
    LT              reduce using rule 31 (expr -> TRUE .)
    GT              reduce using rule 31 (expr -> TRUE .)
    EQ              reduce using rule 31 (expr -> TRUE .)
    NE              reduce using rule 31 (expr -> TRUE .)
    PLUSPLUS        reduce using rule 31 (expr -> TRUE .)
    MINUSMINUS      reduce using rule 31 (expr -> TRUE .)
    RPAREN          reduce using rule 31 (expr -> TRUE .)
    IDENTIFIER      reduce using rule 31 (expr -> TRUE .)
    INTCONST        reduce using rule 31 (expr -> TRUE .)
    FLOATCONST      reduce using rule 31 (expr -> TRUE .)
    STRINGCONST     reduce using rule 31 (expr -> TRUE .)
    TRUE            reduce using rule 31 (expr -> TRUE .)
    FALSE           reduce using rule 31 (expr -> TRUE .)
    AND             reduce using rule 31 (expr -> TRUE .)
    OR              reduce using rule 31 (expr -> TRUE .)
    SEMICOLON       reduce using rule 31 (expr -> TRUE .)


state 23

    (32) expr -> FALSE .

    PLUS            reduce using rule 32 (expr -> FALSE .)
    MINUS           reduce using rule 32 (expr -> FALSE .)
    MUL             reduce using rule 32 (expr -> FALSE .)
    DIV             reduce using rule 32 (expr -> FALSE .)
    MOD             reduce using rule 32 (expr -> FALSE .)
    POW             reduce using rule 32 (expr -> FALSE .)
    LE              reduce using rule 32 (expr -> FALSE .)
    GE              reduce using rule 32 (expr -> FALSE .)
    LT              reduce using rule 32 (expr -> FALSE .)
    GT              reduce using rule 32 (expr -> FALSE .)
    EQ              reduce using rule 32 (expr -> FALSE .)
    NE              reduce using rule 32 (expr -> FALSE .)
    PLUSPLUS        reduce using rule 32 (expr -> FALSE .)
    MINUSMINUS      reduce using rule 32 (expr -> FALSE .)
    RPAREN          reduce using rule 32 (expr -> FALSE .)
    IDENTIFIER      reduce using rule 32 (expr -> FALSE .)
    INTCONST        reduce using rule 32 (expr -> FALSE .)
    FLOATCONST      reduce using rule 32 (expr -> FALSE .)
    STRINGCONST     reduce using rule 32 (expr -> FALSE .)
    TRUE            reduce using rule 32 (expr -> FALSE .)
    FALSE           reduce using rule 32 (expr -> FALSE .)
    AND             reduce using rule 32 (expr -> FALSE .)
    OR              reduce using rule 32 (expr -> FALSE .)
    SEMICOLON       reduce using rule 32 (expr -> FALSE .)


state 24

    (8) statement -> LET IDENTIFIER EQUALS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 44

state 25

    (9) statement -> IDENTIFIER EQUALS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    SEMICOLON       reduce using rule 9 (statement -> IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41


state 26

    (7) statement -> PRINT LPAREN expr_list RPAREN .

    SEMICOLON       reduce using rule 7 (statement -> PRINT LPAREN expr_list RPAREN .)


state 27

    (12) expr_list -> expr_list expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    RPAREN          reduce using rule 12 (expr_list -> expr_list expr .)
    IDENTIFIER      reduce using rule 12 (expr_list -> expr_list expr .)
    INTCONST        reduce using rule 12 (expr_list -> expr_list expr .)
    FLOATCONST      reduce using rule 12 (expr_list -> expr_list expr .)
    STRINGCONST     reduce using rule 12 (expr_list -> expr_list expr .)
    TRUE            reduce using rule 12 (expr_list -> expr_list expr .)
    FALSE           reduce using rule 12 (expr_list -> expr_list expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41


state 28

    (13) expr -> expr PLUS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 45

state 29

    (14) expr -> expr MINUS . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 46

state 30

    (15) expr -> expr MUL . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 47

state 31

    (16) expr -> expr DIV . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 48

state 32

    (17) expr -> expr MOD . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 49

state 33

    (18) expr -> expr POW . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 50

state 34

    (19) expr -> expr LE . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 51

state 35

    (20) expr -> expr GE . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 52

state 36

    (21) expr -> expr LT . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 53

state 37

    (22) expr -> expr GT . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 54

state 38

    (23) expr -> expr EQ . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 55

state 39

    (24) expr -> expr NE . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 56

state 40

    (25) expr -> expr PLUSPLUS .

    PLUS            reduce using rule 25 (expr -> expr PLUSPLUS .)
    MINUS           reduce using rule 25 (expr -> expr PLUSPLUS .)
    MUL             reduce using rule 25 (expr -> expr PLUSPLUS .)
    DIV             reduce using rule 25 (expr -> expr PLUSPLUS .)
    MOD             reduce using rule 25 (expr -> expr PLUSPLUS .)
    POW             reduce using rule 25 (expr -> expr PLUSPLUS .)
    LE              reduce using rule 25 (expr -> expr PLUSPLUS .)
    GE              reduce using rule 25 (expr -> expr PLUSPLUS .)
    LT              reduce using rule 25 (expr -> expr PLUSPLUS .)
    GT              reduce using rule 25 (expr -> expr PLUSPLUS .)
    EQ              reduce using rule 25 (expr -> expr PLUSPLUS .)
    NE              reduce using rule 25 (expr -> expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 25 (expr -> expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 25 (expr -> expr PLUSPLUS .)
    RPAREN          reduce using rule 25 (expr -> expr PLUSPLUS .)
    IDENTIFIER      reduce using rule 25 (expr -> expr PLUSPLUS .)
    INTCONST        reduce using rule 25 (expr -> expr PLUSPLUS .)
    FLOATCONST      reduce using rule 25 (expr -> expr PLUSPLUS .)
    STRINGCONST     reduce using rule 25 (expr -> expr PLUSPLUS .)
    TRUE            reduce using rule 25 (expr -> expr PLUSPLUS .)
    FALSE           reduce using rule 25 (expr -> expr PLUSPLUS .)
    AND             reduce using rule 25 (expr -> expr PLUSPLUS .)
    OR              reduce using rule 25 (expr -> expr PLUSPLUS .)
    SEMICOLON       reduce using rule 25 (expr -> expr PLUSPLUS .)


state 41

    (26) expr -> expr MINUSMINUS .

    PLUS            reduce using rule 26 (expr -> expr MINUSMINUS .)
    MINUS           reduce using rule 26 (expr -> expr MINUSMINUS .)
    MUL             reduce using rule 26 (expr -> expr MINUSMINUS .)
    DIV             reduce using rule 26 (expr -> expr MINUSMINUS .)
    MOD             reduce using rule 26 (expr -> expr MINUSMINUS .)
    POW             reduce using rule 26 (expr -> expr MINUSMINUS .)
    LE              reduce using rule 26 (expr -> expr MINUSMINUS .)
    GE              reduce using rule 26 (expr -> expr MINUSMINUS .)
    LT              reduce using rule 26 (expr -> expr MINUSMINUS .)
    GT              reduce using rule 26 (expr -> expr MINUSMINUS .)
    EQ              reduce using rule 26 (expr -> expr MINUSMINUS .)
    NE              reduce using rule 26 (expr -> expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 26 (expr -> expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 26 (expr -> expr MINUSMINUS .)
    RPAREN          reduce using rule 26 (expr -> expr MINUSMINUS .)
    IDENTIFIER      reduce using rule 26 (expr -> expr MINUSMINUS .)
    INTCONST        reduce using rule 26 (expr -> expr MINUSMINUS .)
    FLOATCONST      reduce using rule 26 (expr -> expr MINUSMINUS .)
    STRINGCONST     reduce using rule 26 (expr -> expr MINUSMINUS .)
    TRUE            reduce using rule 26 (expr -> expr MINUSMINUS .)
    FALSE           reduce using rule 26 (expr -> expr MINUSMINUS .)
    AND             reduce using rule 26 (expr -> expr MINUSMINUS .)
    OR              reduce using rule 26 (expr -> expr MINUSMINUS .)
    SEMICOLON       reduce using rule 26 (expr -> expr MINUSMINUS .)


state 42

    (34) cond_list -> cond_list AND . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 57

state 43

    (35) cond_list -> cond_list OR . expr
    (13) expr -> . expr PLUS expr
    (14) expr -> . expr MINUS expr
    (15) expr -> . expr MUL expr
    (16) expr -> . expr DIV expr
    (17) expr -> . expr MOD expr
    (18) expr -> . expr POW expr
    (19) expr -> . expr LE expr
    (20) expr -> . expr GE expr
    (21) expr -> . expr LT expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr EQ expr
    (24) expr -> . expr NE expr
    (25) expr -> . expr PLUSPLUS
    (26) expr -> . expr MINUSMINUS
    (27) expr -> . IDENTIFIER
    (28) expr -> . INTCONST
    (29) expr -> . FLOATCONST
    (30) expr -> . STRINGCONST
    (31) expr -> . TRUE
    (32) expr -> . FALSE

    IDENTIFIER      shift and go to state 18
    INTCONST        shift and go to state 19
    FLOATCONST      shift and go to state 20
    STRINGCONST     shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    expr                           shift and go to state 58

state 44

    (8) statement -> LET IDENTIFIER EQUALS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    SEMICOLON       reduce using rule 8 (statement -> LET IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41


state 45

    (13) expr -> expr PLUS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 13 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 13 (expr -> expr PLUS expr .)
    LE              reduce using rule 13 (expr -> expr PLUS expr .)
    GE              reduce using rule 13 (expr -> expr PLUS expr .)
    LT              reduce using rule 13 (expr -> expr PLUS expr .)
    GT              reduce using rule 13 (expr -> expr PLUS expr .)
    EQ              reduce using rule 13 (expr -> expr PLUS expr .)
    NE              reduce using rule 13 (expr -> expr PLUS expr .)
    PLUSPLUS        reduce using rule 13 (expr -> expr PLUS expr .)
    MINUSMINUS      reduce using rule 13 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 13 (expr -> expr PLUS expr .)
    IDENTIFIER      reduce using rule 13 (expr -> expr PLUS expr .)
    INTCONST        reduce using rule 13 (expr -> expr PLUS expr .)
    FLOATCONST      reduce using rule 13 (expr -> expr PLUS expr .)
    STRINGCONST     reduce using rule 13 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 13 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 13 (expr -> expr PLUS expr .)
    AND             reduce using rule 13 (expr -> expr PLUS expr .)
    OR              reduce using rule 13 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 13 (expr -> expr PLUS expr .)
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33

  ! MUL             [ reduce using rule 13 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 13 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 13 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 13 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! LE              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LT              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! PLUSPLUS        [ shift and go to state 40 ]
  ! MINUSMINUS      [ shift and go to state 41 ]


state 46

    (14) expr -> expr MINUS expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 14 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 14 (expr -> expr MINUS expr .)
    LE              reduce using rule 14 (expr -> expr MINUS expr .)
    GE              reduce using rule 14 (expr -> expr MINUS expr .)
    LT              reduce using rule 14 (expr -> expr MINUS expr .)
    GT              reduce using rule 14 (expr -> expr MINUS expr .)
    EQ              reduce using rule 14 (expr -> expr MINUS expr .)
    NE              reduce using rule 14 (expr -> expr MINUS expr .)
    PLUSPLUS        reduce using rule 14 (expr -> expr MINUS expr .)
    MINUSMINUS      reduce using rule 14 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 14 (expr -> expr MINUS expr .)
    IDENTIFIER      reduce using rule 14 (expr -> expr MINUS expr .)
    INTCONST        reduce using rule 14 (expr -> expr MINUS expr .)
    FLOATCONST      reduce using rule 14 (expr -> expr MINUS expr .)
    STRINGCONST     reduce using rule 14 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 14 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 14 (expr -> expr MINUS expr .)
    AND             reduce using rule 14 (expr -> expr MINUS expr .)
    OR              reduce using rule 14 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 14 (expr -> expr MINUS expr .)
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33

  ! MUL             [ reduce using rule 14 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 14 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 14 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! LE              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LT              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! PLUSPLUS        [ shift and go to state 40 ]
  ! MINUSMINUS      [ shift and go to state 41 ]


state 47

    (15) expr -> expr MUL expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 15 (expr -> expr MUL expr .)
    MINUS           reduce using rule 15 (expr -> expr MUL expr .)
    MUL             reduce using rule 15 (expr -> expr MUL expr .)
    DIV             reduce using rule 15 (expr -> expr MUL expr .)
    MOD             reduce using rule 15 (expr -> expr MUL expr .)
    LE              reduce using rule 15 (expr -> expr MUL expr .)
    GE              reduce using rule 15 (expr -> expr MUL expr .)
    LT              reduce using rule 15 (expr -> expr MUL expr .)
    GT              reduce using rule 15 (expr -> expr MUL expr .)
    EQ              reduce using rule 15 (expr -> expr MUL expr .)
    NE              reduce using rule 15 (expr -> expr MUL expr .)
    PLUSPLUS        reduce using rule 15 (expr -> expr MUL expr .)
    MINUSMINUS      reduce using rule 15 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 15 (expr -> expr MUL expr .)
    IDENTIFIER      reduce using rule 15 (expr -> expr MUL expr .)
    INTCONST        reduce using rule 15 (expr -> expr MUL expr .)
    FLOATCONST      reduce using rule 15 (expr -> expr MUL expr .)
    STRINGCONST     reduce using rule 15 (expr -> expr MUL expr .)
    TRUE            reduce using rule 15 (expr -> expr MUL expr .)
    FALSE           reduce using rule 15 (expr -> expr MUL expr .)
    AND             reduce using rule 15 (expr -> expr MUL expr .)
    OR              reduce using rule 15 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 15 (expr -> expr MUL expr .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 15 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! MUL             [ shift and go to state 30 ]
  ! DIV             [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LT              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! PLUSPLUS        [ shift and go to state 40 ]
  ! MINUSMINUS      [ shift and go to state 41 ]


state 48

    (16) expr -> expr DIV expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 16 (expr -> expr DIV expr .)
    MINUS           reduce using rule 16 (expr -> expr DIV expr .)
    MUL             reduce using rule 16 (expr -> expr DIV expr .)
    DIV             reduce using rule 16 (expr -> expr DIV expr .)
    MOD             reduce using rule 16 (expr -> expr DIV expr .)
    LE              reduce using rule 16 (expr -> expr DIV expr .)
    GE              reduce using rule 16 (expr -> expr DIV expr .)
    LT              reduce using rule 16 (expr -> expr DIV expr .)
    GT              reduce using rule 16 (expr -> expr DIV expr .)
    EQ              reduce using rule 16 (expr -> expr DIV expr .)
    NE              reduce using rule 16 (expr -> expr DIV expr .)
    PLUSPLUS        reduce using rule 16 (expr -> expr DIV expr .)
    MINUSMINUS      reduce using rule 16 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 16 (expr -> expr DIV expr .)
    IDENTIFIER      reduce using rule 16 (expr -> expr DIV expr .)
    INTCONST        reduce using rule 16 (expr -> expr DIV expr .)
    FLOATCONST      reduce using rule 16 (expr -> expr DIV expr .)
    STRINGCONST     reduce using rule 16 (expr -> expr DIV expr .)
    TRUE            reduce using rule 16 (expr -> expr DIV expr .)
    FALSE           reduce using rule 16 (expr -> expr DIV expr .)
    AND             reduce using rule 16 (expr -> expr DIV expr .)
    OR              reduce using rule 16 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 16 (expr -> expr DIV expr .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 16 (expr -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! MUL             [ shift and go to state 30 ]
  ! DIV             [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LT              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! PLUSPLUS        [ shift and go to state 40 ]
  ! MINUSMINUS      [ shift and go to state 41 ]


state 49

    (17) expr -> expr MOD expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 17 (expr -> expr MOD expr .)
    MINUS           reduce using rule 17 (expr -> expr MOD expr .)
    MUL             reduce using rule 17 (expr -> expr MOD expr .)
    DIV             reduce using rule 17 (expr -> expr MOD expr .)
    MOD             reduce using rule 17 (expr -> expr MOD expr .)
    LE              reduce using rule 17 (expr -> expr MOD expr .)
    GE              reduce using rule 17 (expr -> expr MOD expr .)
    LT              reduce using rule 17 (expr -> expr MOD expr .)
    GT              reduce using rule 17 (expr -> expr MOD expr .)
    EQ              reduce using rule 17 (expr -> expr MOD expr .)
    NE              reduce using rule 17 (expr -> expr MOD expr .)
    PLUSPLUS        reduce using rule 17 (expr -> expr MOD expr .)
    MINUSMINUS      reduce using rule 17 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 17 (expr -> expr MOD expr .)
    IDENTIFIER      reduce using rule 17 (expr -> expr MOD expr .)
    INTCONST        reduce using rule 17 (expr -> expr MOD expr .)
    FLOATCONST      reduce using rule 17 (expr -> expr MOD expr .)
    STRINGCONST     reduce using rule 17 (expr -> expr MOD expr .)
    TRUE            reduce using rule 17 (expr -> expr MOD expr .)
    FALSE           reduce using rule 17 (expr -> expr MOD expr .)
    AND             reduce using rule 17 (expr -> expr MOD expr .)
    OR              reduce using rule 17 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 17 (expr -> expr MOD expr .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 17 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! MUL             [ shift and go to state 30 ]
  ! DIV             [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LT              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! PLUSPLUS        [ shift and go to state 40 ]
  ! MINUSMINUS      [ shift and go to state 41 ]


state 50

    (18) expr -> expr POW expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    PLUS            reduce using rule 18 (expr -> expr POW expr .)
    MINUS           reduce using rule 18 (expr -> expr POW expr .)
    MUL             reduce using rule 18 (expr -> expr POW expr .)
    DIV             reduce using rule 18 (expr -> expr POW expr .)
    MOD             reduce using rule 18 (expr -> expr POW expr .)
    LE              reduce using rule 18 (expr -> expr POW expr .)
    GE              reduce using rule 18 (expr -> expr POW expr .)
    LT              reduce using rule 18 (expr -> expr POW expr .)
    GT              reduce using rule 18 (expr -> expr POW expr .)
    EQ              reduce using rule 18 (expr -> expr POW expr .)
    NE              reduce using rule 18 (expr -> expr POW expr .)
    PLUSPLUS        reduce using rule 18 (expr -> expr POW expr .)
    MINUSMINUS      reduce using rule 18 (expr -> expr POW expr .)
    RPAREN          reduce using rule 18 (expr -> expr POW expr .)
    IDENTIFIER      reduce using rule 18 (expr -> expr POW expr .)
    INTCONST        reduce using rule 18 (expr -> expr POW expr .)
    FLOATCONST      reduce using rule 18 (expr -> expr POW expr .)
    STRINGCONST     reduce using rule 18 (expr -> expr POW expr .)
    TRUE            reduce using rule 18 (expr -> expr POW expr .)
    FALSE           reduce using rule 18 (expr -> expr POW expr .)
    AND             reduce using rule 18 (expr -> expr POW expr .)
    OR              reduce using rule 18 (expr -> expr POW expr .)
    SEMICOLON       reduce using rule 18 (expr -> expr POW expr .)
    POW             shift and go to state 33

  ! POW             [ reduce using rule 18 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 29 ]
  ! MUL             [ shift and go to state 30 ]
  ! DIV             [ shift and go to state 31 ]
  ! MOD             [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! GE              [ shift and go to state 35 ]
  ! LT              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NE              [ shift and go to state 39 ]
  ! PLUSPLUS        [ shift and go to state 40 ]
  ! MINUSMINUS      [ shift and go to state 41 ]


state 51

    (19) expr -> expr LE expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 19 (expr -> expr LE expr .)
    IDENTIFIER      reduce using rule 19 (expr -> expr LE expr .)
    INTCONST        reduce using rule 19 (expr -> expr LE expr .)
    FLOATCONST      reduce using rule 19 (expr -> expr LE expr .)
    STRINGCONST     reduce using rule 19 (expr -> expr LE expr .)
    TRUE            reduce using rule 19 (expr -> expr LE expr .)
    FALSE           reduce using rule 19 (expr -> expr LE expr .)
    AND             reduce using rule 19 (expr -> expr LE expr .)
    OR              reduce using rule 19 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 19 (expr -> expr LE expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

  ! PLUS            [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! PLUSPLUS        [ reduce using rule 19 (expr -> expr LE expr .) ]
  ! MINUSMINUS      [ reduce using rule 19 (expr -> expr LE expr .) ]


state 52

    (20) expr -> expr GE expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 20 (expr -> expr GE expr .)
    IDENTIFIER      reduce using rule 20 (expr -> expr GE expr .)
    INTCONST        reduce using rule 20 (expr -> expr GE expr .)
    FLOATCONST      reduce using rule 20 (expr -> expr GE expr .)
    STRINGCONST     reduce using rule 20 (expr -> expr GE expr .)
    TRUE            reduce using rule 20 (expr -> expr GE expr .)
    FALSE           reduce using rule 20 (expr -> expr GE expr .)
    AND             reduce using rule 20 (expr -> expr GE expr .)
    OR              reduce using rule 20 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 20 (expr -> expr GE expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

  ! PLUS            [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! PLUSPLUS        [ reduce using rule 20 (expr -> expr GE expr .) ]
  ! MINUSMINUS      [ reduce using rule 20 (expr -> expr GE expr .) ]


state 53

    (21) expr -> expr LT expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 21 (expr -> expr LT expr .)
    IDENTIFIER      reduce using rule 21 (expr -> expr LT expr .)
    INTCONST        reduce using rule 21 (expr -> expr LT expr .)
    FLOATCONST      reduce using rule 21 (expr -> expr LT expr .)
    STRINGCONST     reduce using rule 21 (expr -> expr LT expr .)
    TRUE            reduce using rule 21 (expr -> expr LT expr .)
    FALSE           reduce using rule 21 (expr -> expr LT expr .)
    AND             reduce using rule 21 (expr -> expr LT expr .)
    OR              reduce using rule 21 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 21 (expr -> expr LT expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

  ! PLUS            [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! PLUSPLUS        [ reduce using rule 21 (expr -> expr LT expr .) ]
  ! MINUSMINUS      [ reduce using rule 21 (expr -> expr LT expr .) ]


state 54

    (22) expr -> expr GT expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 22 (expr -> expr GT expr .)
    IDENTIFIER      reduce using rule 22 (expr -> expr GT expr .)
    INTCONST        reduce using rule 22 (expr -> expr GT expr .)
    FLOATCONST      reduce using rule 22 (expr -> expr GT expr .)
    STRINGCONST     reduce using rule 22 (expr -> expr GT expr .)
    TRUE            reduce using rule 22 (expr -> expr GT expr .)
    FALSE           reduce using rule 22 (expr -> expr GT expr .)
    AND             reduce using rule 22 (expr -> expr GT expr .)
    OR              reduce using rule 22 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr GT expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

  ! PLUS            [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! PLUSPLUS        [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! MINUSMINUS      [ reduce using rule 22 (expr -> expr GT expr .) ]


state 55

    (23) expr -> expr EQ expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 23 (expr -> expr EQ expr .)
    IDENTIFIER      reduce using rule 23 (expr -> expr EQ expr .)
    INTCONST        reduce using rule 23 (expr -> expr EQ expr .)
    FLOATCONST      reduce using rule 23 (expr -> expr EQ expr .)
    STRINGCONST     reduce using rule 23 (expr -> expr EQ expr .)
    TRUE            reduce using rule 23 (expr -> expr EQ expr .)
    FALSE           reduce using rule 23 (expr -> expr EQ expr .)
    AND             reduce using rule 23 (expr -> expr EQ expr .)
    OR              reduce using rule 23 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr EQ expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

  ! PLUS            [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! PLUSPLUS        [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! MINUSMINUS      [ reduce using rule 23 (expr -> expr EQ expr .) ]


state 56

    (24) expr -> expr NE expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    RPAREN          reduce using rule 24 (expr -> expr NE expr .)
    IDENTIFIER      reduce using rule 24 (expr -> expr NE expr .)
    INTCONST        reduce using rule 24 (expr -> expr NE expr .)
    FLOATCONST      reduce using rule 24 (expr -> expr NE expr .)
    STRINGCONST     reduce using rule 24 (expr -> expr NE expr .)
    TRUE            reduce using rule 24 (expr -> expr NE expr .)
    FALSE           reduce using rule 24 (expr -> expr NE expr .)
    AND             reduce using rule 24 (expr -> expr NE expr .)
    OR              reduce using rule 24 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr NE expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

  ! PLUS            [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! PLUSPLUS        [ reduce using rule 24 (expr -> expr NE expr .) ]
  ! MINUSMINUS      [ reduce using rule 24 (expr -> expr NE expr .) ]


state 57

    (34) cond_list -> cond_list AND expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    AND             reduce using rule 34 (cond_list -> cond_list AND expr .)
    OR              reduce using rule 34 (cond_list -> cond_list AND expr .)
    RPAREN          reduce using rule 34 (cond_list -> cond_list AND expr .)
    IDENTIFIER      reduce using rule 34 (cond_list -> cond_list AND expr .)
    INTCONST        reduce using rule 34 (cond_list -> cond_list AND expr .)
    FLOATCONST      reduce using rule 34 (cond_list -> cond_list AND expr .)
    STRINGCONST     reduce using rule 34 (cond_list -> cond_list AND expr .)
    TRUE            reduce using rule 34 (cond_list -> cond_list AND expr .)
    FALSE           reduce using rule 34 (cond_list -> cond_list AND expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41


state 58

    (35) cond_list -> cond_list OR expr .
    (13) expr -> expr . PLUS expr
    (14) expr -> expr . MINUS expr
    (15) expr -> expr . MUL expr
    (16) expr -> expr . DIV expr
    (17) expr -> expr . MOD expr
    (18) expr -> expr . POW expr
    (19) expr -> expr . LE expr
    (20) expr -> expr . GE expr
    (21) expr -> expr . LT expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . EQ expr
    (24) expr -> expr . NE expr
    (25) expr -> expr . PLUSPLUS
    (26) expr -> expr . MINUSMINUS

    AND             reduce using rule 35 (cond_list -> cond_list OR expr .)
    OR              reduce using rule 35 (cond_list -> cond_list OR expr .)
    RPAREN          reduce using rule 35 (cond_list -> cond_list OR expr .)
    IDENTIFIER      reduce using rule 35 (cond_list -> cond_list OR expr .)
    INTCONST        reduce using rule 35 (cond_list -> cond_list OR expr .)
    FLOATCONST      reduce using rule 35 (cond_list -> cond_list OR expr .)
    STRINGCONST     reduce using rule 35 (cond_list -> cond_list OR expr .)
    TRUE            reduce using rule 35 (cond_list -> cond_list OR expr .)
    FALSE           reduce using rule 35 (cond_list -> cond_list OR expr .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29
    MUL             shift and go to state 30
    DIV             shift and go to state 31
    MOD             shift and go to state 32
    POW             shift and go to state 33
    LE              shift and go to state 34
    GE              shift and go to state 35
    LT              shift and go to state 36
    GT              shift and go to state 37
    EQ              shift and go to state 38
    NE              shift and go to state 39
    PLUSPLUS        shift and go to state 40
    MINUSMINUS      shift and go to state 41

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for LET in state 4 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MUL in state 51 resolved as shift
WARNING: shift/reduce conflict for DIV in state 51 resolved as shift
WARNING: shift/reduce conflict for MOD in state 51 resolved as shift
WARNING: shift/reduce conflict for POW in state 51 resolved as shift
WARNING: shift/reduce conflict for LE in state 51 resolved as shift
WARNING: shift/reduce conflict for GE in state 51 resolved as shift
WARNING: shift/reduce conflict for LT in state 51 resolved as shift
WARNING: shift/reduce conflict for GT in state 51 resolved as shift
WARNING: shift/reduce conflict for EQ in state 51 resolved as shift
WARNING: shift/reduce conflict for NE in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MUL in state 52 resolved as shift
WARNING: shift/reduce conflict for DIV in state 52 resolved as shift
WARNING: shift/reduce conflict for MOD in state 52 resolved as shift
WARNING: shift/reduce conflict for POW in state 52 resolved as shift
WARNING: shift/reduce conflict for LE in state 52 resolved as shift
WARNING: shift/reduce conflict for GE in state 52 resolved as shift
WARNING: shift/reduce conflict for LT in state 52 resolved as shift
WARNING: shift/reduce conflict for GT in state 52 resolved as shift
WARNING: shift/reduce conflict for EQ in state 52 resolved as shift
WARNING: shift/reduce conflict for NE in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MUL in state 53 resolved as shift
WARNING: shift/reduce conflict for DIV in state 53 resolved as shift
WARNING: shift/reduce conflict for MOD in state 53 resolved as shift
WARNING: shift/reduce conflict for POW in state 53 resolved as shift
WARNING: shift/reduce conflict for LE in state 53 resolved as shift
WARNING: shift/reduce conflict for GE in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for NE in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MUL in state 54 resolved as shift
WARNING: shift/reduce conflict for DIV in state 54 resolved as shift
WARNING: shift/reduce conflict for MOD in state 54 resolved as shift
WARNING: shift/reduce conflict for POW in state 54 resolved as shift
WARNING: shift/reduce conflict for LE in state 54 resolved as shift
WARNING: shift/reduce conflict for GE in state 54 resolved as shift
WARNING: shift/reduce conflict for LT in state 54 resolved as shift
WARNING: shift/reduce conflict for GT in state 54 resolved as shift
WARNING: shift/reduce conflict for EQ in state 54 resolved as shift
WARNING: shift/reduce conflict for NE in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MUL in state 55 resolved as shift
WARNING: shift/reduce conflict for DIV in state 55 resolved as shift
WARNING: shift/reduce conflict for MOD in state 55 resolved as shift
WARNING: shift/reduce conflict for POW in state 55 resolved as shift
WARNING: shift/reduce conflict for LE in state 55 resolved as shift
WARNING: shift/reduce conflict for GE in state 55 resolved as shift
WARNING: shift/reduce conflict for LT in state 55 resolved as shift
WARNING: shift/reduce conflict for GT in state 55 resolved as shift
WARNING: shift/reduce conflict for EQ in state 55 resolved as shift
WARNING: shift/reduce conflict for NE in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MUL in state 56 resolved as shift
WARNING: shift/reduce conflict for DIV in state 56 resolved as shift
WARNING: shift/reduce conflict for MOD in state 56 resolved as shift
WARNING: shift/reduce conflict for POW in state 56 resolved as shift
WARNING: shift/reduce conflict for LE in state 56 resolved as shift
WARNING: shift/reduce conflict for GE in state 56 resolved as shift
WARNING: shift/reduce conflict for LT in state 56 resolved as shift
WARNING: shift/reduce conflict for GT in state 56 resolved as shift
WARNING: shift/reduce conflict for EQ in state 56 resolved as shift
WARNING: shift/reduce conflict for NE in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 56 resolved as shift
WARNING: reduce/reduce conflict in state 16 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 16
