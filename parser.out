Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> commands
Rule 2     commands -> commands basic_block
Rule 3     commands -> empty
Rule 4     basic_block -> line_statement
Rule 5     basic_block -> basic_block line_statement
Rule 6     line_statement -> statement SEMICOLON
Rule 7     line_statement -> if_line
Rule 8     line_statement -> if_line else_line
Rule 9     line_statement -> for_line
Rule 10    line_statement -> while_line
Rule 11    line_statement -> func_line
Rule 12    line_statement -> switch_line
Rule 13    statement -> PRINT LPAREN expr_list RPAREN
Rule 14    statement -> LET IDENTIFIER EQUALS expr
Rule 15    statement -> LET IDENTIFIER
Rule 16    statement -> IDENTIFIER EQUALS expr
Rule 17    statement -> IDENTIFIER PLUSEQUALS expr
Rule 18    statement -> IDENTIFIER MINUSEQUALS expr
Rule 19    statement -> IDENTIFIER MULEQUALS expr
Rule 20    statement -> IDENTIFIER DIVEQUALS expr
Rule 21    statement -> IDENTIFIER MODEQUALS expr
Rule 22    statement -> IDENTIFIER POWEQUALS expr
Rule 23    statement -> incr_decr
Rule 24    statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
Rule 25    statement -> func_call
Rule 26    statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
Rule 27    statement -> RETURN expr_list
Rule 28    statement -> BREAK
Rule 29    expr_list -> expr
Rule 30    expr_list -> cond_list
Rule 31    expr_list -> expr_list COMMA expr
Rule 32    expr_list -> empty
Rule 33    expr -> LET IDENTIFIER
Rule 34    expr -> expr PLUS expr
Rule 35    expr -> expr MINUS expr
Rule 36    expr -> expr MUL expr
Rule 37    expr -> expr DIV expr
Rule 38    expr -> expr MOD expr
Rule 39    expr -> expr POW expr
Rule 40    expr -> expr LE expr
Rule 41    expr -> expr GE expr
Rule 42    expr -> expr LT expr
Rule 43    expr -> expr GT expr
Rule 44    expr -> expr EQ expr
Rule 45    expr -> expr NE expr
Rule 46    expr -> MINUS expr
Rule 47    incr_decr -> IDENTIFIER PLUSPLUS
Rule 48    incr_decr -> IDENTIFIER MINUSMINUS
Rule 49    expr -> IDENTIFIER
Rule 50    expr -> INTCONST
Rule 51    expr -> FLOATCONST
Rule 52    expr -> STRINGCONST
Rule 53    expr -> LBRACKET expr_list RBRACKET
Rule 54    expr -> LBRACKET range RBRACKET
Rule 55    expr -> IDENTIFIER LBRACKET expr_list RBRACKET
Rule 56    expr -> expr COLON expr
Rule 57    expr -> expr COLON expr COLON expr
Rule 58    expr -> TRUE
Rule 59    expr -> FALSE
Rule 60    expr -> NULL
Rule 61    expr -> LPAREN expr RPAREN
Rule 62    expr -> incr_decr
Rule 63    expr -> func_call
Rule 64    expr -> LEN LPAREN expr RPAREN
Rule 65    expr -> MIN LPAREN expr_list RPAREN
Rule 66    expr -> MAX LPAREN expr_list RPAREN
Rule 67    expr -> INT LPAREN expr RPAREN
Rule 68    expr -> FLOAT LPAREN expr RPAREN
Rule 69    expr -> STR LPAREN expr RPAREN
Rule 70    expr -> LIST LPAREN expr RPAREN
Rule 71    expr -> TYPE LPAREN expr RPAREN
Rule 72    expr -> SIN LPAREN expr_list RPAREN
Rule 73    expr -> COS LPAREN expr_list RPAREN
Rule 74    expr -> TAN LPAREN expr_list RPAREN
Rule 75    expr -> ASIN LPAREN expr_list RPAREN
Rule 76    expr -> ACOS LPAREN expr_list RPAREN
Rule 77    expr -> ATAN LPAREN expr_list RPAREN
Rule 78    expr -> SINH LPAREN expr_list RPAREN
Rule 79    expr -> COSH LPAREN expr_list RPAREN
Rule 80    expr -> TANH LPAREN expr_list RPAREN
Rule 81    expr -> INTEGRATE LPAREN expr_list RPAREN
Rule 82    expr -> DIFF LPAREN expr_list RPAREN
Rule 83    cond_list -> expr
Rule 84    cond_list -> NOT expr
Rule 85    cond_list -> cond_list AND expr
Rule 86    cond_list -> cond_list OR expr
Rule 87    if_line -> IF cond_list LBRACE basic_block RBRACE
Rule 88    else_line -> ELSE LBRACE basic_block RBRACE
Rule 89    for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
Rule 90    for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
Rule 91    while_line -> FOR cond_list LBRACE basic_block RBRACE
Rule 92    range -> expr ELLIPSIS expr
Rule 93    range -> expr ELLIPSIS expr COMMA expr
Rule 94    func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
Rule 95    func_call -> IDENTIFIER LPAREN expr_list RPAREN
Rule 96    switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
Rule 97    case_list -> case_block
Rule 98    case_list -> case_list case_block
Rule 99    case_block -> CASE expr LBRACE basic_block RBRACE
Rule 100   case_block -> DEFAULT LBRACE basic_block RBRACE
Rule 101   empty -> <empty>

Terminals, with rules where they appear

ACOS                 : 76
AND                  : 85
ASIN                 : 75
ATAN                 : 77
BREAK                : 28
CASE                 : 99
COLON                : 56 57 57
COMMA                : 31 93
COS                  : 73
COSH                 : 79
DEFAULT              : 100
DIFF                 : 82
DIV                  : 37
DIVEQUALS            : 20
ELLIPSIS             : 92 93
ELSE                 : 88
EQ                   : 44
EQUALS               : 14 16 24 26
FALSE                : 59
FLOAT                : 68
FLOATCONST           : 51
FOR                  : 89 90 91
FUNC                 : 94
GE                   : 41
GT                   : 43
IDENTIFIER           : 14 15 16 17 18 19 20 21 22 24 26 33 47 48 49 55 89 90 94 95
IF                   : 87
INT                  : 67
INTCONST             : 50
INTEGRATE            : 81
LBRACE               : 87 88 89 90 91 94 96 99 100
LBRACKET             : 24 53 54 55
LE                   : 40
LEN                  : 64
LET                  : 14 15 33
LIST                 : 70
LPAREN               : 13 26 61 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 94 95 96
LT                   : 42
MAX                  : 66
MIN                  : 65
MINUS                : 35 46
MINUSEQUALS          : 18
MINUSMINUS           : 48
MOD                  : 38
MODEQUALS            : 21
MUL                  : 36
MULEQUALS            : 19
NE                   : 45
NOT                  : 84
NULL                 : 60
OR                   : 86
PLUS                 : 34
PLUSEQUALS           : 17
PLUSPLUS             : 47
POW                  : 39
POWEQUALS            : 22
PRINT                : 13
RANGE                : 89 90
RBRACE               : 87 88 89 90 91 94 96 99 100
RBRACKET             : 24 53 54 55
RETURN               : 27
RPAREN               : 13 26 61 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 94 95 96
SEMICOLON            : 6
SIN                  : 72
SINH                 : 78
STR                  : 69
STRINGCONST          : 52
SWITCH               : 96
TAN                  : 74
TANH                 : 80
TRUE                 : 58
TYPE                 : 71
WALRUS               : 89 90
error                : 

Nonterminals, with rules where they appear

basic_block          : 2 5 87 88 89 90 91 94 99 100
case_block           : 97 98
case_list            : 96 98
commands             : 1 2
cond_list            : 30 85 86 87 91
else_line            : 8
empty                : 3 32
expr                 : 14 16 17 18 19 20 21 22 24 26 29 31 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 56 56 57 57 57 61 64 67 68 69 70 71 83 84 85 86 90 92 92 93 93 93 96 99
expr_list            : 13 24 26 27 31 53 55 65 66 72 73 74 75 76 77 78 79 80 81 82 94 95
for_line             : 9
func_call            : 25 63
func_line            : 11
if_line              : 7 8
incr_decr            : 23 62
line_statement       : 4 5
program              : 0
range                : 54 89
statement            : 6
switch_line          : 12
while_line           : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commands
    (2) commands -> . commands basic_block
    (3) commands -> . empty
    (101) empty -> .

    PRINT           reduce using rule 101 (empty -> .)
    LET             reduce using rule 101 (empty -> .)
    IDENTIFIER      reduce using rule 101 (empty -> .)
    RETURN          reduce using rule 101 (empty -> .)
    BREAK           reduce using rule 101 (empty -> .)
    IF              reduce using rule 101 (empty -> .)
    FOR             reduce using rule 101 (empty -> .)
    FUNC            reduce using rule 101 (empty -> .)
    SWITCH          reduce using rule 101 (empty -> .)
    $end            reduce using rule 101 (empty -> .)

    program                        shift and go to state 1
    commands                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> commands .
    (2) commands -> commands . basic_block
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    $end            reduce using rule 1 (program -> commands .)
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 4
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 3

    (3) commands -> empty .

    PRINT           reduce using rule 3 (commands -> empty .)
    LET             reduce using rule 3 (commands -> empty .)
    IDENTIFIER      reduce using rule 3 (commands -> empty .)
    RETURN          reduce using rule 3 (commands -> empty .)
    BREAK           reduce using rule 3 (commands -> empty .)
    IF              reduce using rule 3 (commands -> empty .)
    FOR             reduce using rule 3 (commands -> empty .)
    FUNC            reduce using rule 3 (commands -> empty .)
    SWITCH          reduce using rule 3 (commands -> empty .)
    $end            reduce using rule 3 (commands -> empty .)


state 4

    (2) commands -> commands basic_block .
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
    $end            reduce using rule 2 (commands -> commands basic_block .)
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

  ! PRINT           [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! LET             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IDENTIFIER      [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! RETURN          [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! BREAK           [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IF              [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FOR             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FUNC            [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! SWITCH          [ reduce using rule 2 (commands -> commands basic_block .) ]

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 5

    (4) basic_block -> line_statement .

    PRINT           reduce using rule 4 (basic_block -> line_statement .)
    LET             reduce using rule 4 (basic_block -> line_statement .)
    IDENTIFIER      reduce using rule 4 (basic_block -> line_statement .)
    RETURN          reduce using rule 4 (basic_block -> line_statement .)
    BREAK           reduce using rule 4 (basic_block -> line_statement .)
    IF              reduce using rule 4 (basic_block -> line_statement .)
    FOR             reduce using rule 4 (basic_block -> line_statement .)
    FUNC            reduce using rule 4 (basic_block -> line_statement .)
    SWITCH          reduce using rule 4 (basic_block -> line_statement .)
    $end            reduce using rule 4 (basic_block -> line_statement .)
    RBRACE          reduce using rule 4 (basic_block -> line_statement .)


state 6

    (6) line_statement -> statement . SEMICOLON

    SEMICOLON       shift and go to state 24


state 7

    (7) line_statement -> if_line .
    (8) line_statement -> if_line . else_line
    (88) else_line -> . ELSE LBRACE basic_block RBRACE

    PRINT           reduce using rule 7 (line_statement -> if_line .)
    LET             reduce using rule 7 (line_statement -> if_line .)
    IDENTIFIER      reduce using rule 7 (line_statement -> if_line .)
    RETURN          reduce using rule 7 (line_statement -> if_line .)
    BREAK           reduce using rule 7 (line_statement -> if_line .)
    IF              reduce using rule 7 (line_statement -> if_line .)
    FOR             reduce using rule 7 (line_statement -> if_line .)
    FUNC            reduce using rule 7 (line_statement -> if_line .)
    SWITCH          reduce using rule 7 (line_statement -> if_line .)
    $end            reduce using rule 7 (line_statement -> if_line .)
    RBRACE          reduce using rule 7 (line_statement -> if_line .)
    ELSE            shift and go to state 26

    else_line                      shift and go to state 25

state 8

    (9) line_statement -> for_line .

    PRINT           reduce using rule 9 (line_statement -> for_line .)
    LET             reduce using rule 9 (line_statement -> for_line .)
    IDENTIFIER      reduce using rule 9 (line_statement -> for_line .)
    RETURN          reduce using rule 9 (line_statement -> for_line .)
    BREAK           reduce using rule 9 (line_statement -> for_line .)
    IF              reduce using rule 9 (line_statement -> for_line .)
    FOR             reduce using rule 9 (line_statement -> for_line .)
    FUNC            reduce using rule 9 (line_statement -> for_line .)
    SWITCH          reduce using rule 9 (line_statement -> for_line .)
    $end            reduce using rule 9 (line_statement -> for_line .)
    RBRACE          reduce using rule 9 (line_statement -> for_line .)


state 9

    (10) line_statement -> while_line .

    PRINT           reduce using rule 10 (line_statement -> while_line .)
    LET             reduce using rule 10 (line_statement -> while_line .)
    IDENTIFIER      reduce using rule 10 (line_statement -> while_line .)
    RETURN          reduce using rule 10 (line_statement -> while_line .)
    BREAK           reduce using rule 10 (line_statement -> while_line .)
    IF              reduce using rule 10 (line_statement -> while_line .)
    FOR             reduce using rule 10 (line_statement -> while_line .)
    FUNC            reduce using rule 10 (line_statement -> while_line .)
    SWITCH          reduce using rule 10 (line_statement -> while_line .)
    $end            reduce using rule 10 (line_statement -> while_line .)
    RBRACE          reduce using rule 10 (line_statement -> while_line .)


state 10

    (11) line_statement -> func_line .

    PRINT           reduce using rule 11 (line_statement -> func_line .)
    LET             reduce using rule 11 (line_statement -> func_line .)
    IDENTIFIER      reduce using rule 11 (line_statement -> func_line .)
    RETURN          reduce using rule 11 (line_statement -> func_line .)
    BREAK           reduce using rule 11 (line_statement -> func_line .)
    IF              reduce using rule 11 (line_statement -> func_line .)
    FOR             reduce using rule 11 (line_statement -> func_line .)
    FUNC            reduce using rule 11 (line_statement -> func_line .)
    SWITCH          reduce using rule 11 (line_statement -> func_line .)
    $end            reduce using rule 11 (line_statement -> func_line .)
    RBRACE          reduce using rule 11 (line_statement -> func_line .)


state 11

    (12) line_statement -> switch_line .

    PRINT           reduce using rule 12 (line_statement -> switch_line .)
    LET             reduce using rule 12 (line_statement -> switch_line .)
    IDENTIFIER      reduce using rule 12 (line_statement -> switch_line .)
    RETURN          reduce using rule 12 (line_statement -> switch_line .)
    BREAK           reduce using rule 12 (line_statement -> switch_line .)
    IF              reduce using rule 12 (line_statement -> switch_line .)
    FOR             reduce using rule 12 (line_statement -> switch_line .)
    FUNC            reduce using rule 12 (line_statement -> switch_line .)
    SWITCH          reduce using rule 12 (line_statement -> switch_line .)
    $end            reduce using rule 12 (line_statement -> switch_line .)
    RBRACE          reduce using rule 12 (line_statement -> switch_line .)


state 12

    (13) statement -> PRINT . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 27


state 13

    (14) statement -> LET . IDENTIFIER EQUALS expr
    (15) statement -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 28


state 14

    (16) statement -> IDENTIFIER . EQUALS expr
    (17) statement -> IDENTIFIER . PLUSEQUALS expr
    (18) statement -> IDENTIFIER . MINUSEQUALS expr
    (19) statement -> IDENTIFIER . MULEQUALS expr
    (20) statement -> IDENTIFIER . DIVEQUALS expr
    (21) statement -> IDENTIFIER . MODEQUALS expr
    (22) statement -> IDENTIFIER . POWEQUALS expr
    (24) statement -> IDENTIFIER . LBRACKET expr_list RBRACKET EQUALS expr
    (26) statement -> IDENTIFIER . LPAREN expr_list RPAREN EQUALS expr
    (47) incr_decr -> IDENTIFIER . PLUSPLUS
    (48) incr_decr -> IDENTIFIER . MINUSMINUS
    (95) func_call -> IDENTIFIER . LPAREN expr_list RPAREN

    EQUALS          shift and go to state 29
    PLUSEQUALS      shift and go to state 30
    MINUSEQUALS     shift and go to state 31
    MULEQUALS       shift and go to state 32
    DIVEQUALS       shift and go to state 33
    MODEQUALS       shift and go to state 34
    POWEQUALS       shift and go to state 35
    LBRACKET        shift and go to state 36
    LPAREN          shift and go to state 37
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39


state 15

    (23) statement -> incr_decr .

    SEMICOLON       reduce using rule 23 (statement -> incr_decr .)


state 16

    (25) statement -> func_call .

    SEMICOLON       reduce using rule 25 (statement -> func_call .)


state 17

    (27) statement -> RETURN . expr_list
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    COMMA           reduce using rule 101 (empty -> .)
    SEMICOLON       reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 40
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 18

    (28) statement -> BREAK .

    SEMICOLON       reduce using rule 28 (statement -> BREAK .)


state 19

    (87) if_line -> IF . cond_list LBRACE basic_block RBRACE
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    NOT             shift and go to state 76
    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    cond_list                      shift and go to state 77
    expr                           shift and go to state 78
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 20

    (89) for_line -> FOR . IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> FOR . IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> FOR . cond_list LBRACE basic_block RBRACE
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    IDENTIFIER      shift and go to state 79
    NOT             shift and go to state 76
    LET             shift and go to state 44
    MINUS           shift and go to state 46
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 78
    cond_list                      shift and go to state 80
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 21

    (94) func_line -> FUNC . IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE

    IDENTIFIER      shift and go to state 81


state 22

    (96) switch_line -> SWITCH . LPAREN expr RPAREN LBRACE case_list RBRACE

    LPAREN          shift and go to state 82


state 23

    (5) basic_block -> basic_block line_statement .

    PRINT           reduce using rule 5 (basic_block -> basic_block line_statement .)
    LET             reduce using rule 5 (basic_block -> basic_block line_statement .)
    IDENTIFIER      reduce using rule 5 (basic_block -> basic_block line_statement .)
    RETURN          reduce using rule 5 (basic_block -> basic_block line_statement .)
    BREAK           reduce using rule 5 (basic_block -> basic_block line_statement .)
    IF              reduce using rule 5 (basic_block -> basic_block line_statement .)
    FOR             reduce using rule 5 (basic_block -> basic_block line_statement .)
    FUNC            reduce using rule 5 (basic_block -> basic_block line_statement .)
    SWITCH          reduce using rule 5 (basic_block -> basic_block line_statement .)
    $end            reduce using rule 5 (basic_block -> basic_block line_statement .)
    RBRACE          reduce using rule 5 (basic_block -> basic_block line_statement .)


state 24

    (6) line_statement -> statement SEMICOLON .

    PRINT           reduce using rule 6 (line_statement -> statement SEMICOLON .)
    LET             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (line_statement -> statement SEMICOLON .)
    RETURN          reduce using rule 6 (line_statement -> statement SEMICOLON .)
    BREAK           reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IF              reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FOR             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FUNC            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    SWITCH          reduce using rule 6 (line_statement -> statement SEMICOLON .)
    $end            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    RBRACE          reduce using rule 6 (line_statement -> statement SEMICOLON .)


state 25

    (8) line_statement -> if_line else_line .

    PRINT           reduce using rule 8 (line_statement -> if_line else_line .)
    LET             reduce using rule 8 (line_statement -> if_line else_line .)
    IDENTIFIER      reduce using rule 8 (line_statement -> if_line else_line .)
    RETURN          reduce using rule 8 (line_statement -> if_line else_line .)
    BREAK           reduce using rule 8 (line_statement -> if_line else_line .)
    IF              reduce using rule 8 (line_statement -> if_line else_line .)
    FOR             reduce using rule 8 (line_statement -> if_line else_line .)
    FUNC            reduce using rule 8 (line_statement -> if_line else_line .)
    SWITCH          reduce using rule 8 (line_statement -> if_line else_line .)
    $end            reduce using rule 8 (line_statement -> if_line else_line .)
    RBRACE          reduce using rule 8 (line_statement -> if_line else_line .)


state 26

    (88) else_line -> ELSE . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 83


state 27

    (13) statement -> PRINT LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 84
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 28

    (14) statement -> LET IDENTIFIER . EQUALS expr
    (15) statement -> LET IDENTIFIER .

    EQUALS          shift and go to state 85
    SEMICOLON       reduce using rule 15 (statement -> LET IDENTIFIER .)


state 29

    (16) statement -> IDENTIFIER EQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 86
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 30

    (17) statement -> IDENTIFIER PLUSEQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 87
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 31

    (18) statement -> IDENTIFIER MINUSEQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 88
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 32

    (19) statement -> IDENTIFIER MULEQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 89
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 33

    (20) statement -> IDENTIFIER DIVEQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 90
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 34

    (21) statement -> IDENTIFIER MODEQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 91
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 35

    (22) statement -> IDENTIFIER POWEQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 92
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 36

    (24) statement -> IDENTIFIER LBRACKET . expr_list RBRACKET EQUALS expr
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RBRACKET        reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 93
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 37

    (26) statement -> IDENTIFIER LPAREN . expr_list RPAREN EQUALS expr
    (95) func_call -> IDENTIFIER LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 94
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 38

    (47) incr_decr -> IDENTIFIER PLUSPLUS .

    SEMICOLON       reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    PLUS            reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MINUS           reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MUL             reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    DIV             reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MOD             reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    POW             reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LE              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    GE              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LT              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    GT              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    EQ              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    NE              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    COLON           reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    COMMA           reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    AND             reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    OR              reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LBRACE          reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    RPAREN          reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    RBRACKET        reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)
    ELLIPSIS        reduce using rule 47 (incr_decr -> IDENTIFIER PLUSPLUS .)


state 39

    (48) incr_decr -> IDENTIFIER MINUSMINUS .

    SEMICOLON       reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    PLUS            reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MINUS           reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MUL             reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    DIV             reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MOD             reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    POW             reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LE              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    GE              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LT              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    GT              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    EQ              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    NE              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    COLON           reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    COMMA           reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    AND             reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    OR              reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LBRACE          reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    RPAREN          reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    RBRACKET        reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)
    ELLIPSIS        reduce using rule 48 (incr_decr -> IDENTIFIER MINUSMINUS .)


state 40

    (27) statement -> RETURN expr_list .
    (31) expr_list -> expr_list . COMMA expr

    SEMICOLON       reduce using rule 27 (statement -> RETURN expr_list .)
    COMMA           shift and go to state 95


state 41

    (29) expr_list -> expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr
    (83) cond_list -> expr .

  ! reduce/reduce conflict for COMMA resolved using rule 29 (expr_list -> expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (expr_list -> expr .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (expr_list -> expr .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 29 (expr_list -> expr .)
    COMMA           reduce using rule 29 (expr_list -> expr .)
    SEMICOLON       reduce using rule 29 (expr_list -> expr .)
    RPAREN          reduce using rule 29 (expr_list -> expr .)
    RBRACKET        reduce using rule 29 (expr_list -> expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108
    AND             reduce using rule 83 (cond_list -> expr .)
    OR              reduce using rule 83 (cond_list -> expr .)

  ! COMMA           [ reduce using rule 83 (cond_list -> expr .) ]
  ! SEMICOLON       [ reduce using rule 83 (cond_list -> expr .) ]
  ! RPAREN          [ reduce using rule 83 (cond_list -> expr .) ]
  ! RBRACKET        [ reduce using rule 83 (cond_list -> expr .) ]


state 42

    (30) expr_list -> cond_list .
    (85) cond_list -> cond_list . AND expr
    (86) cond_list -> cond_list . OR expr

    COMMA           reduce using rule 30 (expr_list -> cond_list .)
    SEMICOLON       reduce using rule 30 (expr_list -> cond_list .)
    RPAREN          reduce using rule 30 (expr_list -> cond_list .)
    RBRACKET        reduce using rule 30 (expr_list -> cond_list .)
    AND             shift and go to state 109
    OR              shift and go to state 110


state 43

    (32) expr_list -> empty .

    COMMA           reduce using rule 32 (expr_list -> empty .)
    SEMICOLON       reduce using rule 32 (expr_list -> empty .)
    RPAREN          reduce using rule 32 (expr_list -> empty .)
    RBRACKET        reduce using rule 32 (expr_list -> empty .)


state 44

    (33) expr -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 111


state 45

    (49) expr -> IDENTIFIER .
    (55) expr -> IDENTIFIER . LBRACKET expr_list RBRACKET
    (47) incr_decr -> IDENTIFIER . PLUSPLUS
    (48) incr_decr -> IDENTIFIER . MINUSMINUS
    (95) func_call -> IDENTIFIER . LPAREN expr_list RPAREN

    PLUS            reduce using rule 49 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 49 (expr -> IDENTIFIER .)
    MUL             reduce using rule 49 (expr -> IDENTIFIER .)
    DIV             reduce using rule 49 (expr -> IDENTIFIER .)
    MOD             reduce using rule 49 (expr -> IDENTIFIER .)
    POW             reduce using rule 49 (expr -> IDENTIFIER .)
    LE              reduce using rule 49 (expr -> IDENTIFIER .)
    GE              reduce using rule 49 (expr -> IDENTIFIER .)
    LT              reduce using rule 49 (expr -> IDENTIFIER .)
    GT              reduce using rule 49 (expr -> IDENTIFIER .)
    EQ              reduce using rule 49 (expr -> IDENTIFIER .)
    NE              reduce using rule 49 (expr -> IDENTIFIER .)
    COLON           reduce using rule 49 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 49 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (expr -> IDENTIFIER .)
    AND             reduce using rule 49 (expr -> IDENTIFIER .)
    OR              reduce using rule 49 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 49 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 49 (expr -> IDENTIFIER .)
    RBRACKET        reduce using rule 49 (expr -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 49 (expr -> IDENTIFIER .)
    LBRACKET        shift and go to state 112
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 113


state 46

    (46) expr -> MINUS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 114
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 47

    (50) expr -> INTCONST .

    PLUS            reduce using rule 50 (expr -> INTCONST .)
    MINUS           reduce using rule 50 (expr -> INTCONST .)
    MUL             reduce using rule 50 (expr -> INTCONST .)
    DIV             reduce using rule 50 (expr -> INTCONST .)
    MOD             reduce using rule 50 (expr -> INTCONST .)
    POW             reduce using rule 50 (expr -> INTCONST .)
    LE              reduce using rule 50 (expr -> INTCONST .)
    GE              reduce using rule 50 (expr -> INTCONST .)
    LT              reduce using rule 50 (expr -> INTCONST .)
    GT              reduce using rule 50 (expr -> INTCONST .)
    EQ              reduce using rule 50 (expr -> INTCONST .)
    NE              reduce using rule 50 (expr -> INTCONST .)
    COLON           reduce using rule 50 (expr -> INTCONST .)
    COMMA           reduce using rule 50 (expr -> INTCONST .)
    SEMICOLON       reduce using rule 50 (expr -> INTCONST .)
    AND             reduce using rule 50 (expr -> INTCONST .)
    OR              reduce using rule 50 (expr -> INTCONST .)
    LBRACE          reduce using rule 50 (expr -> INTCONST .)
    RPAREN          reduce using rule 50 (expr -> INTCONST .)
    RBRACKET        reduce using rule 50 (expr -> INTCONST .)
    ELLIPSIS        reduce using rule 50 (expr -> INTCONST .)


state 48

    (51) expr -> FLOATCONST .

    PLUS            reduce using rule 51 (expr -> FLOATCONST .)
    MINUS           reduce using rule 51 (expr -> FLOATCONST .)
    MUL             reduce using rule 51 (expr -> FLOATCONST .)
    DIV             reduce using rule 51 (expr -> FLOATCONST .)
    MOD             reduce using rule 51 (expr -> FLOATCONST .)
    POW             reduce using rule 51 (expr -> FLOATCONST .)
    LE              reduce using rule 51 (expr -> FLOATCONST .)
    GE              reduce using rule 51 (expr -> FLOATCONST .)
    LT              reduce using rule 51 (expr -> FLOATCONST .)
    GT              reduce using rule 51 (expr -> FLOATCONST .)
    EQ              reduce using rule 51 (expr -> FLOATCONST .)
    NE              reduce using rule 51 (expr -> FLOATCONST .)
    COLON           reduce using rule 51 (expr -> FLOATCONST .)
    COMMA           reduce using rule 51 (expr -> FLOATCONST .)
    SEMICOLON       reduce using rule 51 (expr -> FLOATCONST .)
    AND             reduce using rule 51 (expr -> FLOATCONST .)
    OR              reduce using rule 51 (expr -> FLOATCONST .)
    LBRACE          reduce using rule 51 (expr -> FLOATCONST .)
    RPAREN          reduce using rule 51 (expr -> FLOATCONST .)
    RBRACKET        reduce using rule 51 (expr -> FLOATCONST .)
    ELLIPSIS        reduce using rule 51 (expr -> FLOATCONST .)


state 49

    (52) expr -> STRINGCONST .

    PLUS            reduce using rule 52 (expr -> STRINGCONST .)
    MINUS           reduce using rule 52 (expr -> STRINGCONST .)
    MUL             reduce using rule 52 (expr -> STRINGCONST .)
    DIV             reduce using rule 52 (expr -> STRINGCONST .)
    MOD             reduce using rule 52 (expr -> STRINGCONST .)
    POW             reduce using rule 52 (expr -> STRINGCONST .)
    LE              reduce using rule 52 (expr -> STRINGCONST .)
    GE              reduce using rule 52 (expr -> STRINGCONST .)
    LT              reduce using rule 52 (expr -> STRINGCONST .)
    GT              reduce using rule 52 (expr -> STRINGCONST .)
    EQ              reduce using rule 52 (expr -> STRINGCONST .)
    NE              reduce using rule 52 (expr -> STRINGCONST .)
    COLON           reduce using rule 52 (expr -> STRINGCONST .)
    COMMA           reduce using rule 52 (expr -> STRINGCONST .)
    SEMICOLON       reduce using rule 52 (expr -> STRINGCONST .)
    AND             reduce using rule 52 (expr -> STRINGCONST .)
    OR              reduce using rule 52 (expr -> STRINGCONST .)
    LBRACE          reduce using rule 52 (expr -> STRINGCONST .)
    RPAREN          reduce using rule 52 (expr -> STRINGCONST .)
    RBRACKET        reduce using rule 52 (expr -> STRINGCONST .)
    ELLIPSIS        reduce using rule 52 (expr -> STRINGCONST .)


state 50

    (53) expr -> LBRACKET . expr_list RBRACKET
    (54) expr -> LBRACKET . range RBRACKET
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (92) range -> . expr ELLIPSIS expr
    (93) range -> . expr ELLIPSIS expr COMMA expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RBRACKET        reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 115
    range                          shift and go to state 116
    expr                           shift and go to state 117
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 51

    (58) expr -> TRUE .

    PLUS            reduce using rule 58 (expr -> TRUE .)
    MINUS           reduce using rule 58 (expr -> TRUE .)
    MUL             reduce using rule 58 (expr -> TRUE .)
    DIV             reduce using rule 58 (expr -> TRUE .)
    MOD             reduce using rule 58 (expr -> TRUE .)
    POW             reduce using rule 58 (expr -> TRUE .)
    LE              reduce using rule 58 (expr -> TRUE .)
    GE              reduce using rule 58 (expr -> TRUE .)
    LT              reduce using rule 58 (expr -> TRUE .)
    GT              reduce using rule 58 (expr -> TRUE .)
    EQ              reduce using rule 58 (expr -> TRUE .)
    NE              reduce using rule 58 (expr -> TRUE .)
    COLON           reduce using rule 58 (expr -> TRUE .)
    COMMA           reduce using rule 58 (expr -> TRUE .)
    SEMICOLON       reduce using rule 58 (expr -> TRUE .)
    AND             reduce using rule 58 (expr -> TRUE .)
    OR              reduce using rule 58 (expr -> TRUE .)
    LBRACE          reduce using rule 58 (expr -> TRUE .)
    RPAREN          reduce using rule 58 (expr -> TRUE .)
    RBRACKET        reduce using rule 58 (expr -> TRUE .)
    ELLIPSIS        reduce using rule 58 (expr -> TRUE .)


state 52

    (59) expr -> FALSE .

    PLUS            reduce using rule 59 (expr -> FALSE .)
    MINUS           reduce using rule 59 (expr -> FALSE .)
    MUL             reduce using rule 59 (expr -> FALSE .)
    DIV             reduce using rule 59 (expr -> FALSE .)
    MOD             reduce using rule 59 (expr -> FALSE .)
    POW             reduce using rule 59 (expr -> FALSE .)
    LE              reduce using rule 59 (expr -> FALSE .)
    GE              reduce using rule 59 (expr -> FALSE .)
    LT              reduce using rule 59 (expr -> FALSE .)
    GT              reduce using rule 59 (expr -> FALSE .)
    EQ              reduce using rule 59 (expr -> FALSE .)
    NE              reduce using rule 59 (expr -> FALSE .)
    COLON           reduce using rule 59 (expr -> FALSE .)
    COMMA           reduce using rule 59 (expr -> FALSE .)
    SEMICOLON       reduce using rule 59 (expr -> FALSE .)
    AND             reduce using rule 59 (expr -> FALSE .)
    OR              reduce using rule 59 (expr -> FALSE .)
    LBRACE          reduce using rule 59 (expr -> FALSE .)
    RPAREN          reduce using rule 59 (expr -> FALSE .)
    RBRACKET        reduce using rule 59 (expr -> FALSE .)
    ELLIPSIS        reduce using rule 59 (expr -> FALSE .)


state 53

    (60) expr -> NULL .

    PLUS            reduce using rule 60 (expr -> NULL .)
    MINUS           reduce using rule 60 (expr -> NULL .)
    MUL             reduce using rule 60 (expr -> NULL .)
    DIV             reduce using rule 60 (expr -> NULL .)
    MOD             reduce using rule 60 (expr -> NULL .)
    POW             reduce using rule 60 (expr -> NULL .)
    LE              reduce using rule 60 (expr -> NULL .)
    GE              reduce using rule 60 (expr -> NULL .)
    LT              reduce using rule 60 (expr -> NULL .)
    GT              reduce using rule 60 (expr -> NULL .)
    EQ              reduce using rule 60 (expr -> NULL .)
    NE              reduce using rule 60 (expr -> NULL .)
    COLON           reduce using rule 60 (expr -> NULL .)
    COMMA           reduce using rule 60 (expr -> NULL .)
    SEMICOLON       reduce using rule 60 (expr -> NULL .)
    AND             reduce using rule 60 (expr -> NULL .)
    OR              reduce using rule 60 (expr -> NULL .)
    LBRACE          reduce using rule 60 (expr -> NULL .)
    RPAREN          reduce using rule 60 (expr -> NULL .)
    RBRACKET        reduce using rule 60 (expr -> NULL .)
    ELLIPSIS        reduce using rule 60 (expr -> NULL .)


state 54

    (61) expr -> LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 118
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 55

    (62) expr -> incr_decr .

    PLUS            reduce using rule 62 (expr -> incr_decr .)
    MINUS           reduce using rule 62 (expr -> incr_decr .)
    MUL             reduce using rule 62 (expr -> incr_decr .)
    DIV             reduce using rule 62 (expr -> incr_decr .)
    MOD             reduce using rule 62 (expr -> incr_decr .)
    POW             reduce using rule 62 (expr -> incr_decr .)
    LE              reduce using rule 62 (expr -> incr_decr .)
    GE              reduce using rule 62 (expr -> incr_decr .)
    LT              reduce using rule 62 (expr -> incr_decr .)
    GT              reduce using rule 62 (expr -> incr_decr .)
    EQ              reduce using rule 62 (expr -> incr_decr .)
    NE              reduce using rule 62 (expr -> incr_decr .)
    COLON           reduce using rule 62 (expr -> incr_decr .)
    COMMA           reduce using rule 62 (expr -> incr_decr .)
    SEMICOLON       reduce using rule 62 (expr -> incr_decr .)
    AND             reduce using rule 62 (expr -> incr_decr .)
    OR              reduce using rule 62 (expr -> incr_decr .)
    LBRACE          reduce using rule 62 (expr -> incr_decr .)
    RPAREN          reduce using rule 62 (expr -> incr_decr .)
    RBRACKET        reduce using rule 62 (expr -> incr_decr .)
    ELLIPSIS        reduce using rule 62 (expr -> incr_decr .)


state 56

    (63) expr -> func_call .

    PLUS            reduce using rule 63 (expr -> func_call .)
    MINUS           reduce using rule 63 (expr -> func_call .)
    MUL             reduce using rule 63 (expr -> func_call .)
    DIV             reduce using rule 63 (expr -> func_call .)
    MOD             reduce using rule 63 (expr -> func_call .)
    POW             reduce using rule 63 (expr -> func_call .)
    LE              reduce using rule 63 (expr -> func_call .)
    GE              reduce using rule 63 (expr -> func_call .)
    LT              reduce using rule 63 (expr -> func_call .)
    GT              reduce using rule 63 (expr -> func_call .)
    EQ              reduce using rule 63 (expr -> func_call .)
    NE              reduce using rule 63 (expr -> func_call .)
    COLON           reduce using rule 63 (expr -> func_call .)
    COMMA           reduce using rule 63 (expr -> func_call .)
    SEMICOLON       reduce using rule 63 (expr -> func_call .)
    AND             reduce using rule 63 (expr -> func_call .)
    OR              reduce using rule 63 (expr -> func_call .)
    LBRACE          reduce using rule 63 (expr -> func_call .)
    RPAREN          reduce using rule 63 (expr -> func_call .)
    RBRACKET        reduce using rule 63 (expr -> func_call .)
    ELLIPSIS        reduce using rule 63 (expr -> func_call .)


state 57

    (64) expr -> LEN . LPAREN expr RPAREN

    LPAREN          shift and go to state 119


state 58

    (65) expr -> MIN . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 120


state 59

    (66) expr -> MAX . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 121


state 60

    (67) expr -> INT . LPAREN expr RPAREN

    LPAREN          shift and go to state 122


state 61

    (68) expr -> FLOAT . LPAREN expr RPAREN

    LPAREN          shift and go to state 123


state 62

    (69) expr -> STR . LPAREN expr RPAREN

    LPAREN          shift and go to state 124


state 63

    (70) expr -> LIST . LPAREN expr RPAREN

    LPAREN          shift and go to state 125


state 64

    (71) expr -> TYPE . LPAREN expr RPAREN

    LPAREN          shift and go to state 126


state 65

    (72) expr -> SIN . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 127


state 66

    (73) expr -> COS . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 128


state 67

    (74) expr -> TAN . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 129


state 68

    (75) expr -> ASIN . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 130


state 69

    (76) expr -> ACOS . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 131


state 70

    (77) expr -> ATAN . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 132


state 71

    (78) expr -> SINH . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 133


state 72

    (79) expr -> COSH . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 134


state 73

    (80) expr -> TANH . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 135


state 74

    (81) expr -> INTEGRATE . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 136


state 75

    (82) expr -> DIFF . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 137


state 76

    (84) cond_list -> NOT . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 138
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 77

    (87) if_line -> IF cond_list . LBRACE basic_block RBRACE
    (85) cond_list -> cond_list . AND expr
    (86) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 139
    AND             shift and go to state 109
    OR              shift and go to state 110


state 78

    (83) cond_list -> expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    LBRACE          reduce using rule 83 (cond_list -> expr .)
    AND             reduce using rule 83 (cond_list -> expr .)
    OR              reduce using rule 83 (cond_list -> expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 79

    (89) for_line -> FOR IDENTIFIER . WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> FOR IDENTIFIER . WALRUS RANGE expr LBRACE basic_block RBRACE
    (49) expr -> IDENTIFIER .
    (55) expr -> IDENTIFIER . LBRACKET expr_list RBRACKET
    (47) incr_decr -> IDENTIFIER . PLUSPLUS
    (48) incr_decr -> IDENTIFIER . MINUSMINUS
    (95) func_call -> IDENTIFIER . LPAREN expr_list RPAREN

    WALRUS          shift and go to state 140
    PLUS            reduce using rule 49 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 49 (expr -> IDENTIFIER .)
    MUL             reduce using rule 49 (expr -> IDENTIFIER .)
    DIV             reduce using rule 49 (expr -> IDENTIFIER .)
    MOD             reduce using rule 49 (expr -> IDENTIFIER .)
    POW             reduce using rule 49 (expr -> IDENTIFIER .)
    LE              reduce using rule 49 (expr -> IDENTIFIER .)
    GE              reduce using rule 49 (expr -> IDENTIFIER .)
    LT              reduce using rule 49 (expr -> IDENTIFIER .)
    GT              reduce using rule 49 (expr -> IDENTIFIER .)
    EQ              reduce using rule 49 (expr -> IDENTIFIER .)
    NE              reduce using rule 49 (expr -> IDENTIFIER .)
    COLON           reduce using rule 49 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 49 (expr -> IDENTIFIER .)
    AND             reduce using rule 49 (expr -> IDENTIFIER .)
    OR              reduce using rule 49 (expr -> IDENTIFIER .)
    LBRACKET        shift and go to state 112
    PLUSPLUS        shift and go to state 38
    MINUSMINUS      shift and go to state 39
    LPAREN          shift and go to state 113


state 80

    (91) while_line -> FOR cond_list . LBRACE basic_block RBRACE
    (85) cond_list -> cond_list . AND expr
    (86) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 141
    AND             shift and go to state 109
    OR              shift and go to state 110


state 81

    (94) func_line -> FUNC IDENTIFIER . LPAREN expr_list RPAREN LBRACE basic_block RBRACE

    LPAREN          shift and go to state 142


state 82

    (96) switch_line -> SWITCH LPAREN . expr RPAREN LBRACE case_list RBRACE
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 143
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 83

    (88) else_line -> ELSE LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 144
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 84

    (13) statement -> PRINT LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 145
    COMMA           shift and go to state 95


state 85

    (14) statement -> LET IDENTIFIER EQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 146
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 86

    (16) statement -> IDENTIFIER EQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 16 (statement -> IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 87

    (17) statement -> IDENTIFIER PLUSEQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 17 (statement -> IDENTIFIER PLUSEQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 88

    (18) statement -> IDENTIFIER MINUSEQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 18 (statement -> IDENTIFIER MINUSEQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 89

    (19) statement -> IDENTIFIER MULEQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 19 (statement -> IDENTIFIER MULEQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 90

    (20) statement -> IDENTIFIER DIVEQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 20 (statement -> IDENTIFIER DIVEQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 91

    (21) statement -> IDENTIFIER MODEQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 21 (statement -> IDENTIFIER MODEQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 92

    (22) statement -> IDENTIFIER POWEQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 22 (statement -> IDENTIFIER POWEQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 93

    (24) statement -> IDENTIFIER LBRACKET expr_list . RBRACKET EQUALS expr
    (31) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 147
    COMMA           shift and go to state 95


state 94

    (26) statement -> IDENTIFIER LPAREN expr_list . RPAREN EQUALS expr
    (95) func_call -> IDENTIFIER LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 148
    COMMA           shift and go to state 95


state 95

    (31) expr_list -> expr_list COMMA . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 149
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 96

    (34) expr -> expr PLUS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 150
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 97

    (35) expr -> expr MINUS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 151
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 98

    (36) expr -> expr MUL . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 152
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 99

    (37) expr -> expr DIV . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 153
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 100

    (38) expr -> expr MOD . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 154
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 101

    (39) expr -> expr POW . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 155
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 102

    (40) expr -> expr LE . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 156
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 103

    (41) expr -> expr GE . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 157
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 104

    (42) expr -> expr LT . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 158
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 105

    (43) expr -> expr GT . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 159
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 106

    (44) expr -> expr EQ . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 160
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 107

    (45) expr -> expr NE . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 161
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 108

    (56) expr -> expr COLON . expr
    (57) expr -> expr COLON . expr COLON expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 162
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 109

    (85) cond_list -> cond_list AND . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 163
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 110

    (86) cond_list -> cond_list OR . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 164
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 111

    (33) expr -> LET IDENTIFIER .

    PLUS            reduce using rule 33 (expr -> LET IDENTIFIER .)
    MINUS           reduce using rule 33 (expr -> LET IDENTIFIER .)
    MUL             reduce using rule 33 (expr -> LET IDENTIFIER .)
    DIV             reduce using rule 33 (expr -> LET IDENTIFIER .)
    MOD             reduce using rule 33 (expr -> LET IDENTIFIER .)
    POW             reduce using rule 33 (expr -> LET IDENTIFIER .)
    LE              reduce using rule 33 (expr -> LET IDENTIFIER .)
    GE              reduce using rule 33 (expr -> LET IDENTIFIER .)
    LT              reduce using rule 33 (expr -> LET IDENTIFIER .)
    GT              reduce using rule 33 (expr -> LET IDENTIFIER .)
    EQ              reduce using rule 33 (expr -> LET IDENTIFIER .)
    NE              reduce using rule 33 (expr -> LET IDENTIFIER .)
    COLON           reduce using rule 33 (expr -> LET IDENTIFIER .)
    COMMA           reduce using rule 33 (expr -> LET IDENTIFIER .)
    SEMICOLON       reduce using rule 33 (expr -> LET IDENTIFIER .)
    AND             reduce using rule 33 (expr -> LET IDENTIFIER .)
    OR              reduce using rule 33 (expr -> LET IDENTIFIER .)
    LBRACE          reduce using rule 33 (expr -> LET IDENTIFIER .)
    RPAREN          reduce using rule 33 (expr -> LET IDENTIFIER .)
    RBRACKET        reduce using rule 33 (expr -> LET IDENTIFIER .)
    ELLIPSIS        reduce using rule 33 (expr -> LET IDENTIFIER .)


state 112

    (55) expr -> IDENTIFIER LBRACKET . expr_list RBRACKET
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RBRACKET        reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 165
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 113

    (95) func_call -> IDENTIFIER LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 166
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 114

    (46) expr -> MINUS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 46 (expr -> MINUS expr .)
    MINUS           reduce using rule 46 (expr -> MINUS expr .)
    MUL             reduce using rule 46 (expr -> MINUS expr .)
    DIV             reduce using rule 46 (expr -> MINUS expr .)
    MOD             reduce using rule 46 (expr -> MINUS expr .)
    POW             reduce using rule 46 (expr -> MINUS expr .)
    LE              reduce using rule 46 (expr -> MINUS expr .)
    GE              reduce using rule 46 (expr -> MINUS expr .)
    LT              reduce using rule 46 (expr -> MINUS expr .)
    GT              reduce using rule 46 (expr -> MINUS expr .)
    EQ              reduce using rule 46 (expr -> MINUS expr .)
    NE              reduce using rule 46 (expr -> MINUS expr .)
    COLON           reduce using rule 46 (expr -> MINUS expr .)
    COMMA           reduce using rule 46 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 46 (expr -> MINUS expr .)
    AND             reduce using rule 46 (expr -> MINUS expr .)
    OR              reduce using rule 46 (expr -> MINUS expr .)
    LBRACE          reduce using rule 46 (expr -> MINUS expr .)
    RPAREN          reduce using rule 46 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 46 (expr -> MINUS expr .)
    ELLIPSIS        reduce using rule 46 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! MUL             [ shift and go to state 98 ]
  ! DIV             [ shift and go to state 99 ]
  ! MOD             [ shift and go to state 100 ]
  ! POW             [ shift and go to state 101 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 115

    (53) expr -> LBRACKET expr_list . RBRACKET
    (31) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 167
    COMMA           shift and go to state 95


state 116

    (54) expr -> LBRACKET range . RBRACKET

    RBRACKET        shift and go to state 168


state 117

    (29) expr_list -> expr .
    (92) range -> expr . ELLIPSIS expr
    (93) range -> expr . ELLIPSIS expr COMMA expr
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr
    (83) cond_list -> expr .

  ! reduce/reduce conflict for RBRACKET resolved using rule 29 (expr_list -> expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (expr_list -> expr .)
    RBRACKET        reduce using rule 29 (expr_list -> expr .)
    COMMA           reduce using rule 29 (expr_list -> expr .)
    ELLIPSIS        shift and go to state 169
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108
    AND             reduce using rule 83 (cond_list -> expr .)
    OR              reduce using rule 83 (cond_list -> expr .)

  ! RBRACKET        [ reduce using rule 83 (cond_list -> expr .) ]
  ! COMMA           [ reduce using rule 83 (cond_list -> expr .) ]


state 118

    (61) expr -> LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 170
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 119

    (64) expr -> LEN LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 171
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 120

    (65) expr -> MIN LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 172
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 121

    (66) expr -> MAX LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 173
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 122

    (67) expr -> INT LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 174
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 123

    (68) expr -> FLOAT LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 175
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 124

    (69) expr -> STR LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 176
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 125

    (70) expr -> LIST LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 177
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 126

    (71) expr -> TYPE LPAREN . expr RPAREN
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 178
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 127

    (72) expr -> SIN LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 179
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 128

    (73) expr -> COS LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 180
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 129

    (74) expr -> TAN LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 181
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 130

    (75) expr -> ASIN LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 182
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 131

    (76) expr -> ACOS LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 183
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 132

    (77) expr -> ATAN LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 184
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 133

    (78) expr -> SINH LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 185
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 134

    (79) expr -> COSH LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 186
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 135

    (80) expr -> TANH LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 187
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 136

    (81) expr -> INTEGRATE LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 188
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 137

    (82) expr -> DIFF LPAREN . expr_list RPAREN
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 189
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 138

    (84) cond_list -> NOT expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    AND             reduce using rule 84 (cond_list -> NOT expr .)
    OR              reduce using rule 84 (cond_list -> NOT expr .)
    COMMA           reduce using rule 84 (cond_list -> NOT expr .)
    SEMICOLON       reduce using rule 84 (cond_list -> NOT expr .)
    LBRACE          reduce using rule 84 (cond_list -> NOT expr .)
    RPAREN          reduce using rule 84 (cond_list -> NOT expr .)
    RBRACKET        reduce using rule 84 (cond_list -> NOT expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 139

    (87) if_line -> IF cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 190
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 140

    (89) for_line -> FOR IDENTIFIER WALRUS . RANGE range LBRACE basic_block RBRACE
    (90) for_line -> FOR IDENTIFIER WALRUS . RANGE expr LBRACE basic_block RBRACE

    RANGE           shift and go to state 191


state 141

    (91) while_line -> FOR cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 192
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 142

    (94) func_line -> FUNC IDENTIFIER LPAREN . expr_list RPAREN LBRACE basic_block RBRACE
    (29) expr_list -> . expr
    (30) expr_list -> . cond_list
    (31) expr_list -> . expr_list COMMA expr
    (32) expr_list -> . empty
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (83) cond_list -> . expr
    (84) cond_list -> . NOT expr
    (85) cond_list -> . cond_list AND expr
    (86) cond_list -> . cond_list OR expr
    (101) empty -> .
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75
    NOT             shift and go to state 76
    RPAREN          reduce using rule 101 (empty -> .)
    COMMA           reduce using rule 101 (empty -> .)

    expr_list                      shift and go to state 193
    expr                           shift and go to state 41
    cond_list                      shift and go to state 42
    empty                          shift and go to state 43
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 143

    (96) switch_line -> SWITCH LPAREN expr . RPAREN LBRACE case_list RBRACE
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 194
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 144

    (88) else_line -> ELSE LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 195
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 145

    (13) statement -> PRINT LPAREN expr_list RPAREN .

    SEMICOLON       reduce using rule 13 (statement -> PRINT LPAREN expr_list RPAREN .)


state 146

    (14) statement -> LET IDENTIFIER EQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 14 (statement -> LET IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 147

    (24) statement -> IDENTIFIER LBRACKET expr_list RBRACKET . EQUALS expr

    EQUALS          shift and go to state 196


state 148

    (26) statement -> IDENTIFIER LPAREN expr_list RPAREN . EQUALS expr
    (95) func_call -> IDENTIFIER LPAREN expr_list RPAREN .

    EQUALS          shift and go to state 197
    SEMICOLON       reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)


state 149

    (31) expr_list -> expr_list COMMA expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    COMMA           reduce using rule 31 (expr_list -> expr_list COMMA expr .)
    SEMICOLON       reduce using rule 31 (expr_list -> expr_list COMMA expr .)
    RPAREN          reduce using rule 31 (expr_list -> expr_list COMMA expr .)
    RBRACKET        reduce using rule 31 (expr_list -> expr_list COMMA expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 150

    (34) expr -> expr PLUS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 34 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 34 (expr -> expr PLUS expr .)
    LE              reduce using rule 34 (expr -> expr PLUS expr .)
    GE              reduce using rule 34 (expr -> expr PLUS expr .)
    LT              reduce using rule 34 (expr -> expr PLUS expr .)
    GT              reduce using rule 34 (expr -> expr PLUS expr .)
    EQ              reduce using rule 34 (expr -> expr PLUS expr .)
    NE              reduce using rule 34 (expr -> expr PLUS expr .)
    COLON           reduce using rule 34 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 34 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr PLUS expr .)
    AND             reduce using rule 34 (expr -> expr PLUS expr .)
    OR              reduce using rule 34 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 34 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 34 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 34 (expr -> expr PLUS expr .)
    ELLIPSIS        reduce using rule 34 (expr -> expr PLUS expr .)
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101

  ! MUL             [ reduce using rule 34 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 34 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 34 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 151

    (35) expr -> expr MINUS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 35 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 35 (expr -> expr MINUS expr .)
    LE              reduce using rule 35 (expr -> expr MINUS expr .)
    GE              reduce using rule 35 (expr -> expr MINUS expr .)
    LT              reduce using rule 35 (expr -> expr MINUS expr .)
    GT              reduce using rule 35 (expr -> expr MINUS expr .)
    EQ              reduce using rule 35 (expr -> expr MINUS expr .)
    NE              reduce using rule 35 (expr -> expr MINUS expr .)
    COLON           reduce using rule 35 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 35 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr MINUS expr .)
    AND             reduce using rule 35 (expr -> expr MINUS expr .)
    OR              reduce using rule 35 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 35 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 35 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 35 (expr -> expr MINUS expr .)
    ELLIPSIS        reduce using rule 35 (expr -> expr MINUS expr .)
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101

  ! MUL             [ reduce using rule 35 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 35 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 35 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 152

    (36) expr -> expr MUL expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 36 (expr -> expr MUL expr .)
    MINUS           reduce using rule 36 (expr -> expr MUL expr .)
    MUL             reduce using rule 36 (expr -> expr MUL expr .)
    DIV             reduce using rule 36 (expr -> expr MUL expr .)
    MOD             reduce using rule 36 (expr -> expr MUL expr .)
    LE              reduce using rule 36 (expr -> expr MUL expr .)
    GE              reduce using rule 36 (expr -> expr MUL expr .)
    LT              reduce using rule 36 (expr -> expr MUL expr .)
    GT              reduce using rule 36 (expr -> expr MUL expr .)
    EQ              reduce using rule 36 (expr -> expr MUL expr .)
    NE              reduce using rule 36 (expr -> expr MUL expr .)
    COLON           reduce using rule 36 (expr -> expr MUL expr .)
    COMMA           reduce using rule 36 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr MUL expr .)
    AND             reduce using rule 36 (expr -> expr MUL expr .)
    OR              reduce using rule 36 (expr -> expr MUL expr .)
    LBRACE          reduce using rule 36 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 36 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 36 (expr -> expr MUL expr .)
    ELLIPSIS        reduce using rule 36 (expr -> expr MUL expr .)
    POW             shift and go to state 101

  ! POW             [ reduce using rule 36 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! MUL             [ shift and go to state 98 ]
  ! DIV             [ shift and go to state 99 ]
  ! MOD             [ shift and go to state 100 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 153

    (37) expr -> expr DIV expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 37 (expr -> expr DIV expr .)
    MINUS           reduce using rule 37 (expr -> expr DIV expr .)
    MUL             reduce using rule 37 (expr -> expr DIV expr .)
    DIV             reduce using rule 37 (expr -> expr DIV expr .)
    MOD             reduce using rule 37 (expr -> expr DIV expr .)
    LE              reduce using rule 37 (expr -> expr DIV expr .)
    GE              reduce using rule 37 (expr -> expr DIV expr .)
    LT              reduce using rule 37 (expr -> expr DIV expr .)
    GT              reduce using rule 37 (expr -> expr DIV expr .)
    EQ              reduce using rule 37 (expr -> expr DIV expr .)
    NE              reduce using rule 37 (expr -> expr DIV expr .)
    COLON           reduce using rule 37 (expr -> expr DIV expr .)
    COMMA           reduce using rule 37 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr DIV expr .)
    AND             reduce using rule 37 (expr -> expr DIV expr .)
    OR              reduce using rule 37 (expr -> expr DIV expr .)
    LBRACE          reduce using rule 37 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 37 (expr -> expr DIV expr .)
    RBRACKET        reduce using rule 37 (expr -> expr DIV expr .)
    ELLIPSIS        reduce using rule 37 (expr -> expr DIV expr .)
    POW             shift and go to state 101

  ! POW             [ reduce using rule 37 (expr -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! MUL             [ shift and go to state 98 ]
  ! DIV             [ shift and go to state 99 ]
  ! MOD             [ shift and go to state 100 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 154

    (38) expr -> expr MOD expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 38 (expr -> expr MOD expr .)
    MINUS           reduce using rule 38 (expr -> expr MOD expr .)
    MUL             reduce using rule 38 (expr -> expr MOD expr .)
    DIV             reduce using rule 38 (expr -> expr MOD expr .)
    MOD             reduce using rule 38 (expr -> expr MOD expr .)
    LE              reduce using rule 38 (expr -> expr MOD expr .)
    GE              reduce using rule 38 (expr -> expr MOD expr .)
    LT              reduce using rule 38 (expr -> expr MOD expr .)
    GT              reduce using rule 38 (expr -> expr MOD expr .)
    EQ              reduce using rule 38 (expr -> expr MOD expr .)
    NE              reduce using rule 38 (expr -> expr MOD expr .)
    COLON           reduce using rule 38 (expr -> expr MOD expr .)
    COMMA           reduce using rule 38 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr MOD expr .)
    AND             reduce using rule 38 (expr -> expr MOD expr .)
    OR              reduce using rule 38 (expr -> expr MOD expr .)
    LBRACE          reduce using rule 38 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 38 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 38 (expr -> expr MOD expr .)
    ELLIPSIS        reduce using rule 38 (expr -> expr MOD expr .)
    POW             shift and go to state 101

  ! POW             [ reduce using rule 38 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! MUL             [ shift and go to state 98 ]
  ! DIV             [ shift and go to state 99 ]
  ! MOD             [ shift and go to state 100 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 155

    (39) expr -> expr POW expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    PLUS            reduce using rule 39 (expr -> expr POW expr .)
    MINUS           reduce using rule 39 (expr -> expr POW expr .)
    MUL             reduce using rule 39 (expr -> expr POW expr .)
    DIV             reduce using rule 39 (expr -> expr POW expr .)
    MOD             reduce using rule 39 (expr -> expr POW expr .)
    LE              reduce using rule 39 (expr -> expr POW expr .)
    GE              reduce using rule 39 (expr -> expr POW expr .)
    LT              reduce using rule 39 (expr -> expr POW expr .)
    GT              reduce using rule 39 (expr -> expr POW expr .)
    EQ              reduce using rule 39 (expr -> expr POW expr .)
    NE              reduce using rule 39 (expr -> expr POW expr .)
    COLON           reduce using rule 39 (expr -> expr POW expr .)
    COMMA           reduce using rule 39 (expr -> expr POW expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr POW expr .)
    AND             reduce using rule 39 (expr -> expr POW expr .)
    OR              reduce using rule 39 (expr -> expr POW expr .)
    LBRACE          reduce using rule 39 (expr -> expr POW expr .)
    RPAREN          reduce using rule 39 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 39 (expr -> expr POW expr .)
    ELLIPSIS        reduce using rule 39 (expr -> expr POW expr .)
    POW             shift and go to state 101

  ! POW             [ reduce using rule 39 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 96 ]
  ! MINUS           [ shift and go to state 97 ]
  ! MUL             [ shift and go to state 98 ]
  ! DIV             [ shift and go to state 99 ]
  ! MOD             [ shift and go to state 100 ]
  ! LE              [ shift and go to state 102 ]
  ! GE              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! COLON           [ shift and go to state 108 ]


state 156

    (40) expr -> expr LE expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 40 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr LE expr .)
    AND             reduce using rule 40 (expr -> expr LE expr .)
    OR              reduce using rule 40 (expr -> expr LE expr .)
    LBRACE          reduce using rule 40 (expr -> expr LE expr .)
    RPAREN          reduce using rule 40 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 40 (expr -> expr LE expr .)
    ELLIPSIS        reduce using rule 40 (expr -> expr LE expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108

  ! PLUS            [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 40 (expr -> expr LE expr .) ]
  ! COLON           [ reduce using rule 40 (expr -> expr LE expr .) ]


state 157

    (41) expr -> expr GE expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 41 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr GE expr .)
    AND             reduce using rule 41 (expr -> expr GE expr .)
    OR              reduce using rule 41 (expr -> expr GE expr .)
    LBRACE          reduce using rule 41 (expr -> expr GE expr .)
    RPAREN          reduce using rule 41 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 41 (expr -> expr GE expr .)
    ELLIPSIS        reduce using rule 41 (expr -> expr GE expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108

  ! PLUS            [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 41 (expr -> expr GE expr .) ]
  ! COLON           [ reduce using rule 41 (expr -> expr GE expr .) ]


state 158

    (42) expr -> expr LT expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 42 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr LT expr .)
    AND             reduce using rule 42 (expr -> expr LT expr .)
    OR              reduce using rule 42 (expr -> expr LT expr .)
    LBRACE          reduce using rule 42 (expr -> expr LT expr .)
    RPAREN          reduce using rule 42 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 42 (expr -> expr LT expr .)
    ELLIPSIS        reduce using rule 42 (expr -> expr LT expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108

  ! PLUS            [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 42 (expr -> expr LT expr .) ]
  ! COLON           [ reduce using rule 42 (expr -> expr LT expr .) ]


state 159

    (43) expr -> expr GT expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 43 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 43 (expr -> expr GT expr .)
    AND             reduce using rule 43 (expr -> expr GT expr .)
    OR              reduce using rule 43 (expr -> expr GT expr .)
    LBRACE          reduce using rule 43 (expr -> expr GT expr .)
    RPAREN          reduce using rule 43 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 43 (expr -> expr GT expr .)
    ELLIPSIS        reduce using rule 43 (expr -> expr GT expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108

  ! PLUS            [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 43 (expr -> expr GT expr .) ]
  ! COLON           [ reduce using rule 43 (expr -> expr GT expr .) ]


state 160

    (44) expr -> expr EQ expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 44 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 44 (expr -> expr EQ expr .)
    AND             reduce using rule 44 (expr -> expr EQ expr .)
    OR              reduce using rule 44 (expr -> expr EQ expr .)
    LBRACE          reduce using rule 44 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 44 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 44 (expr -> expr EQ expr .)
    ELLIPSIS        reduce using rule 44 (expr -> expr EQ expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108

  ! PLUS            [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 44 (expr -> expr EQ expr .) ]
  ! COLON           [ reduce using rule 44 (expr -> expr EQ expr .) ]


state 161

    (45) expr -> expr NE expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 45 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 45 (expr -> expr NE expr .)
    AND             reduce using rule 45 (expr -> expr NE expr .)
    OR              reduce using rule 45 (expr -> expr NE expr .)
    LBRACE          reduce using rule 45 (expr -> expr NE expr .)
    RPAREN          reduce using rule 45 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 45 (expr -> expr NE expr .)
    ELLIPSIS        reduce using rule 45 (expr -> expr NE expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108

  ! PLUS            [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 45 (expr -> expr NE expr .) ]
  ! COLON           [ reduce using rule 45 (expr -> expr NE expr .) ]


state 162

    (56) expr -> expr COLON expr .
    (57) expr -> expr COLON expr . COLON expr
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 56 (expr -> expr COLON expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr COLON expr .)
    AND             reduce using rule 56 (expr -> expr COLON expr .)
    OR              reduce using rule 56 (expr -> expr COLON expr .)
    LBRACE          reduce using rule 56 (expr -> expr COLON expr .)
    RPAREN          reduce using rule 56 (expr -> expr COLON expr .)
    RBRACKET        reduce using rule 56 (expr -> expr COLON expr .)
    ELLIPSIS        reduce using rule 56 (expr -> expr COLON expr .)
    COLON           shift and go to state 198
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107

  ! PLUS            [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! MUL             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! POW             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! LE              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! GE              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! LT              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! GT              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! EQ              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! NE              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! COLON           [ reduce using rule 56 (expr -> expr COLON expr .) ]


state 163

    (85) cond_list -> cond_list AND expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    AND             reduce using rule 85 (cond_list -> cond_list AND expr .)
    OR              reduce using rule 85 (cond_list -> cond_list AND expr .)
    COMMA           reduce using rule 85 (cond_list -> cond_list AND expr .)
    SEMICOLON       reduce using rule 85 (cond_list -> cond_list AND expr .)
    LBRACE          reduce using rule 85 (cond_list -> cond_list AND expr .)
    RPAREN          reduce using rule 85 (cond_list -> cond_list AND expr .)
    RBRACKET        reduce using rule 85 (cond_list -> cond_list AND expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 164

    (86) cond_list -> cond_list OR expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    AND             reduce using rule 86 (cond_list -> cond_list OR expr .)
    OR              reduce using rule 86 (cond_list -> cond_list OR expr .)
    COMMA           reduce using rule 86 (cond_list -> cond_list OR expr .)
    SEMICOLON       reduce using rule 86 (cond_list -> cond_list OR expr .)
    LBRACE          reduce using rule 86 (cond_list -> cond_list OR expr .)
    RPAREN          reduce using rule 86 (cond_list -> cond_list OR expr .)
    RBRACKET        reduce using rule 86 (cond_list -> cond_list OR expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 165

    (55) expr -> IDENTIFIER LBRACKET expr_list . RBRACKET
    (31) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 199
    COMMA           shift and go to state 95


state 166

    (95) func_call -> IDENTIFIER LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 200
    COMMA           shift and go to state 95


state 167

    (53) expr -> LBRACKET expr_list RBRACKET .

    PLUS            reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    SEMICOLON       reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)
    ELLIPSIS        reduce using rule 53 (expr -> LBRACKET expr_list RBRACKET .)


state 168

    (54) expr -> LBRACKET range RBRACKET .

    PLUS            reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    MINUS           reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    MUL             reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    DIV             reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    MOD             reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    POW             reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    LE              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    GE              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    LT              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    GT              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    EQ              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    NE              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    COLON           reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    COMMA           reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    SEMICOLON       reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    AND             reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    OR              reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    LBRACE          reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    RPAREN          reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    RBRACKET        reduce using rule 54 (expr -> LBRACKET range RBRACKET .)
    ELLIPSIS        reduce using rule 54 (expr -> LBRACKET range RBRACKET .)


state 169

    (92) range -> expr ELLIPSIS . expr
    (93) range -> expr ELLIPSIS . expr COMMA expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 201
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 170

    (61) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 61 (expr -> LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 61 (expr -> LPAREN expr RPAREN .)


state 171

    (64) expr -> LEN LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 202
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 172

    (65) expr -> MIN LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 203
    COMMA           shift and go to state 95


state 173

    (66) expr -> MAX LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 95


state 174

    (67) expr -> INT LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 205
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 175

    (68) expr -> FLOAT LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 206
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 176

    (69) expr -> STR LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 207
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 177

    (70) expr -> LIST LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 208
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 178

    (71) expr -> TYPE LPAREN expr . RPAREN
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RPAREN          shift and go to state 209
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 179

    (72) expr -> SIN LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 210
    COMMA           shift and go to state 95


state 180

    (73) expr -> COS LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 211
    COMMA           shift and go to state 95


state 181

    (74) expr -> TAN LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 212
    COMMA           shift and go to state 95


state 182

    (75) expr -> ASIN LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 213
    COMMA           shift and go to state 95


state 183

    (76) expr -> ACOS LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 214
    COMMA           shift and go to state 95


state 184

    (77) expr -> ATAN LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 215
    COMMA           shift and go to state 95


state 185

    (78) expr -> SINH LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 216
    COMMA           shift and go to state 95


state 186

    (79) expr -> COSH LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 95


state 187

    (80) expr -> TANH LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 218
    COMMA           shift and go to state 95


state 188

    (81) expr -> INTEGRATE LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 219
    COMMA           shift and go to state 95


state 189

    (82) expr -> DIFF LPAREN expr_list . RPAREN
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 220
    COMMA           shift and go to state 95


state 190

    (87) if_line -> IF cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 221
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 191

    (89) for_line -> FOR IDENTIFIER WALRUS RANGE . range LBRACE basic_block RBRACE
    (90) for_line -> FOR IDENTIFIER WALRUS RANGE . expr LBRACE basic_block RBRACE
    (92) range -> . expr ELLIPSIS expr
    (93) range -> . expr ELLIPSIS expr COMMA expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    range                          shift and go to state 222
    expr                           shift and go to state 223
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 192

    (91) while_line -> FOR cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 224
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 193

    (94) func_line -> FUNC IDENTIFIER LPAREN expr_list . RPAREN LBRACE basic_block RBRACE
    (31) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 225
    COMMA           shift and go to state 95


state 194

    (96) switch_line -> SWITCH LPAREN expr RPAREN . LBRACE case_list RBRACE

    LBRACE          shift and go to state 226


state 195

    (88) else_line -> ELSE LBRACE basic_block RBRACE .

    PRINT           reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    LET             reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    BREAK           reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IF              reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FOR             reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    SWITCH          reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    $end            reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 88 (else_line -> ELSE LBRACE basic_block RBRACE .)


state 196

    (24) statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 227
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 197

    (26) statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 228
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 198

    (57) expr -> expr COLON expr COLON . expr
    (56) expr -> expr COLON . expr
    (57) expr -> expr COLON . expr COLON expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 229
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 199

    (55) expr -> IDENTIFIER LBRACKET expr_list RBRACKET .

    PLUS            reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    SEMICOLON       reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    ELLIPSIS        reduce using rule 55 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)


state 200

    (95) func_call -> IDENTIFIER LPAREN expr_list RPAREN .

    PLUS            reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    MUL             reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    DIV             reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    MOD             reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    POW             reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    LE              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    GE              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    LT              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    GT              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    EQ              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    NE              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    COLON           reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    AND             reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    OR              reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 95 (func_call -> IDENTIFIER LPAREN expr_list RPAREN .)


state 201

    (92) range -> expr ELLIPSIS expr .
    (93) range -> expr ELLIPSIS expr . COMMA expr
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RBRACKET        reduce using rule 92 (range -> expr ELLIPSIS expr .)
    LBRACE          reduce using rule 92 (range -> expr ELLIPSIS expr .)
    COMMA           shift and go to state 230
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 202

    (64) expr -> LEN LPAREN expr RPAREN .

    PLUS            reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    MINUS           reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    MUL             reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    DIV             reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    MOD             reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    POW             reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    LE              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    GE              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    LT              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    GT              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    EQ              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    NE              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    COLON           reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    COMMA           reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    AND             reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    OR              reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    LBRACE          reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    RPAREN          reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 64 (expr -> LEN LPAREN expr RPAREN .)


state 203

    (65) expr -> MIN LPAREN expr_list RPAREN .

    PLUS            reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    MUL             reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    DIV             reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    MOD             reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    POW             reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    LE              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    GE              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    LT              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    GT              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    EQ              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    NE              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    COLON           reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    AND             reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    OR              reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 65 (expr -> MIN LPAREN expr_list RPAREN .)


state 204

    (66) expr -> MAX LPAREN expr_list RPAREN .

    PLUS            reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    MUL             reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    DIV             reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    MOD             reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    POW             reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    LE              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    GE              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    LT              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    GT              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    EQ              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    NE              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    COLON           reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    AND             reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    OR              reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 66 (expr -> MAX LPAREN expr_list RPAREN .)


state 205

    (67) expr -> INT LPAREN expr RPAREN .

    PLUS            reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    MINUS           reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    MUL             reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    DIV             reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    MOD             reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    POW             reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    LE              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    GE              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    LT              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    GT              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    EQ              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    NE              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    COLON           reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    COMMA           reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    AND             reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    OR              reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    LBRACE          reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    RPAREN          reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 67 (expr -> INT LPAREN expr RPAREN .)


state 206

    (68) expr -> FLOAT LPAREN expr RPAREN .

    PLUS            reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    MINUS           reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    MUL             reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    DIV             reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    MOD             reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    POW             reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    LE              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    GE              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    LT              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    GT              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    EQ              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    NE              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    COLON           reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    COMMA           reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    AND             reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    OR              reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    LBRACE          reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    RPAREN          reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 68 (expr -> FLOAT LPAREN expr RPAREN .)


state 207

    (69) expr -> STR LPAREN expr RPAREN .

    PLUS            reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    MINUS           reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    MUL             reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    DIV             reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    MOD             reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    POW             reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    LE              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    GE              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    LT              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    GT              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    EQ              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    NE              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    COLON           reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    COMMA           reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    AND             reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    OR              reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    LBRACE          reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    RPAREN          reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 69 (expr -> STR LPAREN expr RPAREN .)


state 208

    (70) expr -> LIST LPAREN expr RPAREN .

    PLUS            reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    MINUS           reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    MUL             reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    DIV             reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    MOD             reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    POW             reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    LE              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    GE              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    LT              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    GT              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    EQ              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    NE              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    COLON           reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    COMMA           reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    AND             reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    OR              reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    LBRACE          reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    RPAREN          reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 70 (expr -> LIST LPAREN expr RPAREN .)


state 209

    (71) expr -> TYPE LPAREN expr RPAREN .

    PLUS            reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    MINUS           reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    MUL             reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    DIV             reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    MOD             reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    POW             reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    LE              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    GE              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    LT              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    GT              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    EQ              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    NE              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    COLON           reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    COMMA           reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    AND             reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    OR              reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    LBRACE          reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    RPAREN          reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 71 (expr -> TYPE LPAREN expr RPAREN .)


state 210

    (72) expr -> SIN LPAREN expr_list RPAREN .

    PLUS            reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    MUL             reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    DIV             reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    MOD             reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    POW             reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    LE              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    GE              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    LT              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    GT              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    EQ              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    NE              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    COLON           reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    AND             reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    OR              reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 72 (expr -> SIN LPAREN expr_list RPAREN .)


state 211

    (73) expr -> COS LPAREN expr_list RPAREN .

    PLUS            reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    MUL             reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    DIV             reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    MOD             reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    POW             reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    LE              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    GE              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    LT              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    GT              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    EQ              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    NE              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    COLON           reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    AND             reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    OR              reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 73 (expr -> COS LPAREN expr_list RPAREN .)


state 212

    (74) expr -> TAN LPAREN expr_list RPAREN .

    PLUS            reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    MUL             reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    DIV             reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    MOD             reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    POW             reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    LE              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    GE              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    LT              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    GT              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    EQ              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    NE              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    COLON           reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    AND             reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    OR              reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 74 (expr -> TAN LPAREN expr_list RPAREN .)


state 213

    (75) expr -> ASIN LPAREN expr_list RPAREN .

    PLUS            reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    MUL             reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    DIV             reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    MOD             reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    POW             reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    LE              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    GE              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    LT              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    GT              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    EQ              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    NE              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    COLON           reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    AND             reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    OR              reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 75 (expr -> ASIN LPAREN expr_list RPAREN .)


state 214

    (76) expr -> ACOS LPAREN expr_list RPAREN .

    PLUS            reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    MUL             reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    DIV             reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    MOD             reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    POW             reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    LE              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    GE              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    LT              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    GT              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    EQ              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    NE              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    COLON           reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    AND             reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    OR              reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 76 (expr -> ACOS LPAREN expr_list RPAREN .)


state 215

    (77) expr -> ATAN LPAREN expr_list RPAREN .

    PLUS            reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    MUL             reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    DIV             reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    MOD             reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    POW             reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    LE              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    GE              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    LT              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    GT              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    EQ              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    NE              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    COLON           reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    AND             reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    OR              reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 77 (expr -> ATAN LPAREN expr_list RPAREN .)


state 216

    (78) expr -> SINH LPAREN expr_list RPAREN .

    PLUS            reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    MUL             reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    DIV             reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    MOD             reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    POW             reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    LE              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    GE              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    LT              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    GT              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    EQ              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    NE              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    COLON           reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    AND             reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    OR              reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 78 (expr -> SINH LPAREN expr_list RPAREN .)


state 217

    (79) expr -> COSH LPAREN expr_list RPAREN .

    PLUS            reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    MUL             reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    DIV             reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    MOD             reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    POW             reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    LE              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    GE              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    LT              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    GT              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    EQ              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    NE              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    COLON           reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    AND             reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    OR              reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 79 (expr -> COSH LPAREN expr_list RPAREN .)


state 218

    (80) expr -> TANH LPAREN expr_list RPAREN .

    PLUS            reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    MUL             reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    DIV             reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    MOD             reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    POW             reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    LE              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    GE              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    LT              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    GT              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    EQ              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    NE              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    COLON           reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    AND             reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    OR              reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 80 (expr -> TANH LPAREN expr_list RPAREN .)


state 219

    (81) expr -> INTEGRATE LPAREN expr_list RPAREN .

    PLUS            reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    MUL             reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    DIV             reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    MOD             reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    POW             reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    LE              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    GE              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    LT              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    GT              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    EQ              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    NE              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    COLON           reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    AND             reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    OR              reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 81 (expr -> INTEGRATE LPAREN expr_list RPAREN .)


state 220

    (82) expr -> DIFF LPAREN expr_list RPAREN .

    PLUS            reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    MUL             reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    DIV             reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    MOD             reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    POW             reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    LE              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    GE              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    LT              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    GT              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    EQ              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    NE              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    COLON           reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    AND             reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    OR              reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)
    ELLIPSIS        reduce using rule 82 (expr -> DIFF LPAREN expr_list RPAREN .)


state 221

    (87) if_line -> IF cond_list LBRACE basic_block RBRACE .

    ELSE            reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    PRINT           reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    BREAK           reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    SWITCH          reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 87 (if_line -> IF cond_list LBRACE basic_block RBRACE .)


state 222

    (89) for_line -> FOR IDENTIFIER WALRUS RANGE range . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 231


state 223

    (90) for_line -> FOR IDENTIFIER WALRUS RANGE expr . LBRACE basic_block RBRACE
    (92) range -> expr . ELLIPSIS expr
    (93) range -> expr . ELLIPSIS expr COMMA expr
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    LBRACE          shift and go to state 232
    ELLIPSIS        shift and go to state 169
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 224

    (91) while_line -> FOR cond_list LBRACE basic_block RBRACE .

    PRINT           reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    BREAK           reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    SWITCH          reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 91 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)


state 225

    (94) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 233


state 226

    (96) switch_line -> SWITCH LPAREN expr RPAREN LBRACE . case_list RBRACE
    (97) case_list -> . case_block
    (98) case_list -> . case_list case_block
    (99) case_block -> . CASE expr LBRACE basic_block RBRACE
    (100) case_block -> . DEFAULT LBRACE basic_block RBRACE

    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237

    case_list                      shift and go to state 234
    case_block                     shift and go to state 235

state 227

    (24) statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 24 (statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 228

    (26) statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    SEMICOLON       reduce using rule 26 (statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 229

    (57) expr -> expr COLON expr COLON expr .
    (56) expr -> expr COLON expr .
    (57) expr -> expr COLON expr . COLON expr
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

  ! reduce/reduce conflict for PLUS resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for MUL resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for DIV resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for MOD resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for POW resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LE resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for GE resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LT resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for GT resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for EQ resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for NE resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for COLON resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for AND resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for OR resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LBRACE resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 56 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for ELLIPSIS resolved using rule 56 (expr -> expr COLON expr .)
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COMMA           reduce using rule 56 (expr -> expr COLON expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr COLON expr .)
    AND             reduce using rule 56 (expr -> expr COLON expr .)
    OR              reduce using rule 56 (expr -> expr COLON expr .)
    LBRACE          reduce using rule 56 (expr -> expr COLON expr .)
    RPAREN          reduce using rule 56 (expr -> expr COLON expr .)
    RBRACKET        reduce using rule 56 (expr -> expr COLON expr .)
    ELLIPSIS        reduce using rule 56 (expr -> expr COLON expr .)
    COLON           shift and go to state 198
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107

  ! PLUS            [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! MUL             [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! DIV             [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! POW             [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! LE              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! GE              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! LT              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! GT              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! EQ              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! NE              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! COLON           [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! COMMA           [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! SEMICOLON       [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! AND             [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! OR              [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! RPAREN          [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! RBRACKET        [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! ELLIPSIS        [ reduce using rule 57 (expr -> expr COLON expr COLON expr .) ]
  ! PLUS            [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! MUL             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! POW             [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! LE              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! GE              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! LT              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! GT              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! EQ              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! NE              [ reduce using rule 56 (expr -> expr COLON expr .) ]
  ! COLON           [ reduce using rule 56 (expr -> expr COLON expr .) ]


state 230

    (93) range -> expr ELLIPSIS expr COMMA . expr
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 238
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 231

    (89) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 239
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 232

    (90) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 240
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 233

    (94) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 241
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 234

    (96) switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list . RBRACE
    (98) case_list -> case_list . case_block
    (99) case_block -> . CASE expr LBRACE basic_block RBRACE
    (100) case_block -> . DEFAULT LBRACE basic_block RBRACE

    RBRACE          shift and go to state 242
    CASE            shift and go to state 236
    DEFAULT         shift and go to state 237

    case_block                     shift and go to state 243

state 235

    (97) case_list -> case_block .

    RBRACE          reduce using rule 97 (case_list -> case_block .)
    CASE            reduce using rule 97 (case_list -> case_block .)
    DEFAULT         reduce using rule 97 (case_list -> case_block .)


state 236

    (99) case_block -> CASE . expr LBRACE basic_block RBRACE
    (33) expr -> . LET IDENTIFIER
    (34) expr -> . expr PLUS expr
    (35) expr -> . expr MINUS expr
    (36) expr -> . expr MUL expr
    (37) expr -> . expr DIV expr
    (38) expr -> . expr MOD expr
    (39) expr -> . expr POW expr
    (40) expr -> . expr LE expr
    (41) expr -> . expr GE expr
    (42) expr -> . expr LT expr
    (43) expr -> . expr GT expr
    (44) expr -> . expr EQ expr
    (45) expr -> . expr NE expr
    (46) expr -> . MINUS expr
    (49) expr -> . IDENTIFIER
    (50) expr -> . INTCONST
    (51) expr -> . FLOATCONST
    (52) expr -> . STRINGCONST
    (53) expr -> . LBRACKET expr_list RBRACKET
    (54) expr -> . LBRACKET range RBRACKET
    (55) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (56) expr -> . expr COLON expr
    (57) expr -> . expr COLON expr COLON expr
    (58) expr -> . TRUE
    (59) expr -> . FALSE
    (60) expr -> . NULL
    (61) expr -> . LPAREN expr RPAREN
    (62) expr -> . incr_decr
    (63) expr -> . func_call
    (64) expr -> . LEN LPAREN expr RPAREN
    (65) expr -> . MIN LPAREN expr_list RPAREN
    (66) expr -> . MAX LPAREN expr_list RPAREN
    (67) expr -> . INT LPAREN expr RPAREN
    (68) expr -> . FLOAT LPAREN expr RPAREN
    (69) expr -> . STR LPAREN expr RPAREN
    (70) expr -> . LIST LPAREN expr RPAREN
    (71) expr -> . TYPE LPAREN expr RPAREN
    (72) expr -> . SIN LPAREN expr_list RPAREN
    (73) expr -> . COS LPAREN expr_list RPAREN
    (74) expr -> . TAN LPAREN expr_list RPAREN
    (75) expr -> . ASIN LPAREN expr_list RPAREN
    (76) expr -> . ACOS LPAREN expr_list RPAREN
    (77) expr -> . ATAN LPAREN expr_list RPAREN
    (78) expr -> . SINH LPAREN expr_list RPAREN
    (79) expr -> . COSH LPAREN expr_list RPAREN
    (80) expr -> . TANH LPAREN expr_list RPAREN
    (81) expr -> . INTEGRATE LPAREN expr_list RPAREN
    (82) expr -> . DIFF LPAREN expr_list RPAREN
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    LET             shift and go to state 44
    MINUS           shift and go to state 46
    IDENTIFIER      shift and go to state 45
    INTCONST        shift and go to state 47
    FLOATCONST      shift and go to state 48
    STRINGCONST     shift and go to state 49
    LBRACKET        shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52
    NULL            shift and go to state 53
    LPAREN          shift and go to state 54
    LEN             shift and go to state 57
    MIN             shift and go to state 58
    MAX             shift and go to state 59
    INT             shift and go to state 60
    FLOAT           shift and go to state 61
    STR             shift and go to state 62
    LIST            shift and go to state 63
    TYPE            shift and go to state 64
    SIN             shift and go to state 65
    COS             shift and go to state 66
    TAN             shift and go to state 67
    ASIN            shift and go to state 68
    ACOS            shift and go to state 69
    ATAN            shift and go to state 70
    SINH            shift and go to state 71
    COSH            shift and go to state 72
    TANH            shift and go to state 73
    INTEGRATE       shift and go to state 74
    DIFF            shift and go to state 75

    expr                           shift and go to state 244
    incr_decr                      shift and go to state 55
    func_call                      shift and go to state 56

state 237

    (100) case_block -> DEFAULT . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 245


state 238

    (93) range -> expr ELLIPSIS expr COMMA expr .
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    RBRACKET        reduce using rule 93 (range -> expr ELLIPSIS expr COMMA expr .)
    LBRACE          reduce using rule 93 (range -> expr ELLIPSIS expr COMMA expr .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 239

    (89) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 246
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 240

    (90) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 247
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 241

    (94) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 248
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 242

    (96) switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .

    PRINT           reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    LET             reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    IDENTIFIER      reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    RETURN          reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    BREAK           reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    IF              reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    FOR             reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    FUNC            reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    $end            reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 96 (switch_line -> SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE .)


state 243

    (98) case_list -> case_list case_block .

    RBRACE          reduce using rule 98 (case_list -> case_list case_block .)
    CASE            reduce using rule 98 (case_list -> case_list case_block .)
    DEFAULT         reduce using rule 98 (case_list -> case_list case_block .)


state 244

    (99) case_block -> CASE expr . LBRACE basic_block RBRACE
    (34) expr -> expr . PLUS expr
    (35) expr -> expr . MINUS expr
    (36) expr -> expr . MUL expr
    (37) expr -> expr . DIV expr
    (38) expr -> expr . MOD expr
    (39) expr -> expr . POW expr
    (40) expr -> expr . LE expr
    (41) expr -> expr . GE expr
    (42) expr -> expr . LT expr
    (43) expr -> expr . GT expr
    (44) expr -> expr . EQ expr
    (45) expr -> expr . NE expr
    (56) expr -> expr . COLON expr
    (57) expr -> expr . COLON expr COLON expr

    LBRACE          shift and go to state 249
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    MUL             shift and go to state 98
    DIV             shift and go to state 99
    MOD             shift and go to state 100
    POW             shift and go to state 101
    LE              shift and go to state 102
    GE              shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    COLON           shift and go to state 108


state 245

    (100) case_block -> DEFAULT LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 250
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 246

    (89) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .

    PRINT           reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    LET             reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    BREAK           reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    IF              reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    FOR             reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    SWITCH          reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    $end            reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 89 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)


state 247

    (90) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .

    PRINT           reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    LET             reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    BREAK           reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    IF              reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    FOR             reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    SWITCH          reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    $end            reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 90 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)


state 248

    (94) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .

    PRINT           reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    LET             reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    RETURN          reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    BREAK           reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    IF              reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    FOR             reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    SWITCH          reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    $end            reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 94 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)


state 249

    (99) case_block -> CASE expr LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    basic_block                    shift and go to state 251
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 250

    (100) case_block -> DEFAULT LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 252
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 251

    (99) case_block -> CASE expr LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) line_statement -> . switch_line
    (13) statement -> . PRINT LPAREN expr_list RPAREN
    (14) statement -> . LET IDENTIFIER EQUALS expr
    (15) statement -> . LET IDENTIFIER
    (16) statement -> . IDENTIFIER EQUALS expr
    (17) statement -> . IDENTIFIER PLUSEQUALS expr
    (18) statement -> . IDENTIFIER MINUSEQUALS expr
    (19) statement -> . IDENTIFIER MULEQUALS expr
    (20) statement -> . IDENTIFIER DIVEQUALS expr
    (21) statement -> . IDENTIFIER MODEQUALS expr
    (22) statement -> . IDENTIFIER POWEQUALS expr
    (23) statement -> . incr_decr
    (24) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (25) statement -> . func_call
    (26) statement -> . IDENTIFIER LPAREN expr_list RPAREN EQUALS expr
    (27) statement -> . RETURN expr_list
    (28) statement -> . BREAK
    (87) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (89) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (90) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (91) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (94) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (96) switch_line -> . SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
    (47) incr_decr -> . IDENTIFIER PLUSPLUS
    (48) incr_decr -> . IDENTIFIER MINUSMINUS
    (95) func_call -> . IDENTIFIER LPAREN expr_list RPAREN

    RBRACE          shift and go to state 253
    PRINT           shift and go to state 12
    LET             shift and go to state 13
    IDENTIFIER      shift and go to state 14
    RETURN          shift and go to state 17
    BREAK           shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    FUNC            shift and go to state 21
    SWITCH          shift and go to state 22

    line_statement                 shift and go to state 23
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    switch_line                    shift and go to state 11
    incr_decr                      shift and go to state 15
    func_call                      shift and go to state 16

state 252

    (100) case_block -> DEFAULT LBRACE basic_block RBRACE .

    RBRACE          reduce using rule 100 (case_block -> DEFAULT LBRACE basic_block RBRACE .)
    CASE            reduce using rule 100 (case_block -> DEFAULT LBRACE basic_block RBRACE .)
    DEFAULT         reduce using rule 100 (case_block -> DEFAULT LBRACE basic_block RBRACE .)


state 253

    (99) case_block -> CASE expr LBRACE basic_block RBRACE .

    RBRACE          reduce using rule 99 (case_block -> CASE expr LBRACE basic_block RBRACE .)
    CASE            reduce using rule 99 (case_block -> CASE expr LBRACE basic_block RBRACE .)
    DEFAULT         reduce using rule 99 (case_block -> CASE expr LBRACE basic_block RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for LET in state 4 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 4 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 4 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MUL in state 156 resolved as shift
WARNING: shift/reduce conflict for DIV in state 156 resolved as shift
WARNING: shift/reduce conflict for MOD in state 156 resolved as shift
WARNING: shift/reduce conflict for POW in state 156 resolved as shift
WARNING: shift/reduce conflict for LE in state 156 resolved as shift
WARNING: shift/reduce conflict for GE in state 156 resolved as shift
WARNING: shift/reduce conflict for LT in state 156 resolved as shift
WARNING: shift/reduce conflict for GT in state 156 resolved as shift
WARNING: shift/reduce conflict for EQ in state 156 resolved as shift
WARNING: shift/reduce conflict for NE in state 156 resolved as shift
WARNING: shift/reduce conflict for COLON in state 156 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MUL in state 157 resolved as shift
WARNING: shift/reduce conflict for DIV in state 157 resolved as shift
WARNING: shift/reduce conflict for MOD in state 157 resolved as shift
WARNING: shift/reduce conflict for POW in state 157 resolved as shift
WARNING: shift/reduce conflict for LE in state 157 resolved as shift
WARNING: shift/reduce conflict for GE in state 157 resolved as shift
WARNING: shift/reduce conflict for LT in state 157 resolved as shift
WARNING: shift/reduce conflict for GT in state 157 resolved as shift
WARNING: shift/reduce conflict for EQ in state 157 resolved as shift
WARNING: shift/reduce conflict for NE in state 157 resolved as shift
WARNING: shift/reduce conflict for COLON in state 157 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MUL in state 158 resolved as shift
WARNING: shift/reduce conflict for DIV in state 158 resolved as shift
WARNING: shift/reduce conflict for MOD in state 158 resolved as shift
WARNING: shift/reduce conflict for POW in state 158 resolved as shift
WARNING: shift/reduce conflict for LE in state 158 resolved as shift
WARNING: shift/reduce conflict for GE in state 158 resolved as shift
WARNING: shift/reduce conflict for LT in state 158 resolved as shift
WARNING: shift/reduce conflict for GT in state 158 resolved as shift
WARNING: shift/reduce conflict for EQ in state 158 resolved as shift
WARNING: shift/reduce conflict for NE in state 158 resolved as shift
WARNING: shift/reduce conflict for COLON in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MUL in state 159 resolved as shift
WARNING: shift/reduce conflict for DIV in state 159 resolved as shift
WARNING: shift/reduce conflict for MOD in state 159 resolved as shift
WARNING: shift/reduce conflict for POW in state 159 resolved as shift
WARNING: shift/reduce conflict for LE in state 159 resolved as shift
WARNING: shift/reduce conflict for GE in state 159 resolved as shift
WARNING: shift/reduce conflict for LT in state 159 resolved as shift
WARNING: shift/reduce conflict for GT in state 159 resolved as shift
WARNING: shift/reduce conflict for EQ in state 159 resolved as shift
WARNING: shift/reduce conflict for NE in state 159 resolved as shift
WARNING: shift/reduce conflict for COLON in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MUL in state 160 resolved as shift
WARNING: shift/reduce conflict for DIV in state 160 resolved as shift
WARNING: shift/reduce conflict for MOD in state 160 resolved as shift
WARNING: shift/reduce conflict for POW in state 160 resolved as shift
WARNING: shift/reduce conflict for LE in state 160 resolved as shift
WARNING: shift/reduce conflict for GE in state 160 resolved as shift
WARNING: shift/reduce conflict for LT in state 160 resolved as shift
WARNING: shift/reduce conflict for GT in state 160 resolved as shift
WARNING: shift/reduce conflict for EQ in state 160 resolved as shift
WARNING: shift/reduce conflict for NE in state 160 resolved as shift
WARNING: shift/reduce conflict for COLON in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MUL in state 161 resolved as shift
WARNING: shift/reduce conflict for DIV in state 161 resolved as shift
WARNING: shift/reduce conflict for MOD in state 161 resolved as shift
WARNING: shift/reduce conflict for POW in state 161 resolved as shift
WARNING: shift/reduce conflict for LE in state 161 resolved as shift
WARNING: shift/reduce conflict for GE in state 161 resolved as shift
WARNING: shift/reduce conflict for LT in state 161 resolved as shift
WARNING: shift/reduce conflict for GT in state 161 resolved as shift
WARNING: shift/reduce conflict for EQ in state 161 resolved as shift
WARNING: shift/reduce conflict for NE in state 161 resolved as shift
WARNING: shift/reduce conflict for COLON in state 161 resolved as shift
WARNING: shift/reduce conflict for COLON in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MUL in state 162 resolved as shift
WARNING: shift/reduce conflict for DIV in state 162 resolved as shift
WARNING: shift/reduce conflict for MOD in state 162 resolved as shift
WARNING: shift/reduce conflict for POW in state 162 resolved as shift
WARNING: shift/reduce conflict for LE in state 162 resolved as shift
WARNING: shift/reduce conflict for GE in state 162 resolved as shift
WARNING: shift/reduce conflict for LT in state 162 resolved as shift
WARNING: shift/reduce conflict for GT in state 162 resolved as shift
WARNING: shift/reduce conflict for EQ in state 162 resolved as shift
WARNING: shift/reduce conflict for NE in state 162 resolved as shift
WARNING: shift/reduce conflict for COLON in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MUL in state 229 resolved as shift
WARNING: shift/reduce conflict for DIV in state 229 resolved as shift
WARNING: shift/reduce conflict for MOD in state 229 resolved as shift
WARNING: shift/reduce conflict for POW in state 229 resolved as shift
WARNING: shift/reduce conflict for LE in state 229 resolved as shift
WARNING: shift/reduce conflict for GE in state 229 resolved as shift
WARNING: shift/reduce conflict for LT in state 229 resolved as shift
WARNING: shift/reduce conflict for GT in state 229 resolved as shift
WARNING: shift/reduce conflict for EQ in state 229 resolved as shift
WARNING: shift/reduce conflict for NE in state 229 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 41
WARNING: reduce/reduce conflict in state 117 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 117
WARNING: reduce/reduce conflict in state 229 resolved using rule (expr -> expr COLON expr)
WARNING: rejected rule (expr -> expr COLON expr COLON expr) in state 229
WARNING: Rule (expr -> expr COLON expr COLON expr) is never reduced
