Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CONTINUE
    DEFAULT
    FLOAT
    FROM
    INT
    INTEGRATE
    NOT
    PERIOD
    RETURN
    STRING
    SWITCH
    TO
    TYPE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> commands
Rule 2     commands -> commands basic_block
Rule 3     commands -> empty
Rule 4     basic_block -> line_statement
Rule 5     basic_block -> basic_block line_statement
Rule 6     line_statement -> statement SEMICOLON
Rule 7     line_statement -> if_line
Rule 8     line_statement -> if_line else_line
Rule 9     line_statement -> for_line
Rule 10    line_statement -> while_line
Rule 11    line_statement -> func_line
Rule 12    statement -> PRINT LPAREN expr_list RPAREN
Rule 13    statement -> LET IDENTIFIER EQUALS expr
Rule 14    statement -> LET IDENTIFIER
Rule 15    statement -> IDENTIFIER EQUALS expr
Rule 16    statement -> IDENTIFIER PLUSEQUALS expr
Rule 17    statement -> IDENTIFIER MINUSEQUALS expr
Rule 18    statement -> IDENTIFIER MULEQUALS expr
Rule 19    statement -> IDENTIFIER DIVEQUALS expr
Rule 20    statement -> IDENTIFIER MODEQUALS expr
Rule 21    statement -> IDENTIFIER POWEQUALS expr
Rule 22    statement -> incr_decr
Rule 23    statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
Rule 24    statement -> IDENTIFIER LPAREN expr_list RPAREN
Rule 25    expr_list -> expr
Rule 26    expr_list -> cond_list
Rule 27    expr_list -> expr_list COMMA expr
Rule 28    expr -> LET IDENTIFIER
Rule 29    expr -> expr PLUS expr
Rule 30    expr -> expr MINUS expr
Rule 31    expr -> expr MUL expr
Rule 32    expr -> expr DIV expr
Rule 33    expr -> expr MOD expr
Rule 34    expr -> expr POW expr
Rule 35    expr -> expr LE expr
Rule 36    expr -> expr GE expr
Rule 37    expr -> expr LT expr
Rule 38    expr -> expr GT expr
Rule 39    expr -> expr EQ expr
Rule 40    expr -> expr NE expr
Rule 41    expr -> MINUS expr
Rule 42    incr_decr -> IDENTIFIER PLUSPLUS
Rule 43    incr_decr -> IDENTIFIER MINUSMINUS
Rule 44    expr -> IDENTIFIER
Rule 45    expr -> INTCONST
Rule 46    expr -> FLOATCONST
Rule 47    expr -> STRINGCONST
Rule 48    expr -> LBRACKET expr_list RBRACKET
Rule 49    expr -> LBRACKET range RBRACKET
Rule 50    expr -> IDENTIFIER LBRACKET expr_list RBRACKET
Rule 51    expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET
Rule 52    expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
Rule 53    func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
Rule 54    expr -> TRUE
Rule 55    expr -> FALSE
Rule 56    expr -> LPAREN expr RPAREN
Rule 57    expr -> incr_decr
Rule 58    cond_list -> expr
Rule 59    cond_list -> cond_list AND expr
Rule 60    cond_list -> cond_list OR expr
Rule 61    if_line -> IF cond_list LBRACE basic_block RBRACE
Rule 62    else_line -> ELSE LBRACE basic_block RBRACE
Rule 63    for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
Rule 64    for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
Rule 65    while_line -> FOR cond_list LBRACE basic_block RBRACE
Rule 66    range -> expr ELLIPSIS expr
Rule 67    range -> expr ELLIPSIS expr COMMA expr
Rule 68    empty -> <empty>

Terminals, with rules where they appear

AND                  : 59
BREAK                : 
CASE                 : 
COLON                : 51 52 52
COMMA                : 27 67
CONTINUE             : 
DEFAULT              : 
DIV                  : 32
DIVEQUALS            : 19
ELLIPSIS             : 66 67
ELSE                 : 62
EQ                   : 39
EQUALS               : 13 15 23
FALSE                : 55
FLOAT                : 
FLOATCONST           : 46
FOR                  : 63 64 65
FROM                 : 
FUNC                 : 53
GE                   : 36
GT                   : 38
IDENTIFIER           : 13 14 15 16 17 18 19 20 21 23 24 28 42 43 44 50 51 52 53 63 64
IF                   : 61
INT                  : 
INTCONST             : 45
INTEGRATE            : 
LBRACE               : 53 61 62 63 64 65
LBRACKET             : 23 48 49 50 51 52
LE                   : 35
LET                  : 13 14 28
LPAREN               : 12 24 53 56
LT                   : 37
MINUS                : 30 41
MINUSEQUALS          : 17
MINUSMINUS           : 43
MOD                  : 33
MODEQUALS            : 20
MUL                  : 31
MULEQUALS            : 18
NE                   : 40
NOT                  : 
OR                   : 60
PERIOD               : 
PLUS                 : 29
PLUSEQUALS           : 16
PLUSPLUS             : 42
POW                  : 34
POWEQUALS            : 21
PRINT                : 12
RANGE                : 63 64
RBRACE               : 53 61 62 63 64 65
RBRACKET             : 23 48 49 50 51 52
RETURN               : 
RPAREN               : 12 24 53 56
SEMICOLON            : 6
STRING               : 
STRINGCONST          : 47
SWITCH               : 
TO                   : 
TRUE                 : 54
TYPE                 : 
WALRUS               : 63 64
WHILE                : 
error                : 

Nonterminals, with rules where they appear

basic_block          : 2 5 53 61 62 63 64 65
commands             : 1 2
cond_list            : 26 59 60 61 65
else_line            : 8
empty                : 3
expr                 : 13 15 16 17 18 19 20 21 23 25 27 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 51 51 52 52 52 56 58 59 60 64 66 66 67 67 67
expr_list            : 12 23 24 27 48 50 53
for_line             : 9
func_line            : 11
if_line              : 7 8
incr_decr            : 22 57
line_statement       : 4 5
program              : 0
range                : 49 63
statement            : 6
while_line           : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . commands
    (2) commands -> . commands basic_block
    (3) commands -> . empty
    (68) empty -> .

    PRINT           reduce using rule 68 (empty -> .)
    LET             reduce using rule 68 (empty -> .)
    IDENTIFIER      reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    FUNC            reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)

    program                        shift and go to state 1
    commands                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> commands .
    (2) commands -> commands . basic_block
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    $end            reduce using rule 1 (program -> commands .)
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 4
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 3

    (3) commands -> empty .

    PRINT           reduce using rule 3 (commands -> empty .)
    LET             reduce using rule 3 (commands -> empty .)
    IDENTIFIER      reduce using rule 3 (commands -> empty .)
    IF              reduce using rule 3 (commands -> empty .)
    FOR             reduce using rule 3 (commands -> empty .)
    FUNC            reduce using rule 3 (commands -> empty .)
    $end            reduce using rule 3 (commands -> empty .)


state 4

    (2) commands -> commands basic_block .
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    $end            reduce using rule 2 (commands -> commands basic_block .)
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

  ! PRINT           [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! LET             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IDENTIFIER      [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! IF              [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FOR             [ reduce using rule 2 (commands -> commands basic_block .) ]
  ! FUNC            [ reduce using rule 2 (commands -> commands basic_block .) ]

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 5

    (4) basic_block -> line_statement .

    PRINT           reduce using rule 4 (basic_block -> line_statement .)
    LET             reduce using rule 4 (basic_block -> line_statement .)
    IDENTIFIER      reduce using rule 4 (basic_block -> line_statement .)
    IF              reduce using rule 4 (basic_block -> line_statement .)
    FOR             reduce using rule 4 (basic_block -> line_statement .)
    FUNC            reduce using rule 4 (basic_block -> line_statement .)
    $end            reduce using rule 4 (basic_block -> line_statement .)
    RBRACE          reduce using rule 4 (basic_block -> line_statement .)


state 6

    (6) line_statement -> statement . SEMICOLON

    SEMICOLON       shift and go to state 19


state 7

    (7) line_statement -> if_line .
    (8) line_statement -> if_line . else_line
    (62) else_line -> . ELSE LBRACE basic_block RBRACE

    PRINT           reduce using rule 7 (line_statement -> if_line .)
    LET             reduce using rule 7 (line_statement -> if_line .)
    IDENTIFIER      reduce using rule 7 (line_statement -> if_line .)
    IF              reduce using rule 7 (line_statement -> if_line .)
    FOR             reduce using rule 7 (line_statement -> if_line .)
    FUNC            reduce using rule 7 (line_statement -> if_line .)
    $end            reduce using rule 7 (line_statement -> if_line .)
    RBRACE          reduce using rule 7 (line_statement -> if_line .)
    ELSE            shift and go to state 21

    else_line                      shift and go to state 20

state 8

    (9) line_statement -> for_line .

    PRINT           reduce using rule 9 (line_statement -> for_line .)
    LET             reduce using rule 9 (line_statement -> for_line .)
    IDENTIFIER      reduce using rule 9 (line_statement -> for_line .)
    IF              reduce using rule 9 (line_statement -> for_line .)
    FOR             reduce using rule 9 (line_statement -> for_line .)
    FUNC            reduce using rule 9 (line_statement -> for_line .)
    $end            reduce using rule 9 (line_statement -> for_line .)
    RBRACE          reduce using rule 9 (line_statement -> for_line .)


state 9

    (10) line_statement -> while_line .

    PRINT           reduce using rule 10 (line_statement -> while_line .)
    LET             reduce using rule 10 (line_statement -> while_line .)
    IDENTIFIER      reduce using rule 10 (line_statement -> while_line .)
    IF              reduce using rule 10 (line_statement -> while_line .)
    FOR             reduce using rule 10 (line_statement -> while_line .)
    FUNC            reduce using rule 10 (line_statement -> while_line .)
    $end            reduce using rule 10 (line_statement -> while_line .)
    RBRACE          reduce using rule 10 (line_statement -> while_line .)


state 10

    (11) line_statement -> func_line .

    PRINT           reduce using rule 11 (line_statement -> func_line .)
    LET             reduce using rule 11 (line_statement -> func_line .)
    IDENTIFIER      reduce using rule 11 (line_statement -> func_line .)
    IF              reduce using rule 11 (line_statement -> func_line .)
    FOR             reduce using rule 11 (line_statement -> func_line .)
    FUNC            reduce using rule 11 (line_statement -> func_line .)
    $end            reduce using rule 11 (line_statement -> func_line .)
    RBRACE          reduce using rule 11 (line_statement -> func_line .)


state 11

    (12) statement -> PRINT . LPAREN expr_list RPAREN

    LPAREN          shift and go to state 22


state 12

    (13) statement -> LET . IDENTIFIER EQUALS expr
    (14) statement -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 23


state 13

    (15) statement -> IDENTIFIER . EQUALS expr
    (16) statement -> IDENTIFIER . PLUSEQUALS expr
    (17) statement -> IDENTIFIER . MINUSEQUALS expr
    (18) statement -> IDENTIFIER . MULEQUALS expr
    (19) statement -> IDENTIFIER . DIVEQUALS expr
    (20) statement -> IDENTIFIER . MODEQUALS expr
    (21) statement -> IDENTIFIER . POWEQUALS expr
    (23) statement -> IDENTIFIER . LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> IDENTIFIER . LPAREN expr_list RPAREN
    (42) incr_decr -> IDENTIFIER . PLUSPLUS
    (43) incr_decr -> IDENTIFIER . MINUSMINUS

    EQUALS          shift and go to state 24
    PLUSEQUALS      shift and go to state 25
    MINUSEQUALS     shift and go to state 26
    MULEQUALS       shift and go to state 27
    DIVEQUALS       shift and go to state 28
    MODEQUALS       shift and go to state 29
    POWEQUALS       shift and go to state 30
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32
    PLUSPLUS        shift and go to state 33
    MINUSMINUS      shift and go to state 34


state 14

    (22) statement -> incr_decr .

    SEMICOLON       reduce using rule 22 (statement -> incr_decr .)


state 15

    (61) if_line -> IF . cond_list LBRACE basic_block RBRACE
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    cond_list                      shift and go to state 35
    expr                           shift and go to state 36
    incr_decr                      shift and go to state 47

state 16

    (63) for_line -> FOR . IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> FOR . IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> FOR . cond_list LBRACE basic_block RBRACE
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    IDENTIFIER      shift and go to state 48
    LET             shift and go to state 37
    MINUS           shift and go to state 39
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 36
    cond_list                      shift and go to state 49
    incr_decr                      shift and go to state 47

state 17

    (53) func_line -> FUNC . IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE

    IDENTIFIER      shift and go to state 50


state 18

    (5) basic_block -> basic_block line_statement .

    PRINT           reduce using rule 5 (basic_block -> basic_block line_statement .)
    LET             reduce using rule 5 (basic_block -> basic_block line_statement .)
    IDENTIFIER      reduce using rule 5 (basic_block -> basic_block line_statement .)
    IF              reduce using rule 5 (basic_block -> basic_block line_statement .)
    FOR             reduce using rule 5 (basic_block -> basic_block line_statement .)
    FUNC            reduce using rule 5 (basic_block -> basic_block line_statement .)
    $end            reduce using rule 5 (basic_block -> basic_block line_statement .)
    RBRACE          reduce using rule 5 (basic_block -> basic_block line_statement .)


state 19

    (6) line_statement -> statement SEMICOLON .

    PRINT           reduce using rule 6 (line_statement -> statement SEMICOLON .)
    LET             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (line_statement -> statement SEMICOLON .)
    IF              reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FOR             reduce using rule 6 (line_statement -> statement SEMICOLON .)
    FUNC            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    $end            reduce using rule 6 (line_statement -> statement SEMICOLON .)
    RBRACE          reduce using rule 6 (line_statement -> statement SEMICOLON .)


state 20

    (8) line_statement -> if_line else_line .

    PRINT           reduce using rule 8 (line_statement -> if_line else_line .)
    LET             reduce using rule 8 (line_statement -> if_line else_line .)
    IDENTIFIER      reduce using rule 8 (line_statement -> if_line else_line .)
    IF              reduce using rule 8 (line_statement -> if_line else_line .)
    FOR             reduce using rule 8 (line_statement -> if_line else_line .)
    FUNC            reduce using rule 8 (line_statement -> if_line else_line .)
    $end            reduce using rule 8 (line_statement -> if_line else_line .)
    RBRACE          reduce using rule 8 (line_statement -> if_line else_line .)


state 21

    (62) else_line -> ELSE . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 51


state 22

    (12) statement -> PRINT LPAREN . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . cond_list
    (27) expr_list -> . expr_list COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr_list                      shift and go to state 52
    expr                           shift and go to state 53
    cond_list                      shift and go to state 54
    incr_decr                      shift and go to state 47

state 23

    (13) statement -> LET IDENTIFIER . EQUALS expr
    (14) statement -> LET IDENTIFIER .

    EQUALS          shift and go to state 55
    SEMICOLON       reduce using rule 14 (statement -> LET IDENTIFIER .)


state 24

    (15) statement -> IDENTIFIER EQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 56
    incr_decr                      shift and go to state 47

state 25

    (16) statement -> IDENTIFIER PLUSEQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 57
    incr_decr                      shift and go to state 47

state 26

    (17) statement -> IDENTIFIER MINUSEQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 58
    incr_decr                      shift and go to state 47

state 27

    (18) statement -> IDENTIFIER MULEQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 59
    incr_decr                      shift and go to state 47

state 28

    (19) statement -> IDENTIFIER DIVEQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 60
    incr_decr                      shift and go to state 47

state 29

    (20) statement -> IDENTIFIER MODEQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 61
    incr_decr                      shift and go to state 47

state 30

    (21) statement -> IDENTIFIER POWEQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 62
    incr_decr                      shift and go to state 47

state 31

    (23) statement -> IDENTIFIER LBRACKET . expr_list RBRACKET EQUALS expr
    (25) expr_list -> . expr
    (26) expr_list -> . cond_list
    (27) expr_list -> . expr_list COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr_list                      shift and go to state 63
    expr                           shift and go to state 53
    cond_list                      shift and go to state 54
    incr_decr                      shift and go to state 47

state 32

    (24) statement -> IDENTIFIER LPAREN . expr_list RPAREN
    (25) expr_list -> . expr
    (26) expr_list -> . cond_list
    (27) expr_list -> . expr_list COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr_list                      shift and go to state 64
    expr                           shift and go to state 53
    cond_list                      shift and go to state 54
    incr_decr                      shift and go to state 47

state 33

    (42) incr_decr -> IDENTIFIER PLUSPLUS .

    SEMICOLON       reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    PLUS            reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MINUS           reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MUL             reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    DIV             reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    MOD             reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    POW             reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LE              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    GE              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LT              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    GT              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    EQ              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    NE              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    LBRACE          reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    AND             reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    OR              reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    RPAREN          reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    COMMA           reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    RBRACKET        reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    ELLIPSIS        reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)
    COLON           reduce using rule 42 (incr_decr -> IDENTIFIER PLUSPLUS .)


state 34

    (43) incr_decr -> IDENTIFIER MINUSMINUS .

    SEMICOLON       reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    PLUS            reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MINUS           reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MUL             reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    DIV             reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    MOD             reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    POW             reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LE              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    GE              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LT              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    GT              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    EQ              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    NE              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    LBRACE          reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    AND             reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    OR              reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    RPAREN          reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    COMMA           reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    RBRACKET        reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    ELLIPSIS        reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)
    COLON           reduce using rule 43 (incr_decr -> IDENTIFIER MINUSMINUS .)


state 35

    (61) if_line -> IF cond_list . LBRACE basic_block RBRACE
    (59) cond_list -> cond_list . AND expr
    (60) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 65
    AND             shift and go to state 66
    OR              shift and go to state 67


state 36

    (58) cond_list -> expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    LBRACE          reduce using rule 58 (cond_list -> expr .)
    AND             reduce using rule 58 (cond_list -> expr .)
    OR              reduce using rule 58 (cond_list -> expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 37

    (28) expr -> LET . IDENTIFIER

    IDENTIFIER      shift and go to state 80


state 38

    (44) expr -> IDENTIFIER .
    (50) expr -> IDENTIFIER . LBRACKET expr_list RBRACKET
    (51) expr -> IDENTIFIER . LBRACKET expr COLON expr RBRACKET
    (52) expr -> IDENTIFIER . LBRACKET expr COLON expr COLON expr RBRACKET
    (42) incr_decr -> IDENTIFIER . PLUSPLUS
    (43) incr_decr -> IDENTIFIER . MINUSMINUS

    PLUS            reduce using rule 44 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 44 (expr -> IDENTIFIER .)
    MUL             reduce using rule 44 (expr -> IDENTIFIER .)
    DIV             reduce using rule 44 (expr -> IDENTIFIER .)
    MOD             reduce using rule 44 (expr -> IDENTIFIER .)
    POW             reduce using rule 44 (expr -> IDENTIFIER .)
    LE              reduce using rule 44 (expr -> IDENTIFIER .)
    GE              reduce using rule 44 (expr -> IDENTIFIER .)
    LT              reduce using rule 44 (expr -> IDENTIFIER .)
    GT              reduce using rule 44 (expr -> IDENTIFIER .)
    EQ              reduce using rule 44 (expr -> IDENTIFIER .)
    NE              reduce using rule 44 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 44 (expr -> IDENTIFIER .)
    AND             reduce using rule 44 (expr -> IDENTIFIER .)
    OR              reduce using rule 44 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 44 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 44 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 44 (expr -> IDENTIFIER .)
    RBRACKET        reduce using rule 44 (expr -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 44 (expr -> IDENTIFIER .)
    COLON           reduce using rule 44 (expr -> IDENTIFIER .)
    LBRACKET        shift and go to state 81
    PLUSPLUS        shift and go to state 33
    MINUSMINUS      shift and go to state 34


state 39

    (41) expr -> MINUS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 82
    incr_decr                      shift and go to state 47

state 40

    (45) expr -> INTCONST .

    PLUS            reduce using rule 45 (expr -> INTCONST .)
    MINUS           reduce using rule 45 (expr -> INTCONST .)
    MUL             reduce using rule 45 (expr -> INTCONST .)
    DIV             reduce using rule 45 (expr -> INTCONST .)
    MOD             reduce using rule 45 (expr -> INTCONST .)
    POW             reduce using rule 45 (expr -> INTCONST .)
    LE              reduce using rule 45 (expr -> INTCONST .)
    GE              reduce using rule 45 (expr -> INTCONST .)
    LT              reduce using rule 45 (expr -> INTCONST .)
    GT              reduce using rule 45 (expr -> INTCONST .)
    EQ              reduce using rule 45 (expr -> INTCONST .)
    NE              reduce using rule 45 (expr -> INTCONST .)
    LBRACE          reduce using rule 45 (expr -> INTCONST .)
    AND             reduce using rule 45 (expr -> INTCONST .)
    OR              reduce using rule 45 (expr -> INTCONST .)
    RPAREN          reduce using rule 45 (expr -> INTCONST .)
    COMMA           reduce using rule 45 (expr -> INTCONST .)
    SEMICOLON       reduce using rule 45 (expr -> INTCONST .)
    RBRACKET        reduce using rule 45 (expr -> INTCONST .)
    ELLIPSIS        reduce using rule 45 (expr -> INTCONST .)
    COLON           reduce using rule 45 (expr -> INTCONST .)


state 41

    (46) expr -> FLOATCONST .

    PLUS            reduce using rule 46 (expr -> FLOATCONST .)
    MINUS           reduce using rule 46 (expr -> FLOATCONST .)
    MUL             reduce using rule 46 (expr -> FLOATCONST .)
    DIV             reduce using rule 46 (expr -> FLOATCONST .)
    MOD             reduce using rule 46 (expr -> FLOATCONST .)
    POW             reduce using rule 46 (expr -> FLOATCONST .)
    LE              reduce using rule 46 (expr -> FLOATCONST .)
    GE              reduce using rule 46 (expr -> FLOATCONST .)
    LT              reduce using rule 46 (expr -> FLOATCONST .)
    GT              reduce using rule 46 (expr -> FLOATCONST .)
    EQ              reduce using rule 46 (expr -> FLOATCONST .)
    NE              reduce using rule 46 (expr -> FLOATCONST .)
    LBRACE          reduce using rule 46 (expr -> FLOATCONST .)
    AND             reduce using rule 46 (expr -> FLOATCONST .)
    OR              reduce using rule 46 (expr -> FLOATCONST .)
    RPAREN          reduce using rule 46 (expr -> FLOATCONST .)
    COMMA           reduce using rule 46 (expr -> FLOATCONST .)
    SEMICOLON       reduce using rule 46 (expr -> FLOATCONST .)
    RBRACKET        reduce using rule 46 (expr -> FLOATCONST .)
    ELLIPSIS        reduce using rule 46 (expr -> FLOATCONST .)
    COLON           reduce using rule 46 (expr -> FLOATCONST .)


state 42

    (47) expr -> STRINGCONST .

    PLUS            reduce using rule 47 (expr -> STRINGCONST .)
    MINUS           reduce using rule 47 (expr -> STRINGCONST .)
    MUL             reduce using rule 47 (expr -> STRINGCONST .)
    DIV             reduce using rule 47 (expr -> STRINGCONST .)
    MOD             reduce using rule 47 (expr -> STRINGCONST .)
    POW             reduce using rule 47 (expr -> STRINGCONST .)
    LE              reduce using rule 47 (expr -> STRINGCONST .)
    GE              reduce using rule 47 (expr -> STRINGCONST .)
    LT              reduce using rule 47 (expr -> STRINGCONST .)
    GT              reduce using rule 47 (expr -> STRINGCONST .)
    EQ              reduce using rule 47 (expr -> STRINGCONST .)
    NE              reduce using rule 47 (expr -> STRINGCONST .)
    LBRACE          reduce using rule 47 (expr -> STRINGCONST .)
    AND             reduce using rule 47 (expr -> STRINGCONST .)
    OR              reduce using rule 47 (expr -> STRINGCONST .)
    RPAREN          reduce using rule 47 (expr -> STRINGCONST .)
    COMMA           reduce using rule 47 (expr -> STRINGCONST .)
    SEMICOLON       reduce using rule 47 (expr -> STRINGCONST .)
    RBRACKET        reduce using rule 47 (expr -> STRINGCONST .)
    ELLIPSIS        reduce using rule 47 (expr -> STRINGCONST .)
    COLON           reduce using rule 47 (expr -> STRINGCONST .)


state 43

    (48) expr -> LBRACKET . expr_list RBRACKET
    (49) expr -> LBRACKET . range RBRACKET
    (25) expr_list -> . expr
    (26) expr_list -> . cond_list
    (27) expr_list -> . expr_list COMMA expr
    (66) range -> . expr ELLIPSIS expr
    (67) range -> . expr ELLIPSIS expr COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr_list                      shift and go to state 83
    range                          shift and go to state 84
    expr                           shift and go to state 85
    cond_list                      shift and go to state 54
    incr_decr                      shift and go to state 47

state 44

    (54) expr -> TRUE .

    PLUS            reduce using rule 54 (expr -> TRUE .)
    MINUS           reduce using rule 54 (expr -> TRUE .)
    MUL             reduce using rule 54 (expr -> TRUE .)
    DIV             reduce using rule 54 (expr -> TRUE .)
    MOD             reduce using rule 54 (expr -> TRUE .)
    POW             reduce using rule 54 (expr -> TRUE .)
    LE              reduce using rule 54 (expr -> TRUE .)
    GE              reduce using rule 54 (expr -> TRUE .)
    LT              reduce using rule 54 (expr -> TRUE .)
    GT              reduce using rule 54 (expr -> TRUE .)
    EQ              reduce using rule 54 (expr -> TRUE .)
    NE              reduce using rule 54 (expr -> TRUE .)
    LBRACE          reduce using rule 54 (expr -> TRUE .)
    AND             reduce using rule 54 (expr -> TRUE .)
    OR              reduce using rule 54 (expr -> TRUE .)
    RPAREN          reduce using rule 54 (expr -> TRUE .)
    COMMA           reduce using rule 54 (expr -> TRUE .)
    SEMICOLON       reduce using rule 54 (expr -> TRUE .)
    RBRACKET        reduce using rule 54 (expr -> TRUE .)
    ELLIPSIS        reduce using rule 54 (expr -> TRUE .)
    COLON           reduce using rule 54 (expr -> TRUE .)


state 45

    (55) expr -> FALSE .

    PLUS            reduce using rule 55 (expr -> FALSE .)
    MINUS           reduce using rule 55 (expr -> FALSE .)
    MUL             reduce using rule 55 (expr -> FALSE .)
    DIV             reduce using rule 55 (expr -> FALSE .)
    MOD             reduce using rule 55 (expr -> FALSE .)
    POW             reduce using rule 55 (expr -> FALSE .)
    LE              reduce using rule 55 (expr -> FALSE .)
    GE              reduce using rule 55 (expr -> FALSE .)
    LT              reduce using rule 55 (expr -> FALSE .)
    GT              reduce using rule 55 (expr -> FALSE .)
    EQ              reduce using rule 55 (expr -> FALSE .)
    NE              reduce using rule 55 (expr -> FALSE .)
    LBRACE          reduce using rule 55 (expr -> FALSE .)
    AND             reduce using rule 55 (expr -> FALSE .)
    OR              reduce using rule 55 (expr -> FALSE .)
    RPAREN          reduce using rule 55 (expr -> FALSE .)
    COMMA           reduce using rule 55 (expr -> FALSE .)
    SEMICOLON       reduce using rule 55 (expr -> FALSE .)
    RBRACKET        reduce using rule 55 (expr -> FALSE .)
    ELLIPSIS        reduce using rule 55 (expr -> FALSE .)
    COLON           reduce using rule 55 (expr -> FALSE .)


state 46

    (56) expr -> LPAREN . expr RPAREN
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 86
    incr_decr                      shift and go to state 47

state 47

    (57) expr -> incr_decr .

    PLUS            reduce using rule 57 (expr -> incr_decr .)
    MINUS           reduce using rule 57 (expr -> incr_decr .)
    MUL             reduce using rule 57 (expr -> incr_decr .)
    DIV             reduce using rule 57 (expr -> incr_decr .)
    MOD             reduce using rule 57 (expr -> incr_decr .)
    POW             reduce using rule 57 (expr -> incr_decr .)
    LE              reduce using rule 57 (expr -> incr_decr .)
    GE              reduce using rule 57 (expr -> incr_decr .)
    LT              reduce using rule 57 (expr -> incr_decr .)
    GT              reduce using rule 57 (expr -> incr_decr .)
    EQ              reduce using rule 57 (expr -> incr_decr .)
    NE              reduce using rule 57 (expr -> incr_decr .)
    LBRACE          reduce using rule 57 (expr -> incr_decr .)
    AND             reduce using rule 57 (expr -> incr_decr .)
    OR              reduce using rule 57 (expr -> incr_decr .)
    RPAREN          reduce using rule 57 (expr -> incr_decr .)
    COMMA           reduce using rule 57 (expr -> incr_decr .)
    SEMICOLON       reduce using rule 57 (expr -> incr_decr .)
    RBRACKET        reduce using rule 57 (expr -> incr_decr .)
    ELLIPSIS        reduce using rule 57 (expr -> incr_decr .)
    COLON           reduce using rule 57 (expr -> incr_decr .)


state 48

    (63) for_line -> FOR IDENTIFIER . WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> FOR IDENTIFIER . WALRUS RANGE expr LBRACE basic_block RBRACE
    (44) expr -> IDENTIFIER .
    (50) expr -> IDENTIFIER . LBRACKET expr_list RBRACKET
    (51) expr -> IDENTIFIER . LBRACKET expr COLON expr RBRACKET
    (52) expr -> IDENTIFIER . LBRACKET expr COLON expr COLON expr RBRACKET
    (42) incr_decr -> IDENTIFIER . PLUSPLUS
    (43) incr_decr -> IDENTIFIER . MINUSMINUS

    WALRUS          shift and go to state 87
    PLUS            reduce using rule 44 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 44 (expr -> IDENTIFIER .)
    MUL             reduce using rule 44 (expr -> IDENTIFIER .)
    DIV             reduce using rule 44 (expr -> IDENTIFIER .)
    MOD             reduce using rule 44 (expr -> IDENTIFIER .)
    POW             reduce using rule 44 (expr -> IDENTIFIER .)
    LE              reduce using rule 44 (expr -> IDENTIFIER .)
    GE              reduce using rule 44 (expr -> IDENTIFIER .)
    LT              reduce using rule 44 (expr -> IDENTIFIER .)
    GT              reduce using rule 44 (expr -> IDENTIFIER .)
    EQ              reduce using rule 44 (expr -> IDENTIFIER .)
    NE              reduce using rule 44 (expr -> IDENTIFIER .)
    LBRACE          reduce using rule 44 (expr -> IDENTIFIER .)
    AND             reduce using rule 44 (expr -> IDENTIFIER .)
    OR              reduce using rule 44 (expr -> IDENTIFIER .)
    LBRACKET        shift and go to state 81
    PLUSPLUS        shift and go to state 33
    MINUSMINUS      shift and go to state 34


state 49

    (65) while_line -> FOR cond_list . LBRACE basic_block RBRACE
    (59) cond_list -> cond_list . AND expr
    (60) cond_list -> cond_list . OR expr

    LBRACE          shift and go to state 88
    AND             shift and go to state 66
    OR              shift and go to state 67


state 50

    (53) func_line -> FUNC IDENTIFIER . LPAREN expr_list RPAREN LBRACE basic_block RBRACE

    LPAREN          shift and go to state 89


state 51

    (62) else_line -> ELSE LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 90
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 52

    (12) statement -> PRINT LPAREN expr_list . RPAREN
    (27) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 91
    COMMA           shift and go to state 92


state 53

    (25) expr_list -> expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr
    (58) cond_list -> expr .

  ! reduce/reduce conflict for RPAREN resolved using rule 25 (expr_list -> expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (expr_list -> expr .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (expr_list -> expr .)
    RPAREN          reduce using rule 25 (expr_list -> expr .)
    COMMA           reduce using rule 25 (expr_list -> expr .)
    RBRACKET        reduce using rule 25 (expr_list -> expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79
    AND             reduce using rule 58 (cond_list -> expr .)
    OR              reduce using rule 58 (cond_list -> expr .)

  ! RPAREN          [ reduce using rule 58 (cond_list -> expr .) ]
  ! COMMA           [ reduce using rule 58 (cond_list -> expr .) ]
  ! RBRACKET        [ reduce using rule 58 (cond_list -> expr .) ]


state 54

    (26) expr_list -> cond_list .
    (59) cond_list -> cond_list . AND expr
    (60) cond_list -> cond_list . OR expr

    RPAREN          reduce using rule 26 (expr_list -> cond_list .)
    COMMA           reduce using rule 26 (expr_list -> cond_list .)
    RBRACKET        reduce using rule 26 (expr_list -> cond_list .)
    AND             shift and go to state 66
    OR              shift and go to state 67


state 55

    (13) statement -> LET IDENTIFIER EQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 93
    incr_decr                      shift and go to state 47

state 56

    (15) statement -> IDENTIFIER EQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 15 (statement -> IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 57

    (16) statement -> IDENTIFIER PLUSEQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 16 (statement -> IDENTIFIER PLUSEQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 58

    (17) statement -> IDENTIFIER MINUSEQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 17 (statement -> IDENTIFIER MINUSEQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 59

    (18) statement -> IDENTIFIER MULEQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 18 (statement -> IDENTIFIER MULEQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 60

    (19) statement -> IDENTIFIER DIVEQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 19 (statement -> IDENTIFIER DIVEQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 61

    (20) statement -> IDENTIFIER MODEQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 20 (statement -> IDENTIFIER MODEQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 62

    (21) statement -> IDENTIFIER POWEQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 21 (statement -> IDENTIFIER POWEQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 63

    (23) statement -> IDENTIFIER LBRACKET expr_list . RBRACKET EQUALS expr
    (27) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 94
    COMMA           shift and go to state 92


state 64

    (24) statement -> IDENTIFIER LPAREN expr_list . RPAREN
    (27) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 95
    COMMA           shift and go to state 92


state 65

    (61) if_line -> IF cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 96
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 66

    (59) cond_list -> cond_list AND . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 97
    incr_decr                      shift and go to state 47

state 67

    (60) cond_list -> cond_list OR . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 98
    incr_decr                      shift and go to state 47

state 68

    (29) expr -> expr PLUS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 99
    incr_decr                      shift and go to state 47

state 69

    (30) expr -> expr MINUS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 100
    incr_decr                      shift and go to state 47

state 70

    (31) expr -> expr MUL . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 101
    incr_decr                      shift and go to state 47

state 71

    (32) expr -> expr DIV . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 102
    incr_decr                      shift and go to state 47

state 72

    (33) expr -> expr MOD . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 103
    incr_decr                      shift and go to state 47

state 73

    (34) expr -> expr POW . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 104
    incr_decr                      shift and go to state 47

state 74

    (35) expr -> expr LE . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 105
    incr_decr                      shift and go to state 47

state 75

    (36) expr -> expr GE . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 106
    incr_decr                      shift and go to state 47

state 76

    (37) expr -> expr LT . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 107
    incr_decr                      shift and go to state 47

state 77

    (38) expr -> expr GT . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 108
    incr_decr                      shift and go to state 47

state 78

    (39) expr -> expr EQ . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 109
    incr_decr                      shift and go to state 47

state 79

    (40) expr -> expr NE . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 110
    incr_decr                      shift and go to state 47

state 80

    (28) expr -> LET IDENTIFIER .

    PLUS            reduce using rule 28 (expr -> LET IDENTIFIER .)
    MINUS           reduce using rule 28 (expr -> LET IDENTIFIER .)
    MUL             reduce using rule 28 (expr -> LET IDENTIFIER .)
    DIV             reduce using rule 28 (expr -> LET IDENTIFIER .)
    MOD             reduce using rule 28 (expr -> LET IDENTIFIER .)
    POW             reduce using rule 28 (expr -> LET IDENTIFIER .)
    LE              reduce using rule 28 (expr -> LET IDENTIFIER .)
    GE              reduce using rule 28 (expr -> LET IDENTIFIER .)
    LT              reduce using rule 28 (expr -> LET IDENTIFIER .)
    GT              reduce using rule 28 (expr -> LET IDENTIFIER .)
    EQ              reduce using rule 28 (expr -> LET IDENTIFIER .)
    NE              reduce using rule 28 (expr -> LET IDENTIFIER .)
    LBRACE          reduce using rule 28 (expr -> LET IDENTIFIER .)
    AND             reduce using rule 28 (expr -> LET IDENTIFIER .)
    OR              reduce using rule 28 (expr -> LET IDENTIFIER .)
    RPAREN          reduce using rule 28 (expr -> LET IDENTIFIER .)
    COMMA           reduce using rule 28 (expr -> LET IDENTIFIER .)
    SEMICOLON       reduce using rule 28 (expr -> LET IDENTIFIER .)
    RBRACKET        reduce using rule 28 (expr -> LET IDENTIFIER .)
    ELLIPSIS        reduce using rule 28 (expr -> LET IDENTIFIER .)
    COLON           reduce using rule 28 (expr -> LET IDENTIFIER .)


state 81

    (50) expr -> IDENTIFIER LBRACKET . expr_list RBRACKET
    (51) expr -> IDENTIFIER LBRACKET . expr COLON expr RBRACKET
    (52) expr -> IDENTIFIER LBRACKET . expr COLON expr COLON expr RBRACKET
    (25) expr_list -> . expr
    (26) expr_list -> . cond_list
    (27) expr_list -> . expr_list COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr_list                      shift and go to state 111
    expr                           shift and go to state 112
    cond_list                      shift and go to state 54
    incr_decr                      shift and go to state 47

state 82

    (41) expr -> MINUS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 41 (expr -> MINUS expr .)
    MINUS           reduce using rule 41 (expr -> MINUS expr .)
    MUL             reduce using rule 41 (expr -> MINUS expr .)
    DIV             reduce using rule 41 (expr -> MINUS expr .)
    MOD             reduce using rule 41 (expr -> MINUS expr .)
    POW             reduce using rule 41 (expr -> MINUS expr .)
    LE              reduce using rule 41 (expr -> MINUS expr .)
    GE              reduce using rule 41 (expr -> MINUS expr .)
    LT              reduce using rule 41 (expr -> MINUS expr .)
    GT              reduce using rule 41 (expr -> MINUS expr .)
    EQ              reduce using rule 41 (expr -> MINUS expr .)
    NE              reduce using rule 41 (expr -> MINUS expr .)
    LBRACE          reduce using rule 41 (expr -> MINUS expr .)
    AND             reduce using rule 41 (expr -> MINUS expr .)
    OR              reduce using rule 41 (expr -> MINUS expr .)
    RPAREN          reduce using rule 41 (expr -> MINUS expr .)
    COMMA           reduce using rule 41 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 41 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 41 (expr -> MINUS expr .)
    ELLIPSIS        reduce using rule 41 (expr -> MINUS expr .)
    COLON           reduce using rule 41 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]
  ! MOD             [ shift and go to state 72 ]
  ! POW             [ shift and go to state 73 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 83

    (48) expr -> LBRACKET expr_list . RBRACKET
    (27) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 113
    COMMA           shift and go to state 92


state 84

    (49) expr -> LBRACKET range . RBRACKET

    RBRACKET        shift and go to state 114


state 85

    (25) expr_list -> expr .
    (66) range -> expr . ELLIPSIS expr
    (67) range -> expr . ELLIPSIS expr COMMA expr
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr
    (58) cond_list -> expr .

  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (expr_list -> expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (expr_list -> expr .)
    RBRACKET        reduce using rule 25 (expr_list -> expr .)
    COMMA           reduce using rule 25 (expr_list -> expr .)
    ELLIPSIS        shift and go to state 115
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79
    AND             reduce using rule 58 (cond_list -> expr .)
    OR              reduce using rule 58 (cond_list -> expr .)

  ! RBRACKET        [ reduce using rule 58 (cond_list -> expr .) ]
  ! COMMA           [ reduce using rule 58 (cond_list -> expr .) ]


state 86

    (56) expr -> LPAREN expr . RPAREN
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 87

    (63) for_line -> FOR IDENTIFIER WALRUS . RANGE range LBRACE basic_block RBRACE
    (64) for_line -> FOR IDENTIFIER WALRUS . RANGE expr LBRACE basic_block RBRACE

    RANGE           shift and go to state 117


state 88

    (65) while_line -> FOR cond_list LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 118
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 89

    (53) func_line -> FUNC IDENTIFIER LPAREN . expr_list RPAREN LBRACE basic_block RBRACE
    (25) expr_list -> . expr
    (26) expr_list -> . cond_list
    (27) expr_list -> . expr_list COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (58) cond_list -> . expr
    (59) cond_list -> . cond_list AND expr
    (60) cond_list -> . cond_list OR expr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr_list                      shift and go to state 119
    expr                           shift and go to state 53
    cond_list                      shift and go to state 54
    incr_decr                      shift and go to state 47

state 90

    (62) else_line -> ELSE LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    RBRACE          shift and go to state 120
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 91

    (12) statement -> PRINT LPAREN expr_list RPAREN .

    SEMICOLON       reduce using rule 12 (statement -> PRINT LPAREN expr_list RPAREN .)


state 92

    (27) expr_list -> expr_list COMMA . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 121
    incr_decr                      shift and go to state 47

state 93

    (13) statement -> LET IDENTIFIER EQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 13 (statement -> LET IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 94

    (23) statement -> IDENTIFIER LBRACKET expr_list RBRACKET . EQUALS expr

    EQUALS          shift and go to state 122


state 95

    (24) statement -> IDENTIFIER LPAREN expr_list RPAREN .

    SEMICOLON       reduce using rule 24 (statement -> IDENTIFIER LPAREN expr_list RPAREN .)


state 96

    (61) if_line -> IF cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    RBRACE          shift and go to state 123
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 97

    (59) cond_list -> cond_list AND expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    LBRACE          reduce using rule 59 (cond_list -> cond_list AND expr .)
    AND             reduce using rule 59 (cond_list -> cond_list AND expr .)
    OR              reduce using rule 59 (cond_list -> cond_list AND expr .)
    RPAREN          reduce using rule 59 (cond_list -> cond_list AND expr .)
    COMMA           reduce using rule 59 (cond_list -> cond_list AND expr .)
    RBRACKET        reduce using rule 59 (cond_list -> cond_list AND expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 98

    (60) cond_list -> cond_list OR expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    LBRACE          reduce using rule 60 (cond_list -> cond_list OR expr .)
    AND             reduce using rule 60 (cond_list -> cond_list OR expr .)
    OR              reduce using rule 60 (cond_list -> cond_list OR expr .)
    RPAREN          reduce using rule 60 (cond_list -> cond_list OR expr .)
    COMMA           reduce using rule 60 (cond_list -> cond_list OR expr .)
    RBRACKET        reduce using rule 60 (cond_list -> cond_list OR expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 99

    (29) expr -> expr PLUS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 29 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 29 (expr -> expr PLUS expr .)
    LE              reduce using rule 29 (expr -> expr PLUS expr .)
    GE              reduce using rule 29 (expr -> expr PLUS expr .)
    LT              reduce using rule 29 (expr -> expr PLUS expr .)
    GT              reduce using rule 29 (expr -> expr PLUS expr .)
    EQ              reduce using rule 29 (expr -> expr PLUS expr .)
    NE              reduce using rule 29 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 29 (expr -> expr PLUS expr .)
    AND             reduce using rule 29 (expr -> expr PLUS expr .)
    OR              reduce using rule 29 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 29 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 29 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 29 (expr -> expr PLUS expr .)
    ELLIPSIS        reduce using rule 29 (expr -> expr PLUS expr .)
    COLON           reduce using rule 29 (expr -> expr PLUS expr .)
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73

  ! MUL             [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! POW             [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 100

    (30) expr -> expr MINUS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 30 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 30 (expr -> expr MINUS expr .)
    LE              reduce using rule 30 (expr -> expr MINUS expr .)
    GE              reduce using rule 30 (expr -> expr MINUS expr .)
    LT              reduce using rule 30 (expr -> expr MINUS expr .)
    GT              reduce using rule 30 (expr -> expr MINUS expr .)
    EQ              reduce using rule 30 (expr -> expr MINUS expr .)
    NE              reduce using rule 30 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 30 (expr -> expr MINUS expr .)
    AND             reduce using rule 30 (expr -> expr MINUS expr .)
    OR              reduce using rule 30 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 30 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 30 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 30 (expr -> expr MINUS expr .)
    ELLIPSIS        reduce using rule 30 (expr -> expr MINUS expr .)
    COLON           reduce using rule 30 (expr -> expr MINUS expr .)
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73

  ! MUL             [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! POW             [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 101

    (31) expr -> expr MUL expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 31 (expr -> expr MUL expr .)
    MINUS           reduce using rule 31 (expr -> expr MUL expr .)
    MUL             reduce using rule 31 (expr -> expr MUL expr .)
    DIV             reduce using rule 31 (expr -> expr MUL expr .)
    MOD             reduce using rule 31 (expr -> expr MUL expr .)
    LE              reduce using rule 31 (expr -> expr MUL expr .)
    GE              reduce using rule 31 (expr -> expr MUL expr .)
    LT              reduce using rule 31 (expr -> expr MUL expr .)
    GT              reduce using rule 31 (expr -> expr MUL expr .)
    EQ              reduce using rule 31 (expr -> expr MUL expr .)
    NE              reduce using rule 31 (expr -> expr MUL expr .)
    LBRACE          reduce using rule 31 (expr -> expr MUL expr .)
    AND             reduce using rule 31 (expr -> expr MUL expr .)
    OR              reduce using rule 31 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 31 (expr -> expr MUL expr .)
    COMMA           reduce using rule 31 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 31 (expr -> expr MUL expr .)
    ELLIPSIS        reduce using rule 31 (expr -> expr MUL expr .)
    COLON           reduce using rule 31 (expr -> expr MUL expr .)
    POW             shift and go to state 73

  ! POW             [ reduce using rule 31 (expr -> expr MUL expr .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]
  ! MOD             [ shift and go to state 72 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 102

    (32) expr -> expr DIV expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 32 (expr -> expr DIV expr .)
    MINUS           reduce using rule 32 (expr -> expr DIV expr .)
    MUL             reduce using rule 32 (expr -> expr DIV expr .)
    DIV             reduce using rule 32 (expr -> expr DIV expr .)
    MOD             reduce using rule 32 (expr -> expr DIV expr .)
    LE              reduce using rule 32 (expr -> expr DIV expr .)
    GE              reduce using rule 32 (expr -> expr DIV expr .)
    LT              reduce using rule 32 (expr -> expr DIV expr .)
    GT              reduce using rule 32 (expr -> expr DIV expr .)
    EQ              reduce using rule 32 (expr -> expr DIV expr .)
    NE              reduce using rule 32 (expr -> expr DIV expr .)
    LBRACE          reduce using rule 32 (expr -> expr DIV expr .)
    AND             reduce using rule 32 (expr -> expr DIV expr .)
    OR              reduce using rule 32 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 32 (expr -> expr DIV expr .)
    COMMA           reduce using rule 32 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 32 (expr -> expr DIV expr .)
    RBRACKET        reduce using rule 32 (expr -> expr DIV expr .)
    ELLIPSIS        reduce using rule 32 (expr -> expr DIV expr .)
    COLON           reduce using rule 32 (expr -> expr DIV expr .)
    POW             shift and go to state 73

  ! POW             [ reduce using rule 32 (expr -> expr DIV expr .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]
  ! MOD             [ shift and go to state 72 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 103

    (33) expr -> expr MOD expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 33 (expr -> expr MOD expr .)
    MINUS           reduce using rule 33 (expr -> expr MOD expr .)
    MUL             reduce using rule 33 (expr -> expr MOD expr .)
    DIV             reduce using rule 33 (expr -> expr MOD expr .)
    MOD             reduce using rule 33 (expr -> expr MOD expr .)
    LE              reduce using rule 33 (expr -> expr MOD expr .)
    GE              reduce using rule 33 (expr -> expr MOD expr .)
    LT              reduce using rule 33 (expr -> expr MOD expr .)
    GT              reduce using rule 33 (expr -> expr MOD expr .)
    EQ              reduce using rule 33 (expr -> expr MOD expr .)
    NE              reduce using rule 33 (expr -> expr MOD expr .)
    LBRACE          reduce using rule 33 (expr -> expr MOD expr .)
    AND             reduce using rule 33 (expr -> expr MOD expr .)
    OR              reduce using rule 33 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 33 (expr -> expr MOD expr .)
    COMMA           reduce using rule 33 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 33 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 33 (expr -> expr MOD expr .)
    ELLIPSIS        reduce using rule 33 (expr -> expr MOD expr .)
    COLON           reduce using rule 33 (expr -> expr MOD expr .)
    POW             shift and go to state 73

  ! POW             [ reduce using rule 33 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]
  ! MOD             [ shift and go to state 72 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 104

    (34) expr -> expr POW expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    PLUS            reduce using rule 34 (expr -> expr POW expr .)
    MINUS           reduce using rule 34 (expr -> expr POW expr .)
    MUL             reduce using rule 34 (expr -> expr POW expr .)
    DIV             reduce using rule 34 (expr -> expr POW expr .)
    MOD             reduce using rule 34 (expr -> expr POW expr .)
    LE              reduce using rule 34 (expr -> expr POW expr .)
    GE              reduce using rule 34 (expr -> expr POW expr .)
    LT              reduce using rule 34 (expr -> expr POW expr .)
    GT              reduce using rule 34 (expr -> expr POW expr .)
    EQ              reduce using rule 34 (expr -> expr POW expr .)
    NE              reduce using rule 34 (expr -> expr POW expr .)
    LBRACE          reduce using rule 34 (expr -> expr POW expr .)
    AND             reduce using rule 34 (expr -> expr POW expr .)
    OR              reduce using rule 34 (expr -> expr POW expr .)
    RPAREN          reduce using rule 34 (expr -> expr POW expr .)
    COMMA           reduce using rule 34 (expr -> expr POW expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr POW expr .)
    RBRACKET        reduce using rule 34 (expr -> expr POW expr .)
    ELLIPSIS        reduce using rule 34 (expr -> expr POW expr .)
    COLON           reduce using rule 34 (expr -> expr POW expr .)
    POW             shift and go to state 73

  ! POW             [ reduce using rule 34 (expr -> expr POW expr .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]
  ! MOD             [ shift and go to state 72 ]
  ! LE              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! GT              [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NE              [ shift and go to state 79 ]


state 105

    (35) expr -> expr LE expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LBRACE          reduce using rule 35 (expr -> expr LE expr .)
    AND             reduce using rule 35 (expr -> expr LE expr .)
    OR              reduce using rule 35 (expr -> expr LE expr .)
    RPAREN          reduce using rule 35 (expr -> expr LE expr .)
    COMMA           reduce using rule 35 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 35 (expr -> expr LE expr .)
    ELLIPSIS        reduce using rule 35 (expr -> expr LE expr .)
    COLON           reduce using rule 35 (expr -> expr LE expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79

  ! PLUS            [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! POW             [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 35 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 35 (expr -> expr LE expr .) ]


state 106

    (36) expr -> expr GE expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LBRACE          reduce using rule 36 (expr -> expr GE expr .)
    AND             reduce using rule 36 (expr -> expr GE expr .)
    OR              reduce using rule 36 (expr -> expr GE expr .)
    RPAREN          reduce using rule 36 (expr -> expr GE expr .)
    COMMA           reduce using rule 36 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 36 (expr -> expr GE expr .)
    ELLIPSIS        reduce using rule 36 (expr -> expr GE expr .)
    COLON           reduce using rule 36 (expr -> expr GE expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79

  ! PLUS            [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! POW             [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 36 (expr -> expr GE expr .) ]


state 107

    (37) expr -> expr LT expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LBRACE          reduce using rule 37 (expr -> expr LT expr .)
    AND             reduce using rule 37 (expr -> expr LT expr .)
    OR              reduce using rule 37 (expr -> expr LT expr .)
    RPAREN          reduce using rule 37 (expr -> expr LT expr .)
    COMMA           reduce using rule 37 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 37 (expr -> expr LT expr .)
    ELLIPSIS        reduce using rule 37 (expr -> expr LT expr .)
    COLON           reduce using rule 37 (expr -> expr LT expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79

  ! PLUS            [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! POW             [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 37 (expr -> expr LT expr .) ]


state 108

    (38) expr -> expr GT expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LBRACE          reduce using rule 38 (expr -> expr GT expr .)
    AND             reduce using rule 38 (expr -> expr GT expr .)
    OR              reduce using rule 38 (expr -> expr GT expr .)
    RPAREN          reduce using rule 38 (expr -> expr GT expr .)
    COMMA           reduce using rule 38 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 38 (expr -> expr GT expr .)
    ELLIPSIS        reduce using rule 38 (expr -> expr GT expr .)
    COLON           reduce using rule 38 (expr -> expr GT expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79

  ! PLUS            [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! POW             [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 38 (expr -> expr GT expr .) ]


state 109

    (39) expr -> expr EQ expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LBRACE          reduce using rule 39 (expr -> expr EQ expr .)
    AND             reduce using rule 39 (expr -> expr EQ expr .)
    OR              reduce using rule 39 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 39 (expr -> expr EQ expr .)
    COMMA           reduce using rule 39 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 39 (expr -> expr EQ expr .)
    ELLIPSIS        reduce using rule 39 (expr -> expr EQ expr .)
    COLON           reduce using rule 39 (expr -> expr EQ expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79

  ! PLUS            [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! POW             [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 39 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 39 (expr -> expr EQ expr .) ]


state 110

    (40) expr -> expr NE expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LBRACE          reduce using rule 40 (expr -> expr NE expr .)
    AND             reduce using rule 40 (expr -> expr NE expr .)
    OR              reduce using rule 40 (expr -> expr NE expr .)
    RPAREN          reduce using rule 40 (expr -> expr NE expr .)
    COMMA           reduce using rule 40 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 40 (expr -> expr NE expr .)
    ELLIPSIS        reduce using rule 40 (expr -> expr NE expr .)
    COLON           reduce using rule 40 (expr -> expr NE expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79

  ! PLUS            [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! POW             [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 40 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 40 (expr -> expr NE expr .) ]


state 111

    (50) expr -> IDENTIFIER LBRACKET expr_list . RBRACKET
    (27) expr_list -> expr_list . COMMA expr

    RBRACKET        shift and go to state 124
    COMMA           shift and go to state 92


state 112

    (51) expr -> IDENTIFIER LBRACKET expr . COLON expr RBRACKET
    (52) expr -> IDENTIFIER LBRACKET expr . COLON expr COLON expr RBRACKET
    (25) expr_list -> expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr
    (58) cond_list -> expr .

  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (expr_list -> expr .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (expr_list -> expr .)
    COLON           shift and go to state 125
    RBRACKET        reduce using rule 25 (expr_list -> expr .)
    COMMA           reduce using rule 25 (expr_list -> expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79
    AND             reduce using rule 58 (cond_list -> expr .)
    OR              reduce using rule 58 (cond_list -> expr .)

  ! RBRACKET        [ reduce using rule 58 (cond_list -> expr .) ]
  ! COMMA           [ reduce using rule 58 (cond_list -> expr .) ]


state 113

    (48) expr -> LBRACKET expr_list RBRACKET .

    PLUS            reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    SEMICOLON       reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    ELLIPSIS        reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 48 (expr -> LBRACKET expr_list RBRACKET .)


state 114

    (49) expr -> LBRACKET range RBRACKET .

    PLUS            reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    MINUS           reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    MUL             reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    DIV             reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    MOD             reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    POW             reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    LE              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    GE              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    LT              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    GT              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    EQ              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    NE              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    LBRACE          reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    AND             reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    OR              reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    RPAREN          reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    COMMA           reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    SEMICOLON       reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    RBRACKET        reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    ELLIPSIS        reduce using rule 49 (expr -> LBRACKET range RBRACKET .)
    COLON           reduce using rule 49 (expr -> LBRACKET range RBRACKET .)


state 115

    (66) range -> expr ELLIPSIS . expr
    (67) range -> expr ELLIPSIS . expr COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 126
    incr_decr                      shift and go to state 47

state 116

    (56) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    POW             reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    ELLIPSIS        reduce using rule 56 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 56 (expr -> LPAREN expr RPAREN .)


state 117

    (63) for_line -> FOR IDENTIFIER WALRUS RANGE . range LBRACE basic_block RBRACE
    (64) for_line -> FOR IDENTIFIER WALRUS RANGE . expr LBRACE basic_block RBRACE
    (66) range -> . expr ELLIPSIS expr
    (67) range -> . expr ELLIPSIS expr COMMA expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    range                          shift and go to state 127
    expr                           shift and go to state 128
    incr_decr                      shift and go to state 47

state 118

    (65) while_line -> FOR cond_list LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    RBRACE          shift and go to state 129
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 119

    (53) func_line -> FUNC IDENTIFIER LPAREN expr_list . RPAREN LBRACE basic_block RBRACE
    (27) expr_list -> expr_list . COMMA expr

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 92


state 120

    (62) else_line -> ELSE LBRACE basic_block RBRACE .

    PRINT           reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    LET             reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    IF              reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FOR             reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    $end            reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 62 (else_line -> ELSE LBRACE basic_block RBRACE .)


state 121

    (27) expr_list -> expr_list COMMA expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    RPAREN          reduce using rule 27 (expr_list -> expr_list COMMA expr .)
    COMMA           reduce using rule 27 (expr_list -> expr_list COMMA expr .)
    RBRACKET        reduce using rule 27 (expr_list -> expr_list COMMA expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 122

    (23) statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 131
    incr_decr                      shift and go to state 47

state 123

    (61) if_line -> IF cond_list LBRACE basic_block RBRACE .

    ELSE            reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    PRINT           reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 61 (if_line -> IF cond_list LBRACE basic_block RBRACE .)


state 124

    (50) expr -> IDENTIFIER LBRACKET expr_list RBRACKET .

    PLUS            reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    POW             reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    SEMICOLON       reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    ELLIPSIS        reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 50 (expr -> IDENTIFIER LBRACKET expr_list RBRACKET .)


state 125

    (51) expr -> IDENTIFIER LBRACKET expr COLON . expr RBRACKET
    (52) expr -> IDENTIFIER LBRACKET expr COLON . expr COLON expr RBRACKET
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 132
    incr_decr                      shift and go to state 47

state 126

    (66) range -> expr ELLIPSIS expr .
    (67) range -> expr ELLIPSIS expr . COMMA expr
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    RBRACKET        reduce using rule 66 (range -> expr ELLIPSIS expr .)
    LBRACE          reduce using rule 66 (range -> expr ELLIPSIS expr .)
    COMMA           shift and go to state 133
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 127

    (63) for_line -> FOR IDENTIFIER WALRUS RANGE range . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 134


state 128

    (64) for_line -> FOR IDENTIFIER WALRUS RANGE expr . LBRACE basic_block RBRACE
    (66) range -> expr . ELLIPSIS expr
    (67) range -> expr . ELLIPSIS expr COMMA expr
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    LBRACE          shift and go to state 135
    ELLIPSIS        shift and go to state 115
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 129

    (65) while_line -> FOR cond_list LBRACE basic_block RBRACE .

    PRINT           reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    LET             reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    IF              reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    FOR             reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    $end            reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 65 (while_line -> FOR cond_list LBRACE basic_block RBRACE .)


state 130

    (53) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN . LBRACE basic_block RBRACE

    LBRACE          shift and go to state 136


state 131

    (23) statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    SEMICOLON       reduce using rule 23 (statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 132

    (51) expr -> IDENTIFIER LBRACKET expr COLON expr . RBRACKET
    (52) expr -> IDENTIFIER LBRACKET expr COLON expr . COLON expr RBRACKET
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    RBRACKET        shift and go to state 138
    COLON           shift and go to state 137
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 133

    (67) range -> expr ELLIPSIS expr COMMA . expr
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 139
    incr_decr                      shift and go to state 47

state 134

    (63) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 140
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 135

    (64) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 141
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 136

    (53) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE . basic_block RBRACE
    (4) basic_block -> . line_statement
    (5) basic_block -> . basic_block line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    basic_block                    shift and go to state 142
    line_statement                 shift and go to state 5
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 137

    (52) expr -> IDENTIFIER LBRACKET expr COLON expr COLON . expr RBRACKET
    (28) expr -> . LET IDENTIFIER
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr MUL expr
    (32) expr -> . expr DIV expr
    (33) expr -> . expr MOD expr
    (34) expr -> . expr POW expr
    (35) expr -> . expr LE expr
    (36) expr -> . expr GE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr EQ expr
    (40) expr -> . expr NE expr
    (41) expr -> . MINUS expr
    (44) expr -> . IDENTIFIER
    (45) expr -> . INTCONST
    (46) expr -> . FLOATCONST
    (47) expr -> . STRINGCONST
    (48) expr -> . LBRACKET expr_list RBRACKET
    (49) expr -> . LBRACKET range RBRACKET
    (50) expr -> . IDENTIFIER LBRACKET expr_list RBRACKET
    (51) expr -> . IDENTIFIER LBRACKET expr COLON expr RBRACKET
    (52) expr -> . IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET
    (54) expr -> . TRUE
    (55) expr -> . FALSE
    (56) expr -> . LPAREN expr RPAREN
    (57) expr -> . incr_decr
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    LET             shift and go to state 37
    MINUS           shift and go to state 39
    IDENTIFIER      shift and go to state 38
    INTCONST        shift and go to state 40
    FLOATCONST      shift and go to state 41
    STRINGCONST     shift and go to state 42
    LBRACKET        shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 46

    expr                           shift and go to state 143
    incr_decr                      shift and go to state 47

state 138

    (51) expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .

    PLUS            reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    MINUS           reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    MUL             reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    DIV             reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    MOD             reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    POW             reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    LE              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    GE              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    LT              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    GT              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    EQ              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    NE              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    LBRACE          reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    AND             reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    OR              reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    RPAREN          reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    COMMA           reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    SEMICOLON       reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    RBRACKET        reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    ELLIPSIS        reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)
    COLON           reduce using rule 51 (expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET .)


state 139

    (67) range -> expr ELLIPSIS expr COMMA expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    RBRACKET        reduce using rule 67 (range -> expr ELLIPSIS expr COMMA expr .)
    LBRACE          reduce using rule 67 (range -> expr ELLIPSIS expr COMMA expr .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 140

    (63) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    RBRACE          shift and go to state 144
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 141

    (64) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    RBRACE          shift and go to state 145
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 142

    (53) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block . RBRACE
    (5) basic_block -> basic_block . line_statement
    (6) line_statement -> . statement SEMICOLON
    (7) line_statement -> . if_line
    (8) line_statement -> . if_line else_line
    (9) line_statement -> . for_line
    (10) line_statement -> . while_line
    (11) line_statement -> . func_line
    (12) statement -> . PRINT LPAREN expr_list RPAREN
    (13) statement -> . LET IDENTIFIER EQUALS expr
    (14) statement -> . LET IDENTIFIER
    (15) statement -> . IDENTIFIER EQUALS expr
    (16) statement -> . IDENTIFIER PLUSEQUALS expr
    (17) statement -> . IDENTIFIER MINUSEQUALS expr
    (18) statement -> . IDENTIFIER MULEQUALS expr
    (19) statement -> . IDENTIFIER DIVEQUALS expr
    (20) statement -> . IDENTIFIER MODEQUALS expr
    (21) statement -> . IDENTIFIER POWEQUALS expr
    (22) statement -> . incr_decr
    (23) statement -> . IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr
    (24) statement -> . IDENTIFIER LPAREN expr_list RPAREN
    (61) if_line -> . IF cond_list LBRACE basic_block RBRACE
    (63) for_line -> . FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE
    (64) for_line -> . FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE
    (65) while_line -> . FOR cond_list LBRACE basic_block RBRACE
    (53) func_line -> . FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE
    (42) incr_decr -> . IDENTIFIER PLUSPLUS
    (43) incr_decr -> . IDENTIFIER MINUSMINUS

    RBRACE          shift and go to state 146
    PRINT           shift and go to state 11
    LET             shift and go to state 12
    IDENTIFIER      shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNC            shift and go to state 17

    line_statement                 shift and go to state 18
    statement                      shift and go to state 6
    if_line                        shift and go to state 7
    for_line                       shift and go to state 8
    while_line                     shift and go to state 9
    func_line                      shift and go to state 10
    incr_decr                      shift and go to state 14

state 143

    (52) expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr . RBRACKET
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . MUL expr
    (32) expr -> expr . DIV expr
    (33) expr -> expr . MOD expr
    (34) expr -> expr . POW expr
    (35) expr -> expr . LE expr
    (36) expr -> expr . GE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . EQ expr
    (40) expr -> expr . NE expr

    RBRACKET        shift and go to state 147
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71
    MOD             shift and go to state 72
    POW             shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75
    LT              shift and go to state 76
    GT              shift and go to state 77
    EQ              shift and go to state 78
    NE              shift and go to state 79


state 144

    (63) for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .

    PRINT           reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    LET             reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    IF              reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    FOR             reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    $end            reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 63 (for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE .)


state 145

    (64) for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .

    PRINT           reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    LET             reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    IF              reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    FOR             reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    $end            reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 64 (for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE .)


state 146

    (53) func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .

    PRINT           reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    LET             reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    IDENTIFIER      reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    IF              reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    FOR             reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    FUNC            reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    $end            reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)
    RBRACE          reduce using rule 53 (func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE .)


state 147

    (52) expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .

    PLUS            reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    MINUS           reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    MUL             reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    DIV             reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    MOD             reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    POW             reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    LE              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    GE              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    LT              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    GT              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    EQ              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    NE              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    LBRACE          reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    AND             reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    OR              reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    RPAREN          reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    COMMA           reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    SEMICOLON       reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    RBRACKET        reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    ELLIPSIS        reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)
    COLON           reduce using rule 52 (expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for LET in state 4 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 4 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MUL in state 105 resolved as shift
WARNING: shift/reduce conflict for DIV in state 105 resolved as shift
WARNING: shift/reduce conflict for MOD in state 105 resolved as shift
WARNING: shift/reduce conflict for POW in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NE in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MUL in state 106 resolved as shift
WARNING: shift/reduce conflict for DIV in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for POW in state 106 resolved as shift
WARNING: shift/reduce conflict for LE in state 106 resolved as shift
WARNING: shift/reduce conflict for GE in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NE in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MUL in state 107 resolved as shift
WARNING: shift/reduce conflict for DIV in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for POW in state 107 resolved as shift
WARNING: shift/reduce conflict for LE in state 107 resolved as shift
WARNING: shift/reduce conflict for GE in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NE in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MUL in state 108 resolved as shift
WARNING: shift/reduce conflict for DIV in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD in state 108 resolved as shift
WARNING: shift/reduce conflict for POW in state 108 resolved as shift
WARNING: shift/reduce conflict for LE in state 108 resolved as shift
WARNING: shift/reduce conflict for GE in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NE in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MUL in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for POW in state 109 resolved as shift
WARNING: shift/reduce conflict for LE in state 109 resolved as shift
WARNING: shift/reduce conflict for GE in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NE in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MUL in state 110 resolved as shift
WARNING: shift/reduce conflict for DIV in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for POW in state 110 resolved as shift
WARNING: shift/reduce conflict for LE in state 110 resolved as shift
WARNING: shift/reduce conflict for GE in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NE in state 110 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 53
WARNING: reduce/reduce conflict in state 85 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 85
WARNING: reduce/reduce conflict in state 112 resolved using rule (expr_list -> expr)
WARNING: rejected rule (cond_list -> expr) in state 112
