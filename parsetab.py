
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFFORleftLTLEGTGEEQNEleftPLUSMINUSleftMULDIVMODrightPOWrightNEGATEAND BREAK CASE COLON COMMA CONTINUE DEFAULT DIV DIVEQUALS ELLIPSIS ELSE EQ EQUALS FALSE FLOAT FLOATCONST FOR FROM GE GT IDENTIFIER IF INT INTCONST INTEGRATE LBRACE LBRACKET LE LET LPAREN LT MINUS MINUSEQUALS MINUSMINUS MOD MUL MULEQUALS NE NOT OR PERIOD PLUS PLUSEQUALS PLUSPLUS POW PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRINGCONST SWITCH TO TRUE TYPE WHILE\n        line_statement : statement_list SEMICOLON\n        \n        statement : decl_statement\n        \n        decl_statement : LET IDENTIFIER EQUALS expression\n                       | LET IDENTIFIER\n        \n        decl_statement : IDENTIFIER EQUALS expression\n        \n        statement_list : statement\n                       | statement_list SEMICOLON statement\n        \n        statement : PRINT LPAREN expr_list RPAREN\n        \n        expression : TRUE\n        \n        expression : FALSE\n        \n        expression : IDENTIFIER\n        \n        expression : FLOATCONST\n        \n        expression : INTCONST\n        \n        expression : STRINGCONST\n        \n        expression : MINUS expression %prec NEGATE\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression MOD expression\n                   | expression POW expression\n                   | expression GT expression\n                   | expression GE expression\n                   | expression LT expression\n                   | expression LE expression\n                   | expression EQ expression\n                   | expression NE expression\n        \n        expression : IDENTIFIER PLUSPLUS\n        \n        expression : IDENTIFIER MINUSMINUS\n        \n        expr_list : expression\n                  | expr_list COMMA expression\n\n        \n        expression : LPAREN expression RPAREN\n        empty :'
    
_lr_action_items = {'PRINT':([0,8,],[5,5,]),'LET':([0,8,],[6,6,]),'IDENTIFIER':([0,6,8,9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[7,10,7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'$end':([1,8,],[0,-1,]),'SEMICOLON':([2,3,4,10,12,16,17,18,19,20,21,24,26,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,],[8,-6,-2,-4,-7,-9,-10,-11,-12,-13,-14,-5,-8,-28,-29,-15,-3,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'LPAREN':([5,9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'EQUALS':([7,10,],[11,23,]),'TRUE':([9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FALSE':([9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FLOATCONST':([9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'INTCONST':([9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'STRINGCONST':([9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'MINUS':([9,11,13,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[22,22,22,29,-9,-10,-11,-12,-13,-14,22,22,29,29,22,22,22,22,22,22,22,22,22,22,22,22,22,-28,-29,-15,29,-32,29,-16,-17,-18,-19,-20,-21,29,29,29,29,29,29,]),'RPAREN':([14,15,16,17,18,19,20,21,25,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[26,-30,-9,-10,-11,-12,-13,-14,44,-28,-29,-15,-32,-31,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'COMMA':([14,15,16,17,18,19,20,21,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[27,-30,-9,-10,-11,-12,-13,-14,-28,-29,-15,-32,-31,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'PLUS':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[28,-9,-10,-11,-12,-13,-14,28,28,-28,-29,-15,28,-32,28,-16,-17,-18,-19,-20,-21,28,28,28,28,28,28,]),'MUL':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[30,-9,-10,-11,-12,-13,-14,30,30,-28,-29,-15,30,-32,30,30,30,-18,-19,-20,-21,30,30,30,30,30,30,]),'DIV':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[31,-9,-10,-11,-12,-13,-14,31,31,-28,-29,-15,31,-32,31,31,31,-18,-19,-20,-21,31,31,31,31,31,31,]),'MOD':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[32,-9,-10,-11,-12,-13,-14,32,32,-28,-29,-15,32,-32,32,32,32,-18,-19,-20,-21,32,32,32,32,32,32,]),'POW':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[33,-9,-10,-11,-12,-13,-14,33,33,-28,-29,-15,33,-32,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'GT':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[34,-9,-10,-11,-12,-13,-14,34,34,-28,-29,-15,34,-32,34,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'GE':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[35,-9,-10,-11,-12,-13,-14,35,35,-28,-29,-15,35,-32,35,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'LT':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[36,-9,-10,-11,-12,-13,-14,36,36,-28,-29,-15,36,-32,36,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'LE':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[37,-9,-10,-11,-12,-13,-14,37,37,-28,-29,-15,37,-32,37,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'EQ':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[38,-9,-10,-11,-12,-13,-14,38,38,-28,-29,-15,38,-32,38,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'NE':([15,16,17,18,19,20,21,24,25,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,],[39,-9,-10,-11,-12,-13,-14,39,39,-28,-29,-15,39,-32,39,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,]),'PLUSPLUS':([18,],[40,]),'MINUSMINUS':([18,],[41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'line_statement':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,8,],[3,12,]),'decl_statement':([0,8,],[4,4,]),'expr_list':([9,],[14,]),'expression':([9,11,13,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,],[15,24,25,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> line_statement","S'",1,None,None,None),
  ('line_statement -> statement_list SEMICOLON','line_statement',2,'p_line_statement','Parser.py',23),
  ('statement -> decl_statement','statement',1,'p_declaration_statement','Parser.py',29),
  ('decl_statement -> LET IDENTIFIER EQUALS expression','decl_statement',4,'p_declaration','Parser.py',35),
  ('decl_statement -> LET IDENTIFIER','decl_statement',2,'p_declaration','Parser.py',36),
  ('decl_statement -> IDENTIFIER EQUALS expression','decl_statement',3,'p_decl_assign','Parser.py',47),
  ('statement_list -> statement','statement_list',1,'p_multiple_statement','Parser.py',54),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_multiple_statement','Parser.py',55),
  ('statement -> PRINT LPAREN expr_list RPAREN','statement',4,'p_print_statement','Parser.py',66),
  ('expression -> TRUE','expression',1,'p_expression_bool_true','Parser.py',73),
  ('expression -> FALSE','expression',1,'p_expression_bool_false','Parser.py',79),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','Parser.py',85),
  ('expression -> FLOATCONST','expression',1,'p_expression_float','Parser.py',91),
  ('expression -> INTCONST','expression',1,'p_expression_integer','Parser.py',97),
  ('expression -> STRINGCONST','expression',1,'p_expression_string','Parser.py',103),
  ('expression -> MINUS expression','expression',2,'p_expression_neg','Parser.py',109),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser.py',115),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser.py',116),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','Parser.py',117),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','Parser.py',118),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser.py',119),
  ('expression -> expression POW expression','expression',3,'p_expression_binop','Parser.py',120),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','Parser.py',121),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','Parser.py',122),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','Parser.py',123),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','Parser.py',124),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','Parser.py',125),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','Parser.py',126),
  ('expression -> IDENTIFIER PLUSPLUS','expression',2,'p_expression_increment','Parser.py',132),
  ('expression -> IDENTIFIER MINUSMINUS','expression',2,'p_expression_decrement','Parser.py',138),
  ('expr_list -> expression','expr_list',1,'p_expression_list','Parser.py',144),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expression_list','Parser.py',145),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parens','Parser.py',156),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',164),
]
