
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONDleftPLUSMINUSleftMULDIVMODrightPOWAND BREAK CASE COLON COMMA CONTINUE DEFAULT DIV DIVEQUALS ELLIPSIS ELSE EQ EQUALS FALSE FLOAT FLOATCONST FOR FROM GE GT IDENTIFIER IF INT INTCONST INTEGRATE LBRACE LBRACKET LE LET LPAREN LT MINUS MINUSEQUALS MINUSMINUS MOD MUL MULEQUALS NE NOT OR PERIOD PLUS PLUSEQUALS PLUSPLUS POW PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRINGCONST SWITCH TO TRUE TYPE WHILE\n        program : commands\n        \n        commands : commands basic_block\n                 | empty\n        \n        basic_block : line_statement\n                    | basic_block line_statement\n        \n        line_statement : statement SEMICOLON\n        \n        line_statement : if_line\n                       | if_line else_line\n        \n        statement : PRINT LPAREN expr_list RPAREN\n        \n        statement : LET IDENTIFIER EQUALS expr\n        \n        statement : IDENTIFIER EQUALS expr\n        \n        expr_list : expr\n                  | cond_list\n                  | expr_list expr\n        \n        expr : expr PLUS expr\n             | expr MINUS expr\n             | expr MUL expr\n             | expr DIV expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LE expr\n             | expr GE expr\n             | expr LT expr\n             | expr GT expr\n             | expr EQ expr\n             | expr NE expr\n        \n        expr : expr PLUSPLUS\n        \n        expr : expr MINUSMINUS\n        \n        expr : IDENTIFIER\n        \n        expr : INTCONST\n        \n        expr : FLOATCONST\n        \n        expr : STRINGCONST\n        \n        expr : TRUE\n             | FALSE\n        \n        expr : LPAREN expr RPAREN\n        \n        cond_list : expr %prec COND\n                  | cond_list AND expr\n                  | cond_list OR expr\n        \n        if_line : IF cond_list LBRACE basic_block RBRACE\n        \n        else_line : ELSE LBRACE basic_block RBRACE\n        \n        empty :\n        '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,7,12,13,14,28,34,52,56,72,73,],[-41,8,-3,8,-4,-7,-5,-6,-8,8,8,8,8,-40,-39,]),'LET':([0,2,3,4,5,7,12,13,14,28,34,52,56,72,73,],[-41,9,-3,9,-4,-7,-5,-6,-8,9,9,9,9,-40,-39,]),'IDENTIFIER':([0,2,3,4,5,7,9,11,12,13,14,16,18,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-41,10,-3,10,-4,-7,17,21,-5,-6,-8,21,21,-29,-30,-31,-32,-33,-34,21,10,21,-12,-13,21,10,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-27,-28,10,-14,10,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,-40,-39,]),'IF':([0,2,3,4,5,7,12,13,14,28,34,52,56,72,73,],[-41,11,-3,11,-4,-7,-5,-6,-8,11,11,11,11,-40,-39,]),'$end':([0,1,2,3,4,5,7,12,13,14,72,73,],[-41,0,-1,-3,-2,-4,-7,-5,-6,-8,-40,-39,]),'RBRACE':([5,7,12,13,14,52,56,72,73,],[-4,-7,-5,-6,-8,72,73,-40,-39,]),'SEMICOLON':([6,21,22,23,24,25,26,33,49,50,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,],[13,-29,-30,-31,-32,-33,-34,-11,-27,-28,-9,-10,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'ELSE':([7,73,],[15,-39,]),'LPAREN':([8,11,16,18,21,22,23,24,25,26,27,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[16,27,27,27,-29,-30,-31,-32,-33,-34,27,27,-12,-13,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-27,-28,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'EQUALS':([10,17,],[18,32,]),'INTCONST':([11,16,18,21,22,23,24,25,26,27,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[22,22,22,-29,-30,-31,-32,-33,-34,22,22,-12,-13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-27,-28,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'FLOATCONST':([11,16,18,21,22,23,24,25,26,27,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[23,23,23,-29,-30,-31,-32,-33,-34,23,23,-12,-13,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-27,-28,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'STRINGCONST':([11,16,18,21,22,23,24,25,26,27,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[24,24,24,-29,-30,-31,-32,-33,-34,24,24,-12,-13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-27,-28,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'TRUE':([11,16,18,21,22,23,24,25,26,27,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[25,25,25,-29,-30,-31,-32,-33,-34,25,25,-12,-13,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-27,-28,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'FALSE':([11,16,18,21,22,23,24,25,26,27,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[26,26,26,-29,-30,-31,-32,-33,-34,26,26,-12,-13,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-27,-28,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'LBRACE':([15,19,20,21,22,23,24,25,26,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[28,34,-36,-29,-30,-31,-32,-33,-34,-27,-28,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'AND':([19,20,21,22,23,24,25,26,30,31,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[35,-36,-29,-30,-31,-32,-33,-34,-36,35,-27,-28,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'OR':([19,20,21,22,23,24,25,26,30,31,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[36,-36,-29,-30,-31,-32,-33,-34,-36,36,-27,-28,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),'PLUS':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[37,-29,-30,-31,-32,-33,-34,37,37,-27,-28,37,37,37,37,37,-15,-16,-17,-18,-19,-20,37,37,37,37,37,37,-35,]),'MINUS':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[38,-29,-30,-31,-32,-33,-34,38,38,-27,-28,38,38,38,38,38,-15,-16,-17,-18,-19,-20,38,38,38,38,38,38,-35,]),'MUL':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[39,-29,-30,-31,-32,-33,-34,39,39,-27,-28,39,39,39,39,39,39,39,-17,-18,-19,-20,39,39,39,39,39,39,-35,]),'DIV':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[40,-29,-30,-31,-32,-33,-34,40,40,-27,-28,40,40,40,40,40,40,40,-17,-18,-19,-20,40,40,40,40,40,40,-35,]),'MOD':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[41,-29,-30,-31,-32,-33,-34,41,41,-27,-28,41,41,41,41,41,41,41,-17,-18,-19,-20,41,41,41,41,41,41,-35,]),'POW':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[42,-29,-30,-31,-32,-33,-34,42,42,-27,-28,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-35,]),'LE':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[43,-29,-30,-31,-32,-33,-34,43,43,-27,-28,43,43,43,43,43,-15,-16,-17,-18,-19,-20,43,43,43,43,43,43,-35,]),'GE':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[44,-29,-30,-31,-32,-33,-34,44,44,-27,-28,44,44,44,44,44,-15,-16,-17,-18,-19,-20,44,44,44,44,44,44,-35,]),'LT':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[45,-29,-30,-31,-32,-33,-34,45,45,-27,-28,45,45,45,45,45,-15,-16,-17,-18,-19,-20,45,45,45,45,45,45,-35,]),'GT':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[46,-29,-30,-31,-32,-33,-34,46,46,-27,-28,46,46,46,46,46,-15,-16,-17,-18,-19,-20,46,46,46,46,46,46,-35,]),'EQ':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[47,-29,-30,-31,-32,-33,-34,47,47,-27,-28,47,47,47,47,47,-15,-16,-17,-18,-19,-20,47,47,47,47,47,47,-35,]),'NE':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[48,-29,-30,-31,-32,-33,-34,48,48,-27,-28,48,48,48,48,48,-15,-16,-17,-18,-19,-20,48,48,48,48,48,48,-35,]),'PLUSPLUS':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[49,-29,-30,-31,-32,-33,-34,49,49,-27,-28,49,49,49,49,49,-15,-16,-17,-18,-19,-20,49,49,49,49,49,49,-35,]),'MINUSMINUS':([20,21,22,23,24,25,26,30,33,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[50,-29,-30,-31,-32,-33,-34,50,50,-27,-28,50,50,50,50,50,-15,-16,-17,-18,-19,-20,50,50,50,50,50,50,-35,]),'RPAREN':([21,22,23,24,25,26,29,30,31,49,50,51,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,],[-29,-30,-31,-32,-33,-34,53,-12,-13,-27,-28,71,-14,-37,-38,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'commands':([0,],[2,]),'empty':([0,],[3,]),'basic_block':([2,28,34,],[4,52,56,]),'line_statement':([2,4,28,34,52,56,],[5,12,5,5,12,12,]),'statement':([2,4,28,34,52,56,],[6,6,6,6,6,6,]),'if_line':([2,4,28,34,52,56,],[7,7,7,7,7,7,]),'else_line':([7,],[14,]),'cond_list':([11,16,],[19,31,]),'expr':([11,16,18,27,29,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,],[20,30,33,51,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,]),'expr_list':([16,],[29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> commands','program',1,'p_program','Parser.py',20),
  ('commands -> commands basic_block','commands',2,'p_commands','Parser.py',27),
  ('commands -> empty','commands',1,'p_commands','Parser.py',28),
  ('basic_block -> line_statement','basic_block',1,'p_basic_block','Parser.py',39),
  ('basic_block -> basic_block line_statement','basic_block',2,'p_basic_block','Parser.py',40),
  ('line_statement -> statement SEMICOLON','line_statement',2,'p_line_statement','Parser.py',49),
  ('line_statement -> if_line','line_statement',1,'p_if_else_statement','Parser.py',56),
  ('line_statement -> if_line else_line','line_statement',2,'p_if_else_statement','Parser.py',57),
  ('statement -> PRINT LPAREN expr_list RPAREN','statement',4,'p_print_statement','Parser.py',68),
  ('statement -> LET IDENTIFIER EQUALS expr','statement',4,'p_assign','Parser.py',75),
  ('statement -> IDENTIFIER EQUALS expr','statement',3,'p_reassign','Parser.py',82),
  ('expr_list -> expr','expr_list',1,'p_expr_list','Parser.py',88),
  ('expr_list -> cond_list','expr_list',1,'p_expr_list','Parser.py',89),
  ('expr_list -> expr_list expr','expr_list',2,'p_expr_list','Parser.py',90),
  ('expr -> expr PLUS expr','expr',3,'p_binop','Parser.py',99),
  ('expr -> expr MINUS expr','expr',3,'p_binop','Parser.py',100),
  ('expr -> expr MUL expr','expr',3,'p_binop','Parser.py',101),
  ('expr -> expr DIV expr','expr',3,'p_binop','Parser.py',102),
  ('expr -> expr MOD expr','expr',3,'p_binop','Parser.py',103),
  ('expr -> expr POW expr','expr',3,'p_binop','Parser.py',104),
  ('expr -> expr LE expr','expr',3,'p_binop','Parser.py',105),
  ('expr -> expr GE expr','expr',3,'p_binop','Parser.py',106),
  ('expr -> expr LT expr','expr',3,'p_binop','Parser.py',107),
  ('expr -> expr GT expr','expr',3,'p_binop','Parser.py',108),
  ('expr -> expr EQ expr','expr',3,'p_binop','Parser.py',109),
  ('expr -> expr NE expr','expr',3,'p_binop','Parser.py',110),
  ('expr -> expr PLUSPLUS','expr',2,'p_increment','Parser.py',116),
  ('expr -> expr MINUSMINUS','expr',2,'p_decrement','Parser.py',122),
  ('expr -> IDENTIFIER','expr',1,'p_iden','Parser.py',128),
  ('expr -> INTCONST','expr',1,'p_integer_const','Parser.py',134),
  ('expr -> FLOATCONST','expr',1,'p_float_const','Parser.py',140),
  ('expr -> STRINGCONST','expr',1,'p_string_const','Parser.py',146),
  ('expr -> TRUE','expr',1,'p_boolean','Parser.py',152),
  ('expr -> FALSE','expr',1,'p_boolean','Parser.py',153),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_paren','Parser.py',165),
  ('cond_list -> expr','cond_list',1,'p_cond_list','Parser.py',171),
  ('cond_list -> cond_list AND expr','cond_list',3,'p_cond_list','Parser.py',172),
  ('cond_list -> cond_list OR expr','cond_list',3,'p_cond_list','Parser.py',173),
  ('if_line -> IF cond_list LBRACE basic_block RBRACE','if_line',5,'p_if_stmt','Parser.py',182),
  ('else_line -> ELSE LBRACE basic_block RBRACE','else_line',4,'p_else_line','Parser.py',189),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',197),
]
