
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONDleftPLUSMINUSleftMULDIVMODrightPOWrightNEGATEAND BREAK CASE COLON COMMA CONTINUE DEFAULT DIV DIVEQUALS ELLIPSIS ELSE EQ EQUALS FALSE FLOAT FLOATCONST FOR FROM FUNC GE GT IDENTIFIER IF INT INTCONST INTEGRATE LBRACE LBRACKET LE LEN LET LPAREN LT MINUS MINUSEQUALS MINUSMINUS MOD MODEQUALS MUL MULEQUALS NE NOT OR PERIOD PLUS PLUSEQUALS PLUSPLUS POW POWEQUALS PRINT RANGE RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRINGCONST SWITCH TO TRUE TYPE WALRUS\n        program : commands\n        \n        commands : commands basic_block\n                 | empty\n        \n        basic_block : line_statement\n                    | basic_block line_statement\n        \n        line_statement : statement SEMICOLON\n        \n        line_statement : if_line\n                       | if_line else_line\n        \n        line_statement : for_line\n                       | while_line\n                       | func_line\n        \n        statement : PRINT LPAREN expr_list RPAREN\n        \n        statement : LET IDENTIFIER EQUALS expr\n                  | LET IDENTIFIER\n        \n        statement : IDENTIFIER EQUALS expr\n        \n        statement : IDENTIFIER PLUSEQUALS expr\n                  | IDENTIFIER MINUSEQUALS expr\n                  | IDENTIFIER MULEQUALS expr\n                  | IDENTIFIER DIVEQUALS expr\n                  | IDENTIFIER MODEQUALS expr\n                  | IDENTIFIER POWEQUALS expr\n        \n        statement : incr_decr\n        \n        statement : IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr\n        \n        statement : func_call\n        \n        statement : IDENTIFIER LPAREN expr_list RPAREN EQUALS expr\n        \n        statement : RETURN expr_list\n        \n        expr_list : expr\n                  | cond_list\n                  | expr_list COMMA expr\n                  | empty\n        \n        expr : LET IDENTIFIER\n        \n        expr : expr PLUS expr\n             | expr MINUS expr\n             | expr MUL expr\n             | expr DIV expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LE expr\n             | expr GE expr\n             | expr LT expr\n             | expr GT expr\n             | expr EQ expr\n             | expr NE expr\n        \n        expr : MINUS expr %prec NEGATE\n        \n        incr_decr : IDENTIFIER PLUSPLUS\n                  | IDENTIFIER MINUSMINUS\n        \n        expr : IDENTIFIER\n        \n        expr : INTCONST\n        \n        expr : FLOATCONST\n        \n        expr : STRINGCONST\n        \n        expr : LBRACKET expr_list RBRACKET\n        \n        expr : LBRACKET range RBRACKET\n        \n        expr : IDENTIFIER LBRACKET expr_list RBRACKET\n        \n        expr : IDENTIFIER LBRACKET expr COLON expr RBRACKET\n             | IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET\n        \n        expr : TRUE\n             | FALSE\n        \n        expr : LPAREN expr RPAREN\n        \n        expr : incr_decr\n        \n        expr : func_call\n        \n        expr : LEN LPAREN expr RPAREN\n        \n        cond_list : expr %prec COND\n                  | cond_list AND expr\n                  | cond_list OR expr\n        \n        if_line : IF cond_list LBRACE basic_block RBRACE\n        \n        else_line : ELSE LBRACE basic_block RBRACE\n        \n        for_line : FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE\n        \n        for_line : FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE\n        \n        while_line : FOR cond_list LBRACE basic_block RBRACE\n        \n        range : expr ELLIPSIS expr\n              | expr ELLIPSIS expr COMMA expr\n        \n        func_line : FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE\n        \n        func_call : IDENTIFIER LPAREN expr_list RPAREN\n        \n        empty :\n        '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,7,8,9,10,20,21,22,59,95,97,99,127,129,131,139,142,148,149,150,154,155,156,158,159,160,],[-74,11,-3,11,-4,-7,-9,-10,-11,-5,-6,-8,11,11,11,11,11,11,-66,-65,-69,11,11,11,11,11,11,-67,-68,-72,]),'LET':([0,2,3,4,5,7,8,9,10,16,17,18,20,21,22,24,26,27,28,29,30,31,32,33,34,43,47,50,59,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,95,97,98,99,124,127,128,129,131,132,133,135,139,142,147,148,149,150,151,154,155,156,158,159,160,],[-74,12,-3,12,-4,-7,-9,-10,-11,41,41,41,-5,-6,-8,41,41,41,41,41,41,41,41,41,41,41,41,41,12,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,12,12,41,12,41,12,41,12,-66,41,41,41,-65,-69,41,12,12,12,41,12,12,12,-67,-68,-72,]),'IDENTIFIER':([0,2,3,4,5,7,8,9,10,12,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,41,43,47,50,59,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,95,97,98,99,124,127,128,129,131,132,133,135,139,142,147,148,149,150,151,154,155,156,158,159,160,],[-74,13,-3,13,-4,-7,-9,-10,-11,25,42,42,56,58,-5,-6,-8,42,42,42,42,42,42,42,42,42,42,86,42,42,42,13,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,13,13,42,13,42,13,42,13,-66,42,42,42,-65,-69,42,13,13,13,42,13,13,13,-67,-68,-72,]),'RETURN':([0,2,3,4,5,7,8,9,10,20,21,22,59,95,97,99,127,129,131,139,142,148,149,150,154,155,156,158,159,160,],[-74,16,-3,16,-4,-7,-9,-10,-11,-5,-6,-8,16,16,16,16,16,16,-66,-65,-69,16,16,16,16,16,16,-67,-68,-72,]),'IF':([0,2,3,4,5,7,8,9,10,20,21,22,59,95,97,99,127,129,131,139,142,148,149,150,154,155,156,158,159,160,],[-74,17,-3,17,-4,-7,-9,-10,-11,-5,-6,-8,17,17,17,17,17,17,-66,-65,-69,17,17,17,17,17,17,-67,-68,-72,]),'FOR':([0,2,3,4,5,7,8,9,10,20,21,22,59,95,97,99,127,129,131,139,142,148,149,150,154,155,156,158,159,160,],[-74,18,-3,18,-4,-7,-9,-10,-11,-5,-6,-8,18,18,18,18,18,18,-66,-65,-69,18,18,18,18,18,18,-67,-68,-72,]),'FUNC':([0,2,3,4,5,7,8,9,10,20,21,22,59,95,97,99,127,129,131,139,142,148,149,150,154,155,156,158,159,160,],[-74,19,-3,19,-4,-7,-9,-10,-11,-5,-6,-8,19,19,19,19,19,19,-66,-65,-69,19,19,19,19,19,19,-67,-68,-72,]),'$end':([0,1,2,3,4,5,7,8,9,10,20,21,22,131,139,142,158,159,160,],[-74,0,-1,-3,-2,-4,-7,-9,-10,-11,-5,-6,-8,-66,-65,-69,-67,-68,-72,]),'RBRACE':([5,7,8,9,10,20,21,22,99,127,129,131,139,142,154,155,156,158,159,160,],[-4,-7,-9,-10,-11,-5,-6,-8,131,139,142,-66,-65,-69,158,159,160,-67,-68,-72,]),'SEMICOLON':([6,14,15,16,25,35,36,37,38,39,40,42,44,45,46,48,49,51,52,62,63,64,65,66,67,68,86,89,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,125,134,136,138,144,145,152,161,],[21,-22,-24,-74,-14,-45,-46,-26,-27,-28,-30,-47,-48,-49,-50,-56,-57,-59,-60,-15,-16,-17,-18,-19,-20,-21,-31,-44,-12,-13,-73,-29,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,-51,-52,-58,-53,-73,-61,-23,-25,-54,-55,]),'ELSE':([7,139,],[23,-65,]),'LPAREN':([11,13,16,17,18,24,26,27,28,29,30,31,32,33,34,42,43,47,50,53,56,58,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[24,34,50,50,50,50,50,50,50,50,50,50,50,50,50,88,50,50,50,94,88,98,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'EQUALS':([13,25,102,103,],[26,61,132,133,]),'PLUSEQUALS':([13,],[27,]),'MINUSEQUALS':([13,],[28,]),'MULEQUALS':([13,],[29,]),'DIVEQUALS':([13,],[30,]),'MODEQUALS':([13,],[31,]),'POWEQUALS':([13,],[32,]),'LBRACKET':([13,16,17,18,24,26,27,28,29,30,31,32,33,34,42,43,47,50,56,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[33,47,47,47,47,47,47,47,47,47,47,47,47,47,87,47,47,47,87,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'PLUSPLUS':([13,42,56,],[35,35,35,]),'MINUSMINUS':([13,42,56,],[36,36,36,]),'MINUS':([16,17,18,24,26,27,28,29,30,31,32,33,34,35,36,38,42,43,44,45,46,47,48,49,50,51,52,55,56,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,94,98,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,124,125,126,128,132,133,134,135,136,137,138,141,144,145,146,147,151,152,153,157,161,],[43,43,43,43,43,43,43,43,43,43,43,43,43,-45,-46,73,-47,43,-48,-49,-50,43,-56,-57,43,-59,-60,73,-47,43,73,73,73,73,73,73,73,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-31,43,43,-44,73,73,43,43,73,73,-32,-33,-34,-35,-36,-37,73,73,73,73,73,73,73,73,73,-51,-52,43,-58,73,43,43,43,-53,43,-73,73,-61,73,73,73,73,43,43,-54,73,73,-55,]),'INTCONST':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'FLOATCONST':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'STRINGCONST':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'TRUE':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'FALSE':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'LEN':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'COMMA':([16,24,33,34,35,36,37,38,39,40,42,44,45,46,47,48,49,51,52,60,69,70,86,87,88,89,90,92,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,130,134,136,137,138,152,161,],[-74,-74,-74,-74,-45,-46,71,-27,-28,-30,-47,-48,-49,-50,-74,-56,-57,-59,-60,71,71,71,-31,-74,-74,-44,71,-27,-74,-29,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,71,-27,71,-51,-52,-58,71,-53,-73,147,-61,-54,-55,]),'LBRACE':([23,35,36,42,44,45,46,48,49,51,52,54,55,56,57,86,89,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,125,134,136,137,138,140,141,143,152,153,161,],[59,-45,-46,-47,-48,-49,-50,-56,-57,-59,-60,95,-62,-47,97,-31,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,-51,-52,-58,-53,-73,-70,-61,148,149,150,-54,-71,-55,]),'RPAREN':([24,34,35,36,38,39,40,42,44,45,46,48,49,51,52,60,70,86,88,89,93,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,130,134,136,138,152,161,],[-74,-74,-45,-46,-27,-28,-30,-47,-48,-49,-50,-56,-57,-59,-60,100,103,-31,-74,-44,125,-74,-29,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,136,-51,-52,-58,138,143,-53,-73,-61,-54,-55,]),'RBRACKET':([33,35,36,38,39,40,42,44,45,46,47,48,49,51,52,69,86,87,89,90,91,92,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,125,134,136,137,138,146,152,153,157,161,],[-74,-45,-46,-27,-28,-30,-47,-48,-49,-50,-74,-56,-57,-59,-60,102,-31,-74,-44,122,123,-27,-29,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,134,-27,-51,-52,-58,-53,-73,-70,-61,152,-54,-71,161,-55,]),'PLUS':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,72,-47,-48,-49,-50,-56,-57,-59,-60,72,-47,72,72,72,72,72,72,72,-31,-44,72,72,72,72,-32,-33,-34,-35,-36,-37,72,72,72,72,72,72,72,72,72,-51,-52,-58,72,-53,-73,72,-61,72,72,72,72,-54,72,72,-55,]),'MUL':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,74,-47,-48,-49,-50,-56,-57,-59,-60,74,-47,74,74,74,74,74,74,74,-31,-44,74,74,74,74,74,74,-34,-35,-36,-37,74,74,74,74,74,74,74,74,74,-51,-52,-58,74,-53,-73,74,-61,74,74,74,74,-54,74,74,-55,]),'DIV':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,75,-47,-48,-49,-50,-56,-57,-59,-60,75,-47,75,75,75,75,75,75,75,-31,-44,75,75,75,75,75,75,-34,-35,-36,-37,75,75,75,75,75,75,75,75,75,-51,-52,-58,75,-53,-73,75,-61,75,75,75,75,-54,75,75,-55,]),'MOD':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,76,-47,-48,-49,-50,-56,-57,-59,-60,76,-47,76,76,76,76,76,76,76,-31,-44,76,76,76,76,76,76,-34,-35,-36,-37,76,76,76,76,76,76,76,76,76,-51,-52,-58,76,-53,-73,76,-61,76,76,76,76,-54,76,76,-55,]),'POW':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,77,-47,-48,-49,-50,-56,-57,-59,-60,77,-47,77,77,77,77,77,77,77,-31,-44,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-51,-52,-58,77,-53,-73,77,-61,77,77,77,77,-54,77,77,-55,]),'LE':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,78,-47,-48,-49,-50,-56,-57,-59,-60,78,-47,78,78,78,78,78,78,78,-31,-44,78,78,78,78,-32,-33,-34,-35,-36,-37,78,78,78,78,78,78,78,78,78,-51,-52,-58,78,-53,-73,78,-61,78,78,78,78,-54,78,78,-55,]),'GE':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,79,-47,-48,-49,-50,-56,-57,-59,-60,79,-47,79,79,79,79,79,79,79,-31,-44,79,79,79,79,-32,-33,-34,-35,-36,-37,79,79,79,79,79,79,79,79,79,-51,-52,-58,79,-53,-73,79,-61,79,79,79,79,-54,79,79,-55,]),'LT':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,80,-47,-48,-49,-50,-56,-57,-59,-60,80,-47,80,80,80,80,80,80,80,-31,-44,80,80,80,80,-32,-33,-34,-35,-36,-37,80,80,80,80,80,80,80,80,80,-51,-52,-58,80,-53,-73,80,-61,80,80,80,80,-54,80,80,-55,]),'GT':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,81,-47,-48,-49,-50,-56,-57,-59,-60,81,-47,81,81,81,81,81,81,81,-31,-44,81,81,81,81,-32,-33,-34,-35,-36,-37,81,81,81,81,81,81,81,81,81,-51,-52,-58,81,-53,-73,81,-61,81,81,81,81,-54,81,81,-55,]),'EQ':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,82,-47,-48,-49,-50,-56,-57,-59,-60,82,-47,82,82,82,82,82,82,82,-31,-44,82,82,82,82,-32,-33,-34,-35,-36,-37,82,82,82,82,82,82,82,82,82,-51,-52,-58,82,-53,-73,82,-61,82,82,82,82,-54,82,82,-55,]),'NE':([35,36,38,42,44,45,46,48,49,51,52,55,56,62,63,64,65,66,67,68,86,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,126,134,136,137,138,141,144,145,146,152,153,157,161,],[-45,-46,83,-47,-48,-49,-50,-56,-57,-59,-60,83,-47,83,83,83,83,83,83,83,-31,-44,83,83,83,83,-32,-33,-34,-35,-36,-37,83,83,83,83,83,83,83,83,83,-51,-52,-58,83,-53,-73,83,-61,83,83,83,83,-54,83,83,-55,]),'AND':([35,36,38,39,42,44,45,46,48,49,51,52,54,55,56,57,86,89,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,134,136,138,152,161,],[-45,-46,-62,84,-47,-48,-49,-50,-56,-57,-59,-60,84,-62,-47,84,-31,-44,-62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,-62,-51,-52,-58,-53,-73,-61,-54,-55,]),'OR':([35,36,38,39,42,44,45,46,48,49,51,52,54,55,56,57,86,89,92,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,125,134,136,138,152,161,],[-45,-46,-62,85,-47,-48,-49,-50,-56,-57,-59,-60,85,-62,-47,85,-31,-44,-62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-64,-62,-51,-52,-58,-53,-73,-61,-54,-55,]),'ELLIPSIS':([35,36,42,44,45,46,48,49,51,52,86,89,92,105,106,107,108,109,110,111,112,113,114,115,116,122,123,125,134,136,138,141,152,161,],[-45,-46,-47,-48,-49,-50,-56,-57,-59,-60,-31,-44,124,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-51,-52,-58,-53,-73,-61,124,-54,-55,]),'COLON':([35,36,42,44,45,46,48,49,51,52,86,89,105,106,107,108,109,110,111,112,113,114,115,116,120,122,123,125,134,136,138,146,152,161,],[-45,-46,-47,-48,-49,-50,-56,-57,-59,-60,-31,-44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,135,-51,-52,-58,-53,-73,-61,151,-54,-55,]),'WALRUS':([56,],[96,]),'RANGE':([96,],[128,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'commands':([0,],[2,]),'empty':([0,16,24,33,34,47,87,88,98,],[3,40,40,40,40,40,40,40,40,]),'basic_block':([2,59,95,97,148,149,150,],[4,99,127,129,154,155,156,]),'line_statement':([2,4,59,95,97,99,127,129,148,149,150,154,155,156,],[5,20,5,5,5,20,20,20,5,5,5,20,20,20,]),'statement':([2,4,59,95,97,99,127,129,148,149,150,154,155,156,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if_line':([2,4,59,95,97,99,127,129,148,149,150,154,155,156,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'for_line':([2,4,59,95,97,99,127,129,148,149,150,154,155,156,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'while_line':([2,4,59,95,97,99,127,129,148,149,150,154,155,156,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'func_line':([2,4,59,95,97,99,127,129,148,149,150,154,155,156,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'incr_decr':([2,4,16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,59,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,95,97,98,99,124,127,128,129,132,133,135,147,148,149,150,151,154,155,156,],[14,14,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,14,51,14,51,14,51,14,51,51,51,51,14,14,14,51,14,14,14,]),'func_call':([2,4,16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,59,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,95,97,98,99,124,127,128,129,132,133,135,147,148,149,150,151,154,155,156,],[15,15,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,15,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,15,15,52,15,52,15,52,15,52,52,52,52,15,15,15,52,15,15,15,]),'else_line':([7,],[22,]),'expr_list':([16,24,33,34,47,87,88,98,],[37,60,69,70,90,119,121,130,]),'expr':([16,17,18,24,26,27,28,29,30,31,32,33,34,43,47,50,61,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,94,98,124,128,132,133,135,147,151,],[38,55,55,38,62,63,64,65,66,67,68,38,38,89,92,93,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,38,126,38,137,141,144,145,146,153,157,]),'cond_list':([16,17,18,24,33,34,47,87,88,98,],[39,54,57,39,39,39,39,39,39,39,]),'range':([47,128,],[91,140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> commands','program',1,'p_program','Parser.py',21),
  ('commands -> commands basic_block','commands',2,'p_commands','Parser.py',28),
  ('commands -> empty','commands',1,'p_commands','Parser.py',29),
  ('basic_block -> line_statement','basic_block',1,'p_basic_block','Parser.py',40),
  ('basic_block -> basic_block line_statement','basic_block',2,'p_basic_block','Parser.py',41),
  ('line_statement -> statement SEMICOLON','line_statement',2,'p_line_statement','Parser.py',50),
  ('line_statement -> if_line','line_statement',1,'p_if_else_statement','Parser.py',57),
  ('line_statement -> if_line else_line','line_statement',2,'p_if_else_statement','Parser.py',58),
  ('line_statement -> for_line','line_statement',1,'p_for_loop_statement','Parser.py',69),
  ('line_statement -> while_line','line_statement',1,'p_for_loop_statement','Parser.py',70),
  ('line_statement -> func_line','line_statement',1,'p_for_loop_statement','Parser.py',71),
  ('statement -> PRINT LPAREN expr_list RPAREN','statement',4,'p_print_statement','Parser.py',77),
  ('statement -> LET IDENTIFIER EQUALS expr','statement',4,'p_assign','Parser.py',84),
  ('statement -> LET IDENTIFIER','statement',2,'p_assign','Parser.py',85),
  ('statement -> IDENTIFIER EQUALS expr','statement',3,'p_reassign','Parser.py',96),
  ('statement -> IDENTIFIER PLUSEQUALS expr','statement',3,'p_reassign_plus_equals','Parser.py',102),
  ('statement -> IDENTIFIER MINUSEQUALS expr','statement',3,'p_reassign_plus_equals','Parser.py',103),
  ('statement -> IDENTIFIER MULEQUALS expr','statement',3,'p_reassign_plus_equals','Parser.py',104),
  ('statement -> IDENTIFIER DIVEQUALS expr','statement',3,'p_reassign_plus_equals','Parser.py',105),
  ('statement -> IDENTIFIER MODEQUALS expr','statement',3,'p_reassign_plus_equals','Parser.py',106),
  ('statement -> IDENTIFIER POWEQUALS expr','statement',3,'p_reassign_plus_equals','Parser.py',107),
  ('statement -> incr_decr','statement',1,'p_incr_decr_statement','Parser.py',114),
  ('statement -> IDENTIFIER LBRACKET expr_list RBRACKET EQUALS expr','statement',6,'p_list_assign_statement','Parser.py',120),
  ('statement -> func_call','statement',1,'p_func_call_statement','Parser.py',126),
  ('statement -> IDENTIFIER LPAREN expr_list RPAREN EQUALS expr','statement',6,'p_func_math_statement','Parser.py',132),
  ('statement -> RETURN expr_list','statement',2,'p_return_statement','Parser.py',138),
  ('expr_list -> expr','expr_list',1,'p_expr_list','Parser.py',144),
  ('expr_list -> cond_list','expr_list',1,'p_expr_list','Parser.py',145),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','Parser.py',146),
  ('expr_list -> empty','expr_list',1,'p_expr_list','Parser.py',147),
  ('expr -> LET IDENTIFIER','expr',2,'p_assign_expr','Parser.py',158),
  ('expr -> expr PLUS expr','expr',3,'p_binop','Parser.py',164),
  ('expr -> expr MINUS expr','expr',3,'p_binop','Parser.py',165),
  ('expr -> expr MUL expr','expr',3,'p_binop','Parser.py',166),
  ('expr -> expr DIV expr','expr',3,'p_binop','Parser.py',167),
  ('expr -> expr MOD expr','expr',3,'p_binop','Parser.py',168),
  ('expr -> expr POW expr','expr',3,'p_binop','Parser.py',169),
  ('expr -> expr LE expr','expr',3,'p_binop','Parser.py',170),
  ('expr -> expr GE expr','expr',3,'p_binop','Parser.py',171),
  ('expr -> expr LT expr','expr',3,'p_binop','Parser.py',172),
  ('expr -> expr GT expr','expr',3,'p_binop','Parser.py',173),
  ('expr -> expr EQ expr','expr',3,'p_binop','Parser.py',174),
  ('expr -> expr NE expr','expr',3,'p_binop','Parser.py',175),
  ('expr -> MINUS expr','expr',2,'p_unary_negate','Parser.py',181),
  ('incr_decr -> IDENTIFIER PLUSPLUS','incr_decr',2,'p_increment_decrement','Parser.py',191),
  ('incr_decr -> IDENTIFIER MINUSMINUS','incr_decr',2,'p_increment_decrement','Parser.py',192),
  ('expr -> IDENTIFIER','expr',1,'p_iden','Parser.py',200),
  ('expr -> INTCONST','expr',1,'p_integer_const','Parser.py',206),
  ('expr -> FLOATCONST','expr',1,'p_float_const','Parser.py',212),
  ('expr -> STRINGCONST','expr',1,'p_string_const','Parser.py',218),
  ('expr -> LBRACKET expr_list RBRACKET','expr',3,'p_list_const','Parser.py',224),
  ('expr -> LBRACKET range RBRACKET','expr',3,'p_list_const_generate','Parser.py',230),
  ('expr -> IDENTIFIER LBRACKET expr_list RBRACKET','expr',4,'p_list_indexing','Parser.py',236),
  ('expr -> IDENTIFIER LBRACKET expr COLON expr RBRACKET','expr',6,'p_list_slicing','Parser.py',242),
  ('expr -> IDENTIFIER LBRACKET expr COLON expr COLON expr RBRACKET','expr',8,'p_list_slicing','Parser.py',243),
  ('expr -> TRUE','expr',1,'p_boolean','Parser.py',253),
  ('expr -> FALSE','expr',1,'p_boolean','Parser.py',254),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_paren','Parser.py',266),
  ('expr -> incr_decr','expr',1,'p_expr_incr_decr','Parser.py',272),
  ('expr -> func_call','expr',1,'p_func_call_expr','Parser.py',278),
  ('expr -> LEN LPAREN expr RPAREN','expr',4,'p_func_call_len','Parser.py',284),
  ('cond_list -> expr','cond_list',1,'p_cond_list','Parser.py',290),
  ('cond_list -> cond_list AND expr','cond_list',3,'p_cond_list','Parser.py',291),
  ('cond_list -> cond_list OR expr','cond_list',3,'p_cond_list','Parser.py',292),
  ('if_line -> IF cond_list LBRACE basic_block RBRACE','if_line',5,'p_if_stmt','Parser.py',301),
  ('else_line -> ELSE LBRACE basic_block RBRACE','else_line',4,'p_else_line','Parser.py',308),
  ('for_line -> FOR IDENTIFIER WALRUS RANGE range LBRACE basic_block RBRACE','for_line',8,'p_for_line','Parser.py',315),
  ('for_line -> FOR IDENTIFIER WALRUS RANGE expr LBRACE basic_block RBRACE','for_line',8,'p_for_line_single_range','Parser.py',321),
  ('while_line -> FOR cond_list LBRACE basic_block RBRACE','while_line',5,'p_while_line','Parser.py',331),
  ('range -> expr ELLIPSIS expr','range',3,'p_range_generator','Parser.py',337),
  ('range -> expr ELLIPSIS expr COMMA expr','range',5,'p_range_generator','Parser.py',338),
  ('func_line -> FUNC IDENTIFIER LPAREN expr_list RPAREN LBRACE basic_block RBRACE','func_line',8,'p_function_line','Parser.py',347),
  ('func_call -> IDENTIFIER LPAREN expr_list RPAREN','func_call',4,'p_function_call','Parser.py',353),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',359),
]
